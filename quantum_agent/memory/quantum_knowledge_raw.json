[
  {
    "id": "qiskit_-4034986861419229820_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/api/qiskit",
    "source": "qiskit",
    "doc_type": "api",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:55:58.818051"
  },
  {
    "id": "qiskit_2081954187798313348_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/api/qiskit-transpiler-service-rest",
    "source": "qiskit",
    "doc_type": "api",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:00.653951"
  },
  {
    "id": "qiskit_5051915181171976200_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:02.179508"
  },
  {
    "id": "qiskit_-8141036875762610808_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/../api/qiskit/release-notes",
    "source": "qiskit",
    "doc_type": "api",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:03.674884"
  },
  {
    "id": "qiskit_-1458633049369425395_0",
    "title": "12. Virtual Environments and Packages \u2014 Python 3.10.18 documentation",
    "content": "Navigation index modules | next | previous | Python \u00bb 3.10.18 Documentation \u00bb The Python Tutorial \u00bb 12. Virtual Environments and Packages | Theme Auto Light Dark | 12. Virtual Environments and Packages\u00b6 12.1. Introduction\u00b6 Python applications will often use packages and modules that don\u2019t come as part of the standard library. Applications will sometimes need a specific version of a library, because the application may require that a particular bug has been fixed or the application may be written using an obsolete version of the library\u2019s interface. This means it may not be possible for one Python installation to meet the requirements of every application. If application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run. The solution for this problem is to create a virtual environment, a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages. Different applications can then use different virtual environments. To resolve the earlier example of conflicting requirements, application A can have its own virtual environment with version 1.0 installed while application B has another virtual environment with version 2.0. If application B requires a library be upgraded to version 3.0, this will not affect application A\u2019s environment. 12.2. Creating Virtual Environments\u00b6 The module used to create and manage virtual environments is called venv. venv will usually install the most recent version of Python that you have available. If you have multiple versions of Python on your system, you can select a specific Python version by running python3 or whichever version you want. To create a virtual environment, decide upon a directory where you want to place it, and run the venv module as a script with the directory path: python -m venv tutorial-env This will create the tutorial-env directory if it doesn\u2019t exist, and also create directories inside it containing a copy of the Python interpreter and various supporting files. A common directory location for a virtual environment is .venv. This name keeps the directory typically hidden in your shell and thus out of the way while giving it a name that explains why the directory exists. It also prevents clashing with .env environment variable definition files that some tooling supports. Once you\u2019ve created a virtual environment, you may activate it. On Windows, run: tutorial-env\\Scripts\\activate.bat On Unix or MacOS, run: source tutorial-env/bin/activate (This script is written for the bash shell. If you use the csh or fish shells, there are alternate activate.csh and activate.fish scripts you should use instead.) Activating the virtual environment will change your shell\u2019s prompt to show what virtual environment you\u2019re using, and modify the environment so that running python will get you that particular version and installation of Python. For example: $ source ~/envs/tutorial-env/bin/activate (tutorial-env) $ python Python 3.5.1 (default, May 6 2016, 10:59:36) ... >>> import sys >>> sys.path ['', '/usr/local/lib/python35.zip', ..., '~/envs/tutorial-env/lib/python3.5/site-packages'] >>> 12.3. Managing Packages with pip\u00b6 You can install, upgrade, and remove packages using a program called pip. By default pip will install packages from the Python Package Index. You can browse the Python Package Index by going to it in your web browser. pip has a number of subcommands: \u201cinstall\u201d, \u201cuninstall\u201d, \u201cfreeze\u201d, etc. (Consult the Installing Python Modules guide for complete documentation for pip.) You can install the latest version of a package by specifying a package\u2019s name: (tutorial-env) $ python -m pip install novas Collecting novas Downloading novas-3.1.1.3.tar.gz (136kB) Installing collected packages: novas Running setup.py install for novas Successfully installed novas-3.1.1.3 You can also install a specific version of a package by giving the package name followed by == and the version number: (tutorial-env) $ python -m pip install requests==2.6.0 Collecting requests==2.6.0 Using cached requests-2.6.0-py2.py3-none-any.whl Installing collected packages: requests Successfully installed requests-2.6.0 If you re-run this command, pip will notice that the requested version is already installed and do nothing. You can supply a different version number to get that version, or you can run pip install --upgrade to upgrade the package to the latest version: (tutorial-env) $ python -m pip install --upgrade requests Collecting requests Installing collected packages: requests Found existing installation: requests 2.6.0 Uninstalling requests-2.6.0: Successfully uninstalled requests-2.6.0 Successfully installed requests-2.7.0 pip uninstall followed by one or more package names will remove the packages from the virtual environment. pip show will display information about a particular package: (tutorial-env) $ pip show requests --- Metadata-Version: 2.0 Name: requests Version: 2.7.0 Summary: Python HTTP for Humans. Home-page: http://python-requests.org Author: Kenneth Reitz Author-email: me@kennethreitz.com License: Apache 2.0 Location: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages Requires: pip list will display all of the packages installed in the virtual environment: (tutorial-env) $ pip list novas (3.1.1.3) numpy (1.9.2) pip (7.0.3) requests (2.7.0) setuptools (16.0) pip freeze will produce a similar list of the installed packages, but the output uses the format that pip install expects. A common convention is to put this list in a requirements.txt file: (tutorial-env) $ pip freeze > requirements.txt (tutorial-env) $ cat requirements.txt novas==3.1.1.3 numpy==1.9.2 requests==2.7.0 The requirements.txt can then be committed to version control and shipped as part of an application. Users can then install all the necessary packages with install -r: (tutorial-env) $ python -m pip install -r requirements.txt Collecting novas==3.1.1.3 (from -r requirements.txt (line 1)) ... Collecting numpy==1.9.2 (from -r requirements.txt (line 2)) ... Collecting requests==2.7.0 (from -r requirements.txt (line 3)) ... Installing collected packages: novas, numpy, requests Running setup.py install for novas Successfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0 pip has many more options. Consult the Installing Python Modules guide for complete documentation for pip. When you\u2019ve written a package and want to make it available on the Python Package Index, consult the Distributing Python Modules guide. Table of Contents 12. Virtual Environments and Packages 12.1. Introduction 12.2. Creating Virtual Environments 12.3. Managing Packages with pip Previous topic 11. Brief Tour of the Standard Library \u2014 Part II Next topic 13. What Now? This Page Report a Bug Show Source Navigation index modules | next | previous | Python \u00bb 3.10.18 Documentation \u00bb The Python Tutorial \u00bb 12. Virtual Environments and Packages | Theme Auto Light Dark | \u00a9 Copyright 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See History and License for more information. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Jul 08, 2025. Found a bug? Created using Sphinx 3.4.3.",
    "url": "https://docs.python.org/3.10/tutorial/venv.html",
    "source": "qiskit",
    "doc_type": "tutorial",
    "metadata": {
      "word_count": 1094,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:04.908313"
  },
  {
    "id": "qiskit_-5546495638427988590_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/support",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:06.427874"
  },
  {
    "id": "qiskit_-2601255393928281837_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/save-jobs",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:07.952369"
  },
  {
    "id": "qiskit_-8748753964371281899_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/visualize-results",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:10.027231"
  },
  {
    "id": "qiskit_4336983356311915157_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/configure-qiskit-local",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:14.838207"
  },
  {
    "id": "qiskit_-3979231589408941541_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/migration-guides/qiskit-1.0",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:16.515818"
  },
  {
    "id": "qiskit_132152759626168988_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/custom-transpiler-pass",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:18.071493"
  },
  {
    "id": "qiskit_-8950074623414761185_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/execute-on-hardware",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:20.819640"
  },
  {
    "id": "qiskit_-5146977998492514780_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/cloud-setup",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:22.342899"
  },
  {
    "id": "qiskit_-8924568415729371600_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/optimize-for-hardware",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:23.888992"
  },
  {
    "id": "qiskit_-4432745114657832392_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/tutorials",
    "source": "qiskit",
    "doc_type": "tutorial",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:25.512698"
  },
  {
    "id": "qiskit_-6572822461848857286_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/tutorials/operator-back-propagation",
    "source": "qiskit",
    "doc_type": "tutorial",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:27.079745"
  },
  {
    "id": "qiskit_-3111760199528716866_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/api/qiskit-runtime-rest",
    "source": "qiskit",
    "doc_type": "api",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:28.601447"
  },
  {
    "id": "qiskit_1957959519930842046_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/tutorials/hello-world",
    "source": "qiskit",
    "doc_type": "tutorial",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:30.110257"
  },
  {
    "id": "qiskit_5329749934454630210_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/circuit-library",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:31.589765"
  },
  {
    "id": "qiskit_-1454832454717850558_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/qiskit-transpiler-service",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:33.151218"
  },
  {
    "id": "qiskit_1576130279840701508_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/primitives",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:34.649250"
  },
  {
    "id": "qiskit_540113431248986693_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/tutorials/solve-higher-order-binary-optimization-problems-with-q-ctrls-optimization-solver",
    "source": "qiskit",
    "doc_type": "tutorial",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:36.296268"
  },
  {
    "id": "qiskit_369281266483043921_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/execution-modes",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:37.794438"
  },
  {
    "id": "qiskit_2378892771481541330_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/post-process-results",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:39.334853"
  },
  {
    "id": "qiskit_-6035909786987568548_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/specify-runtime-options",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:40.832133"
  },
  {
    "id": "qiskit_-7532145038943887651_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/learning",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:42.315606"
  },
  {
    "id": "qiskit_-1350767397701274658_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/api/qiskit-ibm-runtime",
    "source": "qiskit",
    "doc_type": "api",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:43.905729"
  },
  {
    "id": "qiskit_8288883277390183392_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/operators-overview",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:45.386618"
  },
  {
    "id": "qiskit_-651228303117472543_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/map-problem-to-circuits",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:46.885780"
  },
  {
    "id": "qiskit_863601675033555047_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/construct-circuits",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:48.387759"
  },
  {
    "id": "qiskit_-4734491372765461656_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:50.087697"
  },
  {
    "id": "qiskit_-6532880604241198991_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/qiskit-code-assistant",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:51.982367"
  },
  {
    "id": "qiskit_1545393466163938546_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/../api/qiskit-ibm-runtime/release-notes",
    "source": "qiskit",
    "doc_type": "api",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:55.435853"
  },
  {
    "id": "qiskit_8954944988796914549_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/tutorials/sample-based-quantum-diagonalization",
    "source": "qiskit",
    "doc_type": "tutorial",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:56:57.042487"
  },
  {
    "id": "qiskit_-2933285211406884998_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/api/qiskit-ibm-transpiler",
    "source": "qiskit",
    "doc_type": "api",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:00.214183"
  },
  {
    "id": "qiskit_8146528559641336187_0",
    "title": "IBM Quantum Documentation",
    "content": "DocumentationWhether you are ready to code your first circuit or execute a large research workload, you can find documentation for using Qiskit and IBM Quantum hardware at the following links.Get started with Hello WorldDevelopment workflowA framework for breaking down domain-specific problems and software capabilities in stages1 Map the problem to quantum circuitsQiskit SDK circuit libraryConstruct circuitsQiskit SDK's quantum_info moduleSee all2 Optimize for target hardwareTranspile with pass managersWrite a custom transpiler passAI-enhanced transpiler passesSee all3 Execute on target hardwareIntroduction to primitivesSpecify Qiskit Runtime optionsIntroduction to execution modesSee all4 Post-process resultsSave and retrieve jobsVisualize resultsSee allAPI referenceGuidance on how to use our key APIsQiskit SDKOpen-source toolkit for useful quantum computingQiskit SDK APIQiskit RuntimeThe platform to execute, manage, and optimize quantum computing programs in real timePython clientREST APIQiskit Transpiler ServiceTranspilation services in the cloud, including AI-enhanced transpiler passesPython clientREST APITutorialsExplore utility-grade algorithms and applications with Qiskit RuntimeView all tutorialsExplore workflows toward utilitySample-based quantum diagonalization of a chemistry HamiltonianVerifiable sampling algorithmsExplore workflows toward utilityOperator backpropagation (OBP) for estimation of expectation valuesVerifiable sampling algorithmsExplore workflows toward utilityHigher-order binary optimization with Q-CTRL's Optimization SolverObservable estimation",
    "url": "https://qiskit.org/documentation/docs/guides/transpile-with-pass-managers",
    "source": "qiskit",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:04.484305"
  },
  {
    "id": "cirq_130576689289702915_0",
    "title": "Simulate a circuit \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Simulate Exact Simulation Simulate a perfectly noiseless quantum computer. Noisy Simulation Simulate a more realistic quantum computer, subject to error and noise. Parameter Sweeps Efficiently evaluate many circuits which only differ in operation parameter values. State Histograms Visualize the results of simulation as a histogram over basis states. Quantum Virtual Machine Build and use a QVM with a virtual Engine and realistic noise model. QVM Circuit Preparation Prepare and run a circuit on a QVM in detail. QVM Stabilizer Example Run a stabilizer circuit on QVMs representing different devices and different noise. QVM Creation Template Run a device-ready circuit on a QVM with default settings. Virtual Engine Interface Details on the virtual version of the hardware Engine API and how to use it. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-05-31 UTC.",
    "url": "https://quantumai.google/cirq/simulate",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 178,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:07.730449"
  },
  {
    "id": "cirq_-5649081536677761786_0",
    "title": "Quantum variational algorithm \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Quantum variational algorithm View on QuantumAI Run in Google Colab View source on GitHub Download notebook In this tutorial, we use the variational quantum eigensolver (VQE) in Cirq to optimize a simple Ising model. try: import cirq except ImportError: print(\"installing cirq...\") !pip install --quiet cirq print(\"installed cirq.\") import cirq Background: Variational Quantum Algorithm The variational method in quantum theory is a classical method for finding low energy states of a quantum system. The rough idea of this method is that one defines a trial wave function (sometimes called an ansatz) as a function of some parameters, and then one finds the values of these parameters that minimize the expectation value of the energy with respect to these parameters. This minimized ansatz is then an approximation to the lowest energy eigenstate, and the expectation value serves as an upper bound on the energy of the ground state. In the last few years (see arXiv:1304.3061 and arXiv:1507.08969, for example), it has been realized that quantum computers can mimic the classical technique and that a quantum computer does so with certain advantages. In particular, when one applies the classical variational method to a system of \\(n\\) qubits, an exponential number (in \\(n\\)) of complex numbers is necessary to generically represent the wave function of the system. However, with a quantum computer, one can directly produce this state using a parameterized quantum circuit with less than exponential parameters, and then use repeated measurements to estimate the expectation value of the energy. This idea has led to a class of algorithms known as variational quantum algorithms. Indeed this approach is not just limited to finding low energy eigenstates, but minimizing any objective function that can be expressed as a quantum observable. It is an open question to identify under what conditions these quantum variational algorithms will succeed, and exploring this class of algorithms is a key part of the research for noisy intermediate-scale quantum computers. The classical problem we will focus on is the 2D +/- Ising model with transverse field (ISING). This problem is NP-complete. It is highly unlikely that quantum computers will be able to efficiently solve it across all instances because it is generally believed that quantum computers cannot solve all NP-complete problems in polynomial time. Yet this type of problem is illustrative of the general class of problems that Cirq is designed to tackle. Let's define the problem. Consider the energy function \\(E(s_1,\\dots,s_n) = \\sum_{\\langle i,j \\rangle} J_{i,j}s_i s_j + \\sum_i h_i s_i\\) where here each \\(s_i, J_{i,j}\\), and \\(h_i\\) are either +1 or -1. Here each index i is associated with a bit on a square lattice, and the \\(\\langle i,j \\rangle\\) notation means sums over neighboring bits on this lattice. The problem we would like to solve is, given \\(J_{i,j}\\), and \\(h_i\\), find an assignment of \\(s_i\\) values that minimize \\(E\\). How does a variational quantum algorithm work for this? One approach is to consider \\(n\\) qubits and associate them with each of the bits in the classical problem. This maps the classical problem onto the quantum problem of minimizing the expectation value of the observable \\(H=\\sum_{\\langle i,j \\rangle} J_{i,j} Z_i Z_j + \\sum_i h_iZ_i\\) Then one defines a set of parameterized quantum circuits, i.e., a quantum circuit where the gates (or more general quantum operations) are parameterized by some values. This produces an ansatz state \\(|\\psi(p_1, p_2, \\dots, p_k)\\rangle\\) where \\(p_i\\) are the parameters that produce this state (here we assume a pure state, but mixed states are of course possible). The variational algorithm then works by noting that one can obtain the value of the objective function for a given ansatz state by Prepare the ansatz state. Make a measurement which samples from some terms in H. Goto 1. Note that one cannot always measure \\(H\\) directly (without the use of quantum phase estimation). So one often relies on the linearity of expectation values to measure parts of \\(H\\) in step 2. One always needs to repeat the measurements to obtain an estimate of the expectation value. How many measurements needed to achieve a given accuracy is beyond the scope of this tutorial, but Cirq can help investigate this question. The above shows that one can use a quantum computer to obtain estimates of the objective function for the ansatz. This can then be used in an outer loop to try to obtain parameters for the lowest value of the objective function. For these best parameter, one can then use that best ansatz to produce samples of solutions to the problem, which obtain a hopefully good approximation for the lowest possible value of the objective function. Create a circuit on a Grid To build the above variational quantum algorithm using Cirq, one begins by building the appropriate circuit. Because the problem we have defined has a natural structure on a grid, we will use Cirq\u2019s built-in cirq.GridQubits as our qubits. We will demonstrate some of how this works in an interactive Python environment, the following code can be run in series in a Python environment where you have Cirq installed. For more about circuits and how to create them, see the Tutorial or the Circuits page. # define the length and width of the grid. length = 3 # define qubits on the grid. qubits = cirq.GridQubit.square(length) print(qubits) [cirq.GridQubit(0, 0), cirq.GridQubit(0, 1), cirq.GridQubit(0, 2), cirq.GridQubit(1, 0), cirq.GridQubit(1, 1), cirq.GridQubit(1, 2), cirq.GridQubit(2, 0), cirq.GridQubit(2, 1), cirq.GridQubit(2, 2)] Here we see that we've created a bunch of cirq.GridQubits, which have a row and column, indicating their position on a grid. Now that we have some qubits, let us construct a cirq.Circuit on these qubits. For example, suppose we want to apply the Hadamard gate cirq.H to every qubit whose row index plus column index is even, and an cirq.X gate to every qubit whose row index plus column index is odd. To do this, we write: circuit = cirq.Circuit() circuit.append(cirq.H(q) for q in qubits if (q.row + q.col) % 2 == 0) circuit.append(cirq.X(q) for q in qubits if (q.row + q.col) % 2 == 1) print(circuit) (0, 0): \u2500\u2500\u2500H\u2500\u2500\u2500 (0, 1): \u2500\u2500\u2500X\u2500\u2500\u2500 (0, 2): \u2500\u2500\u2500H\u2500\u2500\u2500 (1, 0): \u2500\u2500\u2500X\u2500\u2500\u2500 (1, 1): \u2500\u2500\u2500H\u2500\u2500\u2500 (1, 2): \u2500\u2500\u2500X\u2500\u2500\u2500 (2, 0): \u2500\u2500\u2500H\u2500\u2500\u2500 (2, 1): \u2500\u2500\u2500X\u2500\u2500\u2500 (2, 2): \u2500\u2500\u2500H\u2500\u2500\u2500 Creating the Ansatz One convenient pattern is to use a python Generator for defining sub-circuits or layers in our algorithm. We will define a function that takes in the relevant parameters and then yields the operations for the sub-circuit, and then this can be appended to the cirq.Circuit: def rot_x_layer(length, half_turns): \"\"\"Yields X rotations by half_turns on a square grid of given length.\"\"\" # Define the gate once and then re-use it for each Operation. rot = cirq.XPowGate(exponent=half_turns) # Create an X rotation Operation for each qubit in the grid. for i in range(length): for j in range(length): yield rot(cirq.GridQubit(i, j)) # Create the circuit using the rot_x_layer generator circuit = cirq.Circuit() circuit.append(rot_x_layer(2, 0.1)) print(circuit) (0, 0): \u2500\u2500\u2500X^0.1\u2500\u2500\u2500 (0, 1): \u2500\u2500\u2500X^0.1\u2500\u2500\u2500 (1, 0): \u2500\u2500\u2500X^0.1\u2500\u2500\u2500 (1, 1): \u2500\u2500\u2500X^0.1\u2500\u2500\u2500 Another important concept here is that the rotation gate is specified in half turns (\\(ht\\)). For a rotation about X, the gate is: \\(\\cos(ht * \\pi) I + i \\sin(ht * \\pi) X\\) There is a lot of freedom defining a variational ansatz. Here we will do a variation on a QAOA strategy and define an ansatz related to the problem we are trying to solve. First, we need to choose how the instances of the problem are represented. These are the values \\(J\\) and \\(h\\) in the Hamiltonian definition. We represent them as two-dimensional arrays (lists of lists). For \\(J\\) we use two such lists, one for the row links and one for the column links. Here is a snippet that we can use to generate random problem instances: import random def rand2d(rows, cols): return [[random.choice([+1, -1]) for _ in range(cols)] for _ in range(rows)] def random_instance(length): # transverse field terms h = rand2d(length, length) # links within a row jr = rand2d(length - 1, length) # links within a column jc = rand2d(length, length - 1) return (h, jr, jc) h, jr, jc = random_instance(3) print(f'transverse fields: {h}') print(f'row j fields: {jr}') print(f'column j fields: {jc}') transverse fields: [[-1, -1, 1], [1, 1, -1], [1, -1, 1]] row j fields: [[1, 1, -1], [1, -1, 1]] column j fields: [[-1, -1], [-1, 1], [1, 1]] In the code above, the actual values will be different for each individual run because they are using random.choice. Given this definition of the problem instance, we can now introduce our ansatz. It will consist of one step of a circuit made up of: Apply an initial mixing step that puts all the qubits into the \\(|+\\rangle=\\frac{1}{\\sqrt{2} }(|0\\rangle+|1\\rangle)\\) state. def prepare_plus_layer(length): for i in range(length): for j in range(length): yield cirq.H(cirq.GridQubit(i, j)) Apply a cirq.ZPowGate for the same parameter for all qubits where the transverse field term \\(h\\) is \\(+1\\). def rot_z_layer(h, half_turns): \"\"\"Yields Z rotations by half_turns conditioned on the field h.\"\"\" gate = cirq.ZPowGate(exponent=half_turns) for i, h_row in enumerate(h): for j, h_ij in enumerate(h_row): if h_ij == 1: yield gate(cirq.GridQubit(i, j)) Apply a cirq.CZPowGate for the same parameter between all qubits where the coupling field term \\(J\\) is \\(+1\\). If the field is \\(-1\\), apply cirq.CZPowGate conjugated by \\(X\\) gates on all qubits. def rot_11_layer(jr, jc, half_turns): \"\"\"Yields rotations about |11> conditioned on the jr and jc fields.\"\"\" cz_gate = cirq.CZPowGate(exponent=half_turns) for i, jr_row in enumerate(jr): for j, jr_ij in enumerate(jr_row): q = cirq.GridQubit(i, j) q_1 = cirq.GridQubit(i + 1, j) if jr_ij == -1: yield cirq.X(q) yield cirq.X(q_1) yield cz_gate(q, q_1) if jr_ij == -1: yield cirq.X(q) yield cirq.X(q_1) for i, jc_row in enumerate(jc): for j, jc_ij in enumerate(jc_row): q = cirq.GridQubit(i, j) q_1 = cirq.GridQubit(i, j + 1) if jc_ij == -1: yield cirq.X(q) yield cirq.X(q_1) yield cz_gate(q, q_1) if jc_ij == -1: yield cirq.X(q) yield cirq.X(q_1) Apply an cirq.XPowGate for the same parameter for all qubits. This is the method rot_x_layer we have written above. Putting all together, we can create a step that uses just three parameters. Below is the code, which uses the generator for each of the layers (note to advanced Python users: this code does not contain a bug in using yield due to the auto flattening of the OP_TREE concept. Typically, one would want to use yield from here, but this is not necessary): def initial_step(length): yield prepare_plus_layer(length) def one_step(h, jr, jc, x_half_turns, h_half_turns, j_half_turns): length = len(h) yield rot_z_layer(h, h_half_turns) yield rot_11_layer(jr, jc, j_half_turns) yield rot_x_layer(length, x_half_turns) h, jr, jc = random_instance(3) circuit = cirq.Circuit() circuit.append(initial_step(len(h))) circuit.append(one_step(h, jr, jc, 0.1, 0.2, 0.3)) print(circuit) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 (0, 0): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^0.1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 (0, 1): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500Z^0.2\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^0.1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 (0, 2): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500Z^0.2\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500X^0.1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 (1, 0): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500\u2500\u2500X\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^0.1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 (1, 1): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500Z^0.2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^0.1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 (1, 2): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500Z^0.2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^0.1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 (2, 0): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500\u2500\u2500X\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^0.1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 (2, 1): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500X^0.1\u2500\u2500\u2500 \u2502 \u2502 (2, 2): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500Z^0.2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.3\u2500\u2500\u2500X\u2500\u2500\u2500X^0.1\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Here we see that we have chosen particular parameter values \\((0.1, 0.2, 0.3)\\). Simulation In Cirq, the simulators make a distinction between a run and a simulation. A run only allows for a simulation that mimics the actual quantum hardware. For example, it does not allow for access to the amplitudes of the wave function of the system, since that is not experimentally accessible. Simulate commands, however, are broader and allow different forms of simulation. When prototyping small circuits, it is useful to execute simulate methods, but one should be wary of relying on them when running against actual hardware. simulator = cirq.Simulator() circuit = cirq.Circuit() circuit.append(initial_step(len(h))) circuit.append(one_step(h, jr, jc, 0.1, 0.2, 0.3)) circuit.append(cirq.measure(*qubits, key='x')) results = simulator.run(circuit, repetitions=100) print(results.histogram(key='x')) Counter({21: 4, 58: 3, 103: 3, 28: 2, 51: 2, 53: 2, 311: 2, 149: 2, 341: 2, 165: 2, 163: 2, 298: 2, 105: 2, 142: 2, 85: 2, 392: 1, 23: 1, 65: 1, 290: 1, 204: 1, 323: 1, 42: 1, 347: 1, 181: 1, 106: 1, 244: 1, 302: 1, 307: 1, 481: 1, 37: 1, 158: 1, 141: 1, 97: 1, 67: 1, 270: 1, 116: 1, 277: 1, 381: 1, 331: 1, 209: 1, 505: 1, 274: 1, 138: 1, 22: 1, 156: 1, 261: 1, 157: 1, 164: 1, 9: 1, 91: 1, 19: 1, 291: 1, 132: 1, 59: 1, 350: 1, 73: 1, 343: 1, 69: 1, 355: 1, 225: 1, 285: 1, 117: 1, 327: 1, 267: 1, 20: 1, 14: 1, 389: 1, 167: 1, 466: 1, 351: 1, 27: 1, 215: 1, 275: 1, 324: 1, 236: 1, 55: 1, 293: 1, 35: 1, 269: 1, 501: 1, 458: 1}) Note that we have run the simulation 100 times and produced a histogram of the counts of the measurement results. What are the keys in the histogram counter? Note that we have passed in the order of the qubits. This ordering is then used to translate the order of the measurement results to a register using a big endian representation. For our optimization problem, we want to calculate the value of the objective function for a given result run. One way to do this is using the raw measurement data from the result of simulator.run. Another way to do this is to provide to the histogram a method to calculate the objective: this will then be used as the key for the returned Counter. import numpy as np def energy_func(length, h, jr, jc): def energy(measurements): # Reshape measurement into array that matches grid shape. meas_list_of_lists = [measurements[i * length : (i + 1) * length] for i in range(length)] # Convert true/false to +1/-1. pm_meas = 1 - 2 * np.array(meas_list_of_lists).astype(np.int32) tot_energy = np.sum(pm_meas * h) for i, jr_row in enumerate(jr): for j, jr_ij in enumerate(jr_row): tot_energy += jr_ij * pm_meas[i, j] * pm_meas[i + 1, j] for i, jc_row in enumerate(jc): for j, jc_ij in enumerate(jc_row): tot_energy += jc_ij * pm_meas[i, j] * pm_meas[i, j + 1] return tot_energy return energy print(results.histogram(key='x', fold_func=energy_func(3, h, jr, jc))) Counter({np.int64(7): 18, np.int64(-1): 16, np.int64(-3): 15, np.int64(1): 12, np.int64(5): 11, np.int64(3): 10, np.int64(-5): 8, np.int64(9): 5, np.int64(-7): 2, np.int64(-9): 2, np.int64(11): 1}) One can then calculate the expectation value over all repetitions: def obj_func(result): energy_hist = result.histogram(key='x', fold_func=energy_func(3, h, jr, jc)) return np.sum([k * v for k, v in energy_hist.items()]) / result.repetitions print(f'Value of the objective function {obj_func(results)}') Value of the objective function 1.46 Parameterizing the Ansatz Now that we have constructed a variational ansatz and shown how to simulate it using Cirq, we can think about optimizing the value. On quantum hardware, one would most likely want to have the optimization code as close to the hardware as possible. As the classical hardware that is allowed to inter-operate with the quantum hardware becomes better specified, this language will be better defined. Without this specification, however, Cirq also provides a useful concept for optimizing the looping in many optimization algorithms. This is the fact that many of the value in the gate sets can, instead of being specified by a float, be specified by a symply.Symbol, and this sympy.Symbol can be substituted for a value specified at execution time. Luckily for us, we have written our code so that using parameterized values is as simple as passing sympy.Symbol objects where we previously passed float values. import sympy circuit = cirq.Circuit() alpha = sympy.Symbol('alpha') beta = sympy.Symbol('beta') gamma = sympy.Symbol('gamma') circuit.append(initial_step(len(h))) circuit.append(one_step(h, jr, jc, alpha, beta, gamma)) circuit.append(cirq.measure(*qubits, key='x')) print(circuit) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 (0, 0): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^alpha\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M('x')\u2500\u2500\u2500 \u2502 \u2502 \u2502 (0, 1): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500Z^beta\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^alpha\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 (0, 2): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500Z^beta\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500X^alpha\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 (1, 0): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500\u2500\u2500X\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^alpha\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 \u2502 (1, 1): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500Z^beta\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^alpha\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 \u2502 (1, 2): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500Z^beta\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^alpha\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 (2, 0): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500\u2500\u2500X\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X^alpha\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 (2, 1): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500X^alpha\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 (2, 2): \u2500\u2500\u2500H\u2500\u2500\u2500\u2500Z^beta\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^gamma\u2500\u2500\u2500X\u2500\u2500\u2500X^alpha\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Note now that the circuit's gates are parameterized. Parameters are specified at runtime using a cirq.ParamResolver, which is just a dictionary from Symbol keys to runtime values. For instance: resolver = cirq.ParamResolver({'alpha': 0.1, 'beta': 0.3, 'gamma': 0.7}) resolved_circuit = cirq.resolve_parameters(circuit, resolver) resolves the parameters to actual values in the circuit. Cirq also has the concept of a sweep. A sweep is a collection of parameter resolvers. This runtime information is very useful when one wants to run many circuits for many different parameter values. Sweeps can be created to specify values directly (this is one way to get classical information into a circuit), or a variety of helper methods. For example suppose we want to evaluate our circuit over an equally spaced grid of parameter values. We can easily create this using cirq.LinSpace. sweep = ( cirq.Linspace(key='alpha', start=0.1, stop=0.9, length=5) * cirq.Linspace(key='beta', start=0.1, stop=0.9, length=5) * cirq.Linspace(key='gamma', start=0.1, stop=0.9, length=5) ) results = simulator.run_sweep(circuit, params=sweep, repetitions=100) for result in results: print(result.params.param_dict, obj_func(result)) OrderedDict([('alpha', 0.1), ('beta', 0.1), ('gamma', 0.1)]) 0.44 OrderedDict([('alpha', 0.1), ('beta', 0.1), ('gamma', 0.30000000000000004)]) 0.26 OrderedDict([('alpha', 0.1), ('beta', 0.1), ('gamma', 0.5)]) 0.62 OrderedDict([('alpha', 0.1), ('beta', 0.1), ('gamma', 0.7000000000000001)]) 0.48 OrderedDict([('alpha', 0.1), ('beta', 0.1), ('gamma', 0.9)]) 0.06 OrderedDict([('alpha', 0.1), ('beta', 0.30000000000000004), ('gamma', 0.1)]) 1.72 OrderedDict([('alpha', 0.1), ('beta', 0.30000000000000004), ('gamma', 0.30000000000000004)]) 0.58 OrderedDict([('alpha', 0.1), ('beta', 0.30000000000000004), ('gamma', 0.5)]) 1.0 OrderedDict([('alpha', 0.1), ('beta', 0.30000000000000004), ('gamma', 0.7000000000000001)]) 1.1 OrderedDict([('alpha', 0.1), ('beta', 0.30000000000000004), ('gamma', 0.9)]) 0.22 OrderedDict([('alpha', 0.1), ('beta', 0.5), ('gamma', 0.1)]) 1.38 OrderedDict([('alpha', 0.1), ('beta', 0.5), ('gamma', 0.30000000000000004)]) 1.56 OrderedDict([('alpha', 0.1), ('beta', 0.5), ('gamma', 0.5)]) 0.66 OrderedDict([('alpha', 0.1), ('beta', 0.5), ('gamma', 0.7000000000000001)]) 0.64 OrderedDict([('alpha', 0.1), ('beta', 0.5), ('gamma', 0.9)]) -0.2 OrderedDict([('alpha', 0.1), ('beta', 0.7000000000000001), ('gamma', 0.1)]) 0.9 OrderedDict([('alpha', 0.1), ('beta', 0.7000000000000001), ('gamma', 0.30000000000000004)]) 1.14 OrderedDict([('alpha', 0.1), ('beta', 0.7000000000000001), ('gamma', 0.5)]) 1.06 OrderedDict([('alpha', 0.1), ('beta', 0.7000000000000001), ('gamma', 0.7000000000000001)]) 0.46 OrderedDict([('alpha', 0.1), ('beta', 0.7000000000000001), ('gamma', 0.9)]) -0.02 OrderedDict([('alpha', 0.1), ('beta', 0.9), ('gamma', 0.1)]) 1.22 OrderedDict([('alpha', 0.1), ('beta', 0.9), ('gamma', 0.30000000000000004)]) 0.62 OrderedDict([('alpha', 0.1), ('beta', 0.9), ('gamma', 0.5)]) -0.18 OrderedDict([('alpha', 0.1), ('beta', 0.9), ('gamma', 0.7000000000000001)]) 0.76 OrderedDict([('alpha', 0.1), ('beta', 0.9), ('gamma', 0.9)]) 0.58 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.1), ('gamma', 0.1)]) 1.32 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.1), ('gamma', 0.30000000000000004)]) 0.74 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.1), ('gamma', 0.5)]) 0.8 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.1), ('gamma', 0.7000000000000001)]) -0.26 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.1), ('gamma', 0.9)]) -0.6 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.30000000000000004), ('gamma', 0.1)]) 2.54 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.30000000000000004), ('gamma', 0.30000000000000004)]) 3.56 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.30000000000000004), ('gamma', 0.5)]) 1.46 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.30000000000000004), ('gamma', 0.7000000000000001)]) 0.96 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.30000000000000004), ('gamma', 0.9)]) 0.58 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.5), ('gamma', 0.1)]) 3.1 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.5), ('gamma', 0.30000000000000004)]) 3.36 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.5), ('gamma', 0.5)]) 1.82 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.5), ('gamma', 0.7000000000000001)]) 0.04 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.5), ('gamma', 0.9)]) 0.48 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.7000000000000001), ('gamma', 0.1)]) 2.62 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.7000000000000001), ('gamma', 0.30000000000000004)]) 2.12 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.7000000000000001), ('gamma', 0.5)]) 0.84 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.7000000000000001), ('gamma', 0.7000000000000001)]) 0.66 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.7000000000000001), ('gamma', 0.9)]) 0.72 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.9), ('gamma', 0.1)]) 0.8 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.9), ('gamma', 0.30000000000000004)]) 0.76 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.9), ('gamma', 0.5)]) 0.34 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.9), ('gamma', 0.7000000000000001)]) 0.34 OrderedDict([('alpha', 0.30000000000000004), ('beta', 0.9), ('gamma', 0.9)]) 0.06 OrderedDict([('alpha', 0.5), ('beta', 0.1), ('gamma', 0.1)]) 2.32 OrderedDict([('alpha', 0.5), ('beta', 0.1), ('gamma', 0.30000000000000004)]) 1.7 OrderedDict([('alpha', 0.5), ('beta', 0.1), ('gamma', 0.5)]) 0.76 OrderedDict([('alpha', 0.5), ('beta', 0.1), ('gamma', 0.7000000000000001)]) -0.16 OrderedDict([('alpha', 0.5), ('beta', 0.1), ('gamma', 0.9)]) 0.74 OrderedDict([('alpha', 0.5), ('beta', 0.30000000000000004), ('gamma', 0.1)]) 4.24 OrderedDict([('alpha', 0.5), ('beta', 0.30000000000000004), ('gamma', 0.30000000000000004)]) 3.56 OrderedDict([('alpha', 0.5), ('beta', 0.30000000000000004), ('gamma', 0.5)]) 2.04 OrderedDict([('alpha', 0.5), ('beta', 0.30000000000000004), ('gamma', 0.7000000000000001)]) -0.36 OrderedDict([('alpha', 0.5), ('beta', 0.30000000000000004), ('gamma', 0.9)]) -0.42 OrderedDict([('alpha', 0.5), ('beta', 0.5), ('gamma', 0.1)]) 4.74 OrderedDict([('alpha', 0.5), ('beta', 0.5), ('gamma', 0.30000000000000004)]) 3.24 OrderedDict([('alpha', 0.5), ('beta', 0.5), ('gamma', 0.5)]) 0.84 OrderedDict([('alpha', 0.5), ('beta', 0.5), ('gamma', 0.7000000000000001)]) -0.44 OrderedDict([('alpha', 0.5), ('beta', 0.5), ('gamma', 0.9)]) -0.34 OrderedDict([('alpha', 0.5), ('beta', 0.7000000000000001), ('gamma', 0.1)]) 2.54 OrderedDict([('alpha', 0.5), ('beta', 0.7000000000000001), ('gamma', 0.30000000000000004)]) 1.56 OrderedDict([('alpha', 0.5), ('beta', 0.7000000000000001), ('gamma', 0.5)]) 0.68 OrderedDict([('alpha', 0.5), ('beta', 0.7000000000000001), ('gamma', 0.7000000000000001)]) 0.46 OrderedDict([('alpha', 0.5), ('beta', 0.7000000000000001), ('gamma', 0.9)]) 1.06 OrderedDict([('alpha', 0.5), ('beta', 0.9), ('gamma', 0.1)]) 1.18 OrderedDict([('alpha', 0.5), ('beta', 0.9), ('gamma', 0.30000000000000004)]) 0.36 OrderedDict([('alpha', 0.5), ('beta', 0.9), ('gamma', 0.5)]) 0.46 OrderedDict([('alpha', 0.5), ('beta', 0.9), ('gamma', 0.7000000000000001)]) -0.5 OrderedDict([('alpha', 0.5), ('beta', 0.9), ('gamma', 0.9)]) -0.14 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.1), ('gamma', 0.1)]) 1.64 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.1), ('gamma', 0.30000000000000004)]) 1.82 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.1), ('gamma', 0.5)]) -0.1 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.1), ('gamma', 0.7000000000000001)]) -0.64 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.1), ('gamma', 0.9)]) 0.14 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.30000000000000004), ('gamma', 0.1)]) 3.76 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.30000000000000004), ('gamma', 0.30000000000000004)]) 1.36 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.30000000000000004), ('gamma', 0.5)]) -0.36 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.30000000000000004), ('gamma', 0.7000000000000001)]) -0.6 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.30000000000000004), ('gamma', 0.9)]) -0.08 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.5), ('gamma', 0.1)]) 4.02 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.5), ('gamma', 0.30000000000000004)]) 1.48 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.5), ('gamma', 0.5)]) -0.1 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.5), ('gamma', 0.7000000000000001)]) -1.36 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.5), ('gamma', 0.9)]) -1.1 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.7000000000000001), ('gamma', 0.1)]) 2.56 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.7000000000000001), ('gamma', 0.30000000000000004)]) 0.94 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.7000000000000001), ('gamma', 0.5)]) 0.02 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.7000000000000001), ('gamma', 0.7000000000000001)]) -0.22 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.7000000000000001), ('gamma', 0.9)]) -1.08 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.9), ('gamma', 0.1)]) 1.56 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.9), ('gamma', 0.30000000000000004)]) 0.78 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.9), ('gamma', 0.5)]) -0.2 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.9), ('gamma', 0.7000000000000001)]) 0.04 OrderedDict([('alpha', 0.7000000000000001), ('beta', 0.9), ('gamma', 0.9)]) -0.9 OrderedDict([('alpha', 0.9), ('beta', 0.1), ('gamma', 0.1)]) -0.54 OrderedDict([('alpha', 0.9), ('beta', 0.1), ('gamma', 0.30000000000000004)]) 0.2 OrderedDict([('alpha', 0.9), ('beta', 0.1), ('gamma', 0.5)]) -0.82 OrderedDict([('alpha', 0.9), ('beta', 0.1), ('gamma', 0.7000000000000001)]) 0.42 OrderedDict([('alpha', 0.9), ('beta', 0.1), ('gamma', 0.9)]) -0.62 OrderedDict([('alpha', 0.9), ('beta', 0.30000000000000004), ('gamma', 0.1)]) 1.1 OrderedDict([('alpha', 0.9), ('beta', 0.30000000000000004), ('gamma', 0.30000000000000004)]) 0.86 OrderedDict([('alpha', 0.9), ('beta', 0.30000000000000004), ('gamma', 0.5)]) 0.22 OrderedDict([('alpha', 0.9), ('beta', 0.30000000000000004), ('gamma', 0.7000000000000001)]) -0.46 OrderedDict([('alpha', 0.9), ('beta', 0.30000000000000004), ('gamma', 0.9)]) -0.38 OrderedDict([('alpha', 0.9), ('beta', 0.5), ('gamma', 0.1)]) 1.5 OrderedDict([('alpha', 0.9), ('beta', 0.5), ('gamma', 0.30000000000000004)]) 0.58 OrderedDict([('alpha', 0.9), ('beta', 0.5), ('gamma', 0.5)]) -1.3 OrderedDict([('alpha', 0.9), ('beta', 0.5), ('gamma', 0.7000000000000001)]) 0.3 OrderedDict([('alpha', 0.9), ('beta', 0.5), ('gamma', 0.9)]) 0.22 OrderedDict([('alpha', 0.9), ('beta', 0.7000000000000001), ('gamma', 0.1)]) 1.12 OrderedDict([('alpha', 0.9), ('beta', 0.7000000000000001), ('gamma', 0.30000000000000004)]) 0.08 OrderedDict([('alpha', 0.9), ('beta', 0.7000000000000001), ('gamma', 0.5)]) -0.14 OrderedDict([('alpha', 0.9), ('beta', 0.7000000000000001), ('gamma', 0.7000000000000001)]) -0.14 OrderedDict([('alpha', 0.9), ('beta', 0.7000000000000001), ('gamma', 0.9)]) 0.2 OrderedDict([('alpha', 0.9), ('beta', 0.9), ('gamma', 0.1)]) 0.36 OrderedDict([('alpha', 0.9), ('beta', 0.9), ('gamma', 0.30000000000000004)]) 0.18 OrderedDict([('alpha', 0.9), ('beta', 0.9), ('gamma', 0.5)]) -1.44 OrderedDict([('alpha', 0.9), ('beta', 0.9), ('gamma', 0.7000000000000001)]) 0.3 OrderedDict([('alpha', 0.9), ('beta', 0.9), ('gamma', 0.9)]) -0.5 Finding the Minimum Now we have all the code, we do a simple grid search over values to find a minimal value. Grid search is not the best optimization algorithm, but is here simply illustrative. sweep_size = 10 sweep = ( cirq.Linspace(key='alpha', start=0.0, stop=1.0, length=sweep_size) * cirq.Linspace(key='beta', start=0.0, stop=1.0, length=sweep_size) * cirq.Linspace(key='gamma', start=0.0, stop=1.0, length=sweep_size) ) results = simulator.run_sweep(circuit, params=sweep, repetitions=100) min = None min_params = None for result in results: value = obj_func(result) if min is None or value < min: min = value min_params = result.params print(f'Minimum objective value is {min}.') Minimum objective value is -2.22. We've created a simple variational quantum algorithm using Cirq. Where to go next? Perhaps you can play around with the above code and work on analyzing the algorithms performance. Add new parameterized circuits and build an end to end program for analyzing these circuits. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-05-30 UTC.",
    "url": "https://quantumai.google/cirq/experiments/variational_algorithm",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 3875,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:10.459478"
  },
  {
    "id": "cirq_-4827823179467089653_0",
    "title": "QAOA \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments QAOA Combinatorial optimization problems can be solved with the quantum approximate optimization algorithm (QAOA; also known as \"quantum alternating operator ansatz\"). We demonstrated the application of the Google Sycamore superconducting qubit quantum processor to combinatorial optimization problems with the QAOA arxiv:2004.04197. Like past QAOA experiments, we studied performance for problems defined on the (planar) connectivity graph of our hardware; however, we also applied the QAOA to the Sherrington-Kirkpatrick model and MaxCut, both high dimensional graph problems for which the QAOA requires significant compilation. This module contains the code to generate QAOA circuits, execute demonstrations, and analyze the results. Please read on to learn about: Example problems Tasks and compilation Analysis See the left navigation for more information about the QAOA experiment and how to run it end-to-end. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qaoa",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 183,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:14.413356"
  },
  {
    "id": "cirq_5893619952169804064_0",
    "title": "Hardware grid circuits \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Hardware grid circuits View on QuantumAI Run in Google Colab View source on GitHub Download notebook The \"hardware grid\" problem is defined by a Hamiltonian whose topology matches the hardware graph natively. This permits a simple compilation (\"routing\") with circuit depth per p-step going like \\(O(1)\\). Setup Install the ReCirq package: try: import recirq except ImportError: !pip install git+https://github.com/quantumlib/ReCirq Now import Cirq, ReCirq and the module dependencies: import cirq import recirq import networkx as nx import numpy as np from cirq.contrib.svg import SVGCircuit, circuit_to_svg from recirq.qaoa.classical_angle_optimization import OptimizationResult from recirq.qaoa.problems import get_all_hardware_grid_problems Set the theme colors: QBLUE = '#1967d2' QRED = '#ea4335ff' QGOLD = '#fbbc05ff' Create a grid Here, we'll generate a 3x3 grid with arbitrarily chosen (fake!) beta, gamma parameters. fake_device_graph = nx.grid_2d_graph(3, 3) fake_device_graph = nx.relabel_nodes( fake_device_graph, mapping={(r, c): cirq.GridQubit(r, c) for r, c in fake_device_graph.nodes}) problems = get_all_hardware_grid_problems(fake_device_graph, central_qubit=cirq.GridQubit(1, 1), n_instances=10, rs=np.random.RandomState(52)) n_qubits = 9 instance_i = 0 problem = problems[n_qubits, instance_i] optimum = OptimizationResult(p=1, f_val=None, gammas=[0.123], betas=[0.456], min_c=None, max_c=None) nx.draw_networkx(problem.graph, pos={i: problem.coordinates[i] for i in range(problem.graph.number_of_nodes())}, node_color=QBLUE) If, however, you've been following along, we can load in the results of HardwareGridProblemGenerationTasks for which we've actually pre-computed the optimal angles. TODO: enable. from recirq.qaoa.experiments.problem_generation_tasks import HardwareGridProblemGenerationTask from recirq.qaoa.experiments.angle_precomputation_tasks import AnglePrecomputationTask gen_task = HardwareGridProblemGenerationTask( dataset_id = '2020-03-19', device_name = 'Sycamore23', instance_i = 0, n_qubits = 5, ) pre_task = AnglePrecomputationTask( dataset_id = '2020-03-23', generation_task = gen_task, p = 1, ) print(gen_task) print(pre_task) from recirq.qaoa.experiments.problem_generation_tasks import DEFAULT_BASE_DIR as PGEN_BASE_DIR from recirq.qaoa.experiments.angle_precomputation_tasks import DEFAULT_BASE_DIR as APRE_BASE_DIR gen_data = recirq.load(gen_task, base_dir=PGEN_BASE_DIR) pre_data = recirq.load(pre_task, base_dir=APRE_BASE_DIR) problem = gen_data['problem'] optimum = pre_data['optimum'] print(optimum) nx.draw_networkx(problem.graph, pos={i: problem.coordinates[i] for i in range(problem.graph.number_of_nodes())}, node_color=QBLUE ) Ansatz As always, the circuit ansatz involves \\(|+\\rangle\\) initialization followed by alternating applications of the problem and driver unitaries. We first construct a highly abstracted circuit with these multi-qubit operations. from recirq.qaoa.gates_and_compilation import ProblemUnitary, DriverUnitary qubits = cirq.LineQubit.range(problem.graph.number_of_nodes()) circuit = cirq.Circuit( cirq.H.on_each(qubits), ProblemUnitary(problem.graph, gamma=optimum.gammas[0]).on(*qubits), DriverUnitary(len(qubits), beta=optimum.betas[0]).on(*qubits) ) SVGCircuit(circuit) Hardware topology We can enact the problem unitary with four entangling layers per p-step. Horizontal links from even columns Horizontal links from odd columns Vertical links from even rows Vertical links from odd rows To help the algorithm, we must specify coordinates to the compilation routine. This maps from bit indices \\(\\in \\{0, 1, \\dots n\\}\\) to (row, column) coordinates so the compilation routine can categorize the various links into the above four categories. This is a little roundabout since we'll be mapping to GridQubits, but I'm trying to emphasize the distinction between the problem (which is not related to quantum computing) and the implementation (which is). As always, the driver unitary is nothing more than single-qubit X rotations. from recirq.qaoa.gates_and_compilation import compile_problem_unitary_to_hardware_graph, \\ compile_driver_unitary_to_rx circuit = compile_problem_unitary_to_hardware_graph(circuit, problem.coordinates) circuit = compile_driver_unitary_to_rx(circuit) SVGCircuit(circuit) Compilation To compile \\(e^{i \\gamma w_{ij} Z_i Z_j}\\), express the ZZ interaction as three rounds of SYC gates. We take a brief aside to look at this compilation. import numpy as np zz = cirq.Circuit(cirq.ZZ(*qubits[:2])**(2*0.345/np.pi)) SVGCircuit(zz) from recirq.qaoa.gates_and_compilation import compile_to_syc zz = compile_to_syc(zz) SVGCircuit(zz) Function zz_as_syc is included for convenience from recirq.qaoa.gates_and_compilation import zz_as_syc zz = zz_as_syc(0.345, *qubits[:2]) SVGCircuit(zz) cirq.testing.assert_allclose_up_to_global_phase( cirq.Circuit(cirq.ZZ(*qubits[:2])**(2*0.345/np.pi)).unitary(), zz_as_syc(0.345, *qubits[:2]).unitary(), atol=1e-8 ) cirq.testing.assert_allclose_up_to_global_phase( compile_to_syc(cirq.Circuit(cirq.ZZ(*qubits[:2])**(2*0.345/np.pi))).unitary(), zz_as_syc(0.345, *qubits[:2]).unitary(), atol=1e-8 ) Structure the gates Make sure all the gates are well-structured. This means each layer is composed of homogeneous operations which are native to the device. from recirq.qaoa.circuit_structure import validate_well_structured _, stats = validate_well_structured(zz) stats HomogeneousCircuitStats(num_phx=3, num_z=3, num_syc=2, has_permutation=False, has_measurement=False) Compiling to native operations We use the above compilation of ZZ to compile our circuit to native operations. Because our compilation produces well-structured gates and our starting circuit was structured, the resulting circuit is well-structured. from recirq.qaoa.gates_and_compilation import compile_to_syc circuit = compile_to_syc(circuit) SVGCircuit(circuit) _, stats = validate_well_structured(circuit) stats HomogeneousCircuitStats(num_phx=9, num_z=9, num_syc=8, has_permutation=False, has_measurement=False) Append measurement mcircuit = circuit + cirq.measure(*qubits, key='z') SVGCircuit(mcircuit) _, stats = validate_well_structured(mcircuit) stats HomogeneousCircuitStats(num_phx=9, num_z=9, num_syc=8, has_permutation=False, has_measurement=True) Compile out Z's Z gates commute through SYC so we can remove them. This step is not necessary: the quantum operating system will track the virtual Zs if we don't remove them. from recirq.qaoa.gates_and_compilation import compile_out_virtual_z mcircuit = compile_out_virtual_z(mcircuit) SVGCircuit(mcircuit) Compile out negligible gates We've left several PhX^0 to keep our circuits structured. As the very last compilation step, we can drop these. from recirq.qaoa.gates_and_compilation import compile_to_non_negligible mcircuit = compile_to_non_negligible(mcircuit) SVGCircuit(mcircuit) _, stats = validate_well_structured(mcircuit) stats HomogeneousCircuitStats(num_phx=9, num_z=0, num_syc=8, has_permutation=False, has_measurement=True) Place on device Our problem has integer nodes because it should be specified independently of a quantum implementation Our circuit has LineQubit qubits to emphasize the fact that we can place this circuit in multiple locations on a device Our coordinates list was used only as a helper for the compilation We now place the compiled circuit onto a compatible part of the device. Here, we use networkx's subgraph isomorphism routine to find all the possibilities. from cirq.contrib.routing import gridqubits_to_graph_device device_graph = gridqubits_to_graph_device(recirq.get_device_obj_by_name('Sycamore23').metadata.qubit_set) nx.draw_networkx(device_graph, pos={q: (q.row, q.col) for q in device_graph.nodes}, node_color=QRED) from matplotlib import pyplot as plt device_graph = gridqubits_to_graph_device(recirq.get_device_obj_by_name('Sycamore23').metadata.qubit_set) matcher = nx.algorithms.isomorphism.GraphMatcher(device_graph, problem.graph) # There's a \"rotational\" freedom which we remove here: each_set_of_qubits_only_one_subgraph = {} for q_to_i in matcher.subgraph_isomorphisms_iter(): each_set_of_qubits_only_one_subgraph[frozenset(q_to_i.keys())] = q_to_i for q_to_i in each_set_of_qubits_only_one_subgraph.values(): nx.draw_networkx(device_graph, pos={q: (q.row, q.col) for q in device_graph.nodes}, node_color=[QRED if q in q_to_i else QBLUE for q in device_graph.nodes]) plt.show() i_to_q = {i: q for q, i in q_to_i.items()} # Since our nodes are contiguous integers starting from 0, we can flatten into a list device_qubits = [i_to_q[i] for i in range(len(i_to_q))] del i_to_q def _mapq(q): return device_qubits[q.x] mcircuit = mcircuit.transform_qubits(_mapq) SVGCircuit(mcircuit) Problem circuit functions from recirq.qaoa.problem_circuits import get_generic_qaoa_circuit circuit = get_generic_qaoa_circuit( problem_graph=problem.graph, qubits=qubits, gammas=[0.123], betas=[0.456], ) SVGCircuit(circuit) from recirq.qaoa.problem_circuits import get_routed_hardware_grid_circuit circuit = get_routed_hardware_grid_circuit( problem_graph=problem.graph, qubits=qubits, coordinates=problem.coordinates, gammas=[0.123], betas=[0.456], ) SVGCircuit(circuit) from recirq.qaoa.problem_circuits import get_compiled_hardware_grid_circuit circuit, qubits = get_compiled_hardware_grid_circuit( problem=problem, qubits=device_qubits, gammas=[0.123], betas=[0.456], ) SVGCircuit(circuit) Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-10-18 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qaoa/hardware_grid_circuits",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 1004,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:25.831818"
  },
  {
    "id": "cirq_-2619830311201341917_0",
    "title": "Quickstart \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Quickstart This code tutorial shows how to estimate a 1-RDM and perform variational optimization View on QuantumAI Run in Google Colab View source on GitHub Download notebook try: import recirq except ImportError: !pip install --quiet git+https://github.com/quantumlib/ReCirq import numpy as np import cirq from recirq.hfvqe.gradient_hf import rhf_func_generator from recirq.hfvqe.opdm_functionals import OpdmFunctional from recirq.hfvqe.analysis import ( compute_opdm, mcweeny_purification, resample_opdm, fidelity_witness, fidelity) from recirq.hfvqe.third_party.higham import fixed_trace_positive_projection from recirq.hfvqe.molecular_example import make_h6_1_3 Set up the experiment Generate the input files, set up quantum resources, and set up the OpdmFunctional to make measurements. rhf_objective, molecule, parameters, obi, tbi = make_h6_1_3() ansatz, energy, gradient = rhf_func_generator(rhf_objective) # settings for quantum resources qubits = [cirq.GridQubit(0, x) for x in range(molecule.n_orbitals)] sampler = cirq.Simulator(dtype=np.complex128) # this can be a QuantumEngine # OpdmFunctional contains an interface for running experiments opdm_func = OpdmFunctional(qubits=qubits, sampler=sampler, constant=molecule.nuclear_repulsion, one_body_integrals=obi, two_body_integrals=tbi, # only simulate spin-up electrons: num_electrons=molecule.n_electrons // 2, clean_xxyy=True, purification=True ) Optimization terminated successfully. Current function value: -2.924060 Iterations: 7 Function evaluations: 15 Gradient evaluations: 15 The displayed text is the output of the gradient based restricted Hartree-Fock. We define the gradient in rhf_objective and use the conjugate-gradient optimizer to optimize the basis rotation parameters. This is equivalent to doing Hartree-Fock theory from the canonical transformation perspective. Estimate Quantities Next, we will do the following: Do measurements for a given set of parameters Compute 1-RDM, variances, and purification Compute energy, fidelities, and errorbars # 1. # default to 250_000 shots for each circuit. # 7 circuits total, printed for your viewing pleasure # return value is a dictionary with circuit results for each permutation measurement_data = opdm_func.calculate_data(parameters) # 2. opdm, var_dict = compute_opdm(measurement_data, return_variance=True) opdm_pure = mcweeny_purification(opdm) # 3. raw_energies = [] raw_fidelity_witness = [] purified_eneriges = [] purified_fidelity_witness = [] purified_fidelity = [] true_unitary = ansatz(parameters) nocc = molecule.n_electrons // 2 nvirt = molecule.n_orbitals - nocc initial_fock_state = [1] * nocc + [0] * nvirt # 1000 repetitions of the measurement for _ in range(1000): new_opdm = resample_opdm(opdm, var_dict) raw_energies.append(opdm_func.energy_from_opdm(new_opdm)) raw_fidelity_witness.append( fidelity_witness(target_unitary=true_unitary, omega=initial_fock_state, measured_opdm=new_opdm) ) # fix positivity and trace of sampled 1-RDM if strictly outside # feasible set w, v = np.linalg.eigh(new_opdm) if len(np.where(w < 0)[0]) > 0: new_opdm = fixed_trace_positive_projection(new_opdm, nocc) new_opdm_pure = mcweeny_purification(new_opdm) purified_eneriges.append(opdm_func.energy_from_opdm(new_opdm_pure)) purified_fidelity_witness.append( fidelity_witness(target_unitary=true_unitary, omega=initial_fock_state, measured_opdm=new_opdm_pure) ) purified_fidelity.append( fidelity(target_unitary=true_unitary, measured_opdm=new_opdm_pure) ) print(\"Canonical Hartree-Fock energy \", molecule.hf_energy) print(\"True energy \", energy(parameters)) print(\"Raw energy \", opdm_func.energy_from_opdm(opdm), \"+- \", np.std(raw_energies)) print(\"Raw fidelity witness \", np.mean(raw_fidelity_witness).real, \"+- \", np.std(raw_fidelity_witness)) print(\"purified energy \", opdm_func.energy_from_opdm(opdm_pure), \"+- \", np.std(purified_eneriges)) print(\"Purified fidelity witness \", np.mean(purified_fidelity_witness).real, \"+- \", np.std(purified_fidelity_witness)) print(\"Purified fidelity \", np.mean(purified_fidelity).real, \"+- \", np.std(purified_fidelity)) /tmpfs/tmp/ipykernel_8722/2348574811.py:8: DeprecationWarning: `alltrue` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `all` instead. opdm, var_dict = compute_opdm(measurement_data, return_variance=True) /tmpfs/tmp/ipykernel_8722/2348574811.py:8: DeprecationWarning: `alltrue` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `all` instead. opdm, var_dict = compute_opdm(measurement_data, return_variance=True) /tmpfs/tmp/ipykernel_8722/2348574811.py:8: DeprecationWarning: `alltrue` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `all` instead. opdm, var_dict = compute_opdm(measurement_data, return_variance=True) /tmpfs/tmp/ipykernel_8722/2348574811.py:8: DeprecationWarning: `alltrue` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `all` instead. opdm, var_dict = compute_opdm(measurement_data, return_variance=True) /tmpfs/tmp/ipykernel_8722/2348574811.py:8: DeprecationWarning: `alltrue` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `all` instead. opdm, var_dict = compute_opdm(measurement_data, return_variance=True) /tmpfs/tmp/ipykernel_8722/2348574811.py:8: DeprecationWarning: `alltrue` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `all` instead. opdm, var_dict = compute_opdm(measurement_data, return_variance=True) Canonical Hartree-Fock energy -2.9240604849733085 True energy -2.924060484972228 Raw energy -2.9213044931760517 +- 0.0015177972177468448 Raw fidelity witness 0.997033277160794 +- 0.0020815856454034325 purified energy -2.9240559215724597 +- 5.5249068450963004e-06 Purified fidelity witness 0.999978892040198 +- 8.959420956931912e-06 Purified fidelity 0.999989446541326 +- 4.479680869499371e-06 This prints out the various energies estimated from the 1-RDM along with error bars. Generated from resampling the 1-RDM based on the estimated covariance. Optimization We use the sampling functionality to variationally relax the parameters of my ansatz such that the energy is decreased. For this we will need the augmented Hessian optimizer The optimizerer code we have takes: rhf_objective object, initial parameters, a function that takes a n x n unitary and returns an opdm maximum iterations, hassian_update which indicates how much of the hessian to use rtol which is the gradient stopping condition. A natural thing that we will want to save is the variance dictionary of the non-purified 1-RDM. This is accomplished by wrapping the 1-RDM estimation code in another object that keeps track of the variance dictionaries. from recirq.hfvqe.mfopt import moving_frame_augmented_hessian_optimizer from recirq.hfvqe.opdm_functionals import RDMGenerator rdm_generator = RDMGenerator(opdm_func, purification=True) opdm_generator = rdm_generator.opdm_generator result = moving_frame_augmented_hessian_optimizer( rhf_objective=rhf_objective, initial_parameters=parameters + 1.0E-1, opdm_aa_measurement_func=opdm_generator, verbose=True, delta=0.03, max_iter=20, hessian_update='diagonal', rtol=0.50E-2) ITERATION NUMBER : 0 unitary [[1. 0. 0. 0. 0. 0.] [0. 1. 0. 0. 0. 0.] [0. 0. 1. 0. 0. 0.] [0. 0. 0. 1. 0. 0.] [0. 0. 0. 0. 1. 0.] [0. 0. 0. 0. 0. 1.]] Current Energy: -2.826944816125242 true energy -2.826271292768161 dvec [((0.1299870221271307+0j), -1.0 [0^ 6] + -1.0 [1^ 7] + 1.0 [6^ 0] + 1.0 [7^ 1]), ((0.14785875594365422+0j), -1.0 [2^ 6] + -1.0 [3^ 7] + 1.0 [6^ 2] + 1.0 [7^ 3]), ((0.10661179110340353+0j), -1.0 [4^ 6] + -1.0 [5^ 7] + 1.0 [6^ 4] + 1.0 [7^ 5]), ((0.3291181404785592+0j), -1.0 [0^ 8] + -1.0 [1^ 9] + 1.0 [8^ 0] + 1.0 [9^ 1]), ((0.14195780888672413+0j), -1.0 [2^ 8] + -1.0 [3^ 9] + 1.0 [8^ 2] + 1.0 [9^ 3]), ((0.26123255023886893+0j), -1.0 [4^ 8] + -1.0 [5^ 9] + 1.0 [8^ 4] + 1.0 [9^ 5]), ((0.2049363275749181+0j), -1.0 [0^ 10] + -1.0 [1^ 11] + 1.0 [10^ 0] + 1.0 [11^ 1]), ((0.21880083571875025+0j), -1.0 [2^ 10] + -1.0 [3^ 11] + 1.0 [10^ 2] + 1.0 [11^ 3]), ((0.23952163627369352+0j), -1.0 [4^ 10] + -1.0 [5^ 11] + 1.0 [10^ 4] + 1.0 [11^ 5])] New fr values norm 0.05253760808447634 ITERATION NUMBER : 1 unitary [[ 0.98389642 0.01872322 -0.03839118 -0.09592923 -0.10702297 -0.09729877] [ 0.01872322 0.92317564 -0.00126495 0.34627269 -0.09792622 0.13379184] [-0.03839118 -0.00126495 0.85968895 -0.09412702 -0.4916874 -0.09403736] [ 0.09592923 -0.34627269 0.09412702 0.92774284 -0.01313115 -0.03396633] [ 0.10702297 0.09792622 0.4916874 -0.01313115 0.85816974 -0.02392281] [ 0.09729877 -0.13379184 0.09403736 -0.03396633 -0.02392281 0.98084844]] Current Energy: -2.856222940083195 true energy -2.8559010881780926 dvec [((0.12488407592470022+0j), -1.0 [0^ 6] + -1.0 [1^ 7] + 1.0 [6^ 0] + 1.0 [7^ 1]), ((0.13514380712847476+0j), -1.0 [2^ 6] + -1.0 [3^ 7] + 1.0 [6^ 2] + 1.0 [7^ 3]), ((0.0928458882062743+0j), -1.0 [4^ 6] + -1.0 [5^ 7] + 1.0 [6^ 4] + 1.0 [7^ 5]), ((0.25154696956895983+0j), -1.0 [0^ 8] + -1.0 [1^ 9] + 1.0 [8^ 0] + 1.0 [9^ 1]), ((0.12835758815319542+0j), -1.0 [2^ 8] + -1.0 [3^ 9] + 1.0 [8^ 2] + 1.0 [9^ 3]), ((0.19546294860716798+0j), -1.0 [4^ 8] + -1.0 [5^ 9] + 1.0 [8^ 4] + 1.0 [9^ 5]), ((0.17380260578353235+0j), -1.0 [0^ 10] + -1.0 [1^ 11] + 1.0 [10^ 0] + 1.0 [11^ 1]), ((0.18455779836519476+0j), -1.0 [2^ 10] + -1.0 [3^ 11] + 1.0 [10^ 2] + 1.0 [11^ 3]), ((0.18496326996440982+0j), -1.0 [4^ 10] + -1.0 [5^ 11] + 1.0 [10^ 4] + 1.0 [11^ 5])] New fr values norm 0.05629823462148727 ITERATION NUMBER : 2 unitary [[ 0.98880318 0.01613381 -0.02186015 -0.08789021 -0.08139252 -0.08473884] [ 0.02247946 0.91785167 0.00758451 0.35712186 -0.0867756 0.14805214] [-0.03343422 -0.00691063 0.87259735 -0.08269081 -0.47423973 -0.07528062] [ 0.08665783 -0.35787127 0.0827736 0.92542384 -0.00460151 -0.03371423] [ 0.07789632 0.08521881 0.4746078 -0.01322966 0.87223159 -0.02131639] [ 0.08406949 -0.14800734 0.07703534 -0.03629333 -0.01152461 0.98165253]] Current Energy: -2.8809521867113626 true energy -2.8808066255875593 dvec [((0.12277840454655436+0j), -1.0 [0^ 6] + -1.0 [1^ 7] + 1.0 [6^ 0] + 1.0 [7^ 1]), ((0.11261923813504812+0j), -1.0 [2^ 6] + -1.0 [3^ 7] + 1.0 [6^ 2] + 1.0 [7^ 3]), ((0.07029691288548916+0j), -1.0 [4^ 6] + -1.0 [5^ 7] + 1.0 [6^ 4] + 1.0 [7^ 5]), ((0.16299967970151746+0j), -1.0 [0^ 8] + -1.0 [1^ 9] + 1.0 [8^ 0] + 1.0 [9^ 1]), ((0.11133776730769589+0j), -1.0 [2^ 8] + -1.0 [3^ 9] + 1.0 [8^ 2] + 1.0 [9^ 3]), ((0.1267692491358285+0j), -1.0 [4^ 8] + -1.0 [5^ 9] + 1.0 [8^ 4] + 1.0 [9^ 5]), ((0.13688735744277908+0j), -1.0 [0^ 10] + -1.0 [1^ 11] + 1.0 [10^ 0] + 1.0 [11^ 1]), ((0.15293025487822626+0j), -1.0 [2^ 10] + -1.0 [3^ 11] + 1.0 [10^ 2] + 1.0 [11^ 3]), ((0.1409990538949392+0j), -1.0 [4^ 10] + -1.0 [5^ 11] + 1.0 [10^ 4] + 1.0 [11^ 5])] New fr values norm 0.06674752088983352 ITERATION NUMBER : 3 unitary [[ 9.92897134e-01 1.14708767e-02 -5.87132795e-03 -7.73607512e-02 -5.51144722e-02 -7.04765060e-02] [ 2.60723325e-02 9.10785024e-01 1.75064563e-02 3.70478768e-01 -7.25889396e-02 1.64197217e-01] [-2.93383420e-02 -1.42441206e-02 8.84573501e-01 -6.92757090e-02 -4.56626961e-01 -5.62030492e-02] [ 7.43882045e-02 -3.71979072e-01 6.89839555e-02 9.22036930e-01 4.77509757e-03 -3.41215130e-02] [ 4.84030407e-02 7.01558609e-02 4.57095462e-01 -1.51310369e-02 8.84964453e-01 -2.01991868e-02] [ 6.88354423e-02 -1.63847153e-01 5.91077422e-02 -3.97570692e-02 4.17009561e-04 9.81499500e-01]] Current Energy: -2.9018341899705713 true energy -2.901989720679283 dvec [((0.10823962290260936+0j), -1.0 [0^ 6] + -1.0 [1^ 7] + 1.0 [6^ 0] + 1.0 [7^ 1]), ((0.07877886595937186+0j), -1.0 [2^ 6] + -1.0 [3^ 7] + 1.0 [6^ 2] + 1.0 [7^ 3]), ((0.052326697973545604+0j), -1.0 [4^ 6] + -1.0 [5^ 7] + 1.0 [6^ 4] + 1.0 [7^ 5]), ((0.07155652133150209+0j), -1.0 [0^ 8] + -1.0 [1^ 9] + 1.0 [8^ 0] + 1.0 [9^ 1]), ((0.08810064764737702+0j), -1.0 [2^ 8] + -1.0 [3^ 9] + 1.0 [8^ 2] + 1.0 [9^ 3]), ((0.0676933910532364+0j), -1.0 [4^ 8] + -1.0 [5^ 9] + 1.0 [8^ 4] + 1.0 [9^ 5]), ((0.09645938650964846+0j), -1.0 [0^ 10] + -1.0 [1^ 11] + 1.0 [10^ 0] + 1.0 [11^ 1]), ((0.10937796775160928+0j), -1.0 [2^ 10] + -1.0 [3^ 11] + 1.0 [10^ 2] + 1.0 [11^ 3]), ((0.08697546770177016+0j), -1.0 [4^ 10] + -1.0 [5^ 11] + 1.0 [10^ 4] + 1.0 [11^ 5])] New fr values norm 0.07444466243528106 ITERATION NUMBER : 4 unitary [[ 0.99631107 0.0024377 0.00967737 -0.06067026 -0.0280509 -0.05288601] [ 0.02950918 0.9003074 0.02991369 0.38804047 -0.05219794 0.18542097] [-0.02600898 -0.02444426 0.89590486 -0.05330925 -0.43830834 -0.03353238] [ 0.05481648 -0.39040119 0.05165075 0.91673742 0.01532443 -0.03566417] [ 0.01848879 0.0499805 0.43855608 -0.02034989 0.89663691 -0.02137324] [ 0.04970227 -0.18420635 0.03696997 -0.04560952 0.01348072 0.97978006]] Current Energy: -2.916350091963808 true energy -2.916294431421 dvec [((0.05547658628322175+0j), -1.0 [0^ 6] + -1.0 [1^ 7] + 1.0 [6^ 0] + 1.0 [7^ 1]), ((0.04768171050447512+0j), -1.0 [2^ 6] + -1.0 [3^ 7] + 1.0 [6^ 2] + 1.0 [7^ 3]), ((0.04090104889062215+0j), -1.0 [4^ 6] + -1.0 [5^ 7] + 1.0 [6^ 4] + 1.0 [7^ 5]), ((0.0036330103322619756+0j), -1.0 [0^ 8] + -1.0 [1^ 9] + 1.0 [8^ 0] + 1.0 [9^ 1]), ((0.061088133844132475+0j), -1.0 [2^ 8] + -1.0 [3^ 9] + 1.0 [8^ 2] + 1.0 [9^ 3]), ((0.021908877058534698+0j), -1.0 [4^ 8] + -1.0 [5^ 9] + 1.0 [8^ 4] + 1.0 [9^ 5]), ((0.06256944537920127+0j), -1.0 [0^ 10] + -1.0 [1^ 11] + 1.0 [10^ 0] + 1.0 [11^ 1]), ((0.04866892612100086+0j), -1.0 [2^ 10] + -1.0 [3^ 11] + 1.0 [10^ 2] + 1.0 [11^ 3]), ((0.0352340320654215+0j), -1.0 [4^ 10] + -1.0 [5^ 11] + 1.0 [10^ 4] + 1.0 [11^ 5])] New fr values norm 0.05950386717666047 ITERATION NUMBER : 5 unitary [[ 0.99850536 -0.01284269 0.02063662 -0.03573815 -0.00766817 -0.03256109] [ 0.03177609 0.88621633 0.04449454 0.40823477 -0.02409787 0.21070072] [-0.02397584 -0.03814092 0.90506224 -0.03328546 -0.42143598 -0.01079631] [ 0.02560615 -0.41135435 0.02889711 0.90943257 0.02699468 -0.03873723] [-0.00338342 0.02383547 0.42123655 -0.03050134 0.90574463 -0.02601022] [ 0.02711757 -0.2078952 0.01346961 -0.05441792 0.02549832 0.97583365]] Current Energy: -2.9220503327626277 true energy -2.9220593319024903 dvec [((0.03169861974595674+0j), -1.0 [0^ 6] + -1.0 [1^ 7] + 1.0 [6^ 0] + 1.0 [7^ 1]), ((0.01226242399530797+0j), -1.0 [2^ 6] + -1.0 [3^ 7] + 1.0 [6^ 2] + 1.0 [7^ 3]), ((0.02649034661623485+0j), -1.0 [4^ 6] + -1.0 [5^ 7] + 1.0 [6^ 4] + 1.0 [7^ 5]), ((-0.015886888428376496+0j), -1.0 [0^ 8] + -1.0 [1^ 9] + 1.0 [8^ 0] + 1.0 [9^ 1]), ((0.031038505180421373+0j), -1.0 [2^ 8] + -1.0 [3^ 9] + 1.0 [8^ 2] + 1.0 [9^ 3]), ((0.012123410003152812+0j), -1.0 [4^ 8] + -1.0 [5^ 9] + 1.0 [8^ 4] + 1.0 [9^ 5]), ((0.021814630200472522+0j), -1.0 [0^ 10] + -1.0 [1^ 11] + 1.0 [10^ 0] + 1.0 [11^ 1]), ((0.011648215480956944+0j), -1.0 [2^ 10] + -1.0 [3^ 11] + 1.0 [10^ 2] + 1.0 [11^ 3]), ((0.017311740944372024+0j), -1.0 [4^ 10] + -1.0 [5^ 11] + 1.0 [10^ 4] + 1.0 [11^ 5])] New fr values norm 0.0314367978236929 ITERATION NUMBER : 6 unitary [[ 9.99161355e-01 -2.62376019e-02 2.17451708e-02 -1.76168094e-02 -4.99399605e-03 -1.34175502e-02] [ 3.22551566e-02 8.73733167e-01 5.74556381e-02 4.25533374e-01 4.34211221e-03 2.26166535e-01] [-2.33761239e-02 -5.23760674e-02 9.08937967e-01 -1.00499666e-02 -4.12841990e-01 1.60191396e-03] [ 4.19615182e-03 -4.28589205e-01 2.96808819e-03 9.01646261e-01 3.85557903e-02 -4.28059183e-02] [-5.67712120e-03 -2.17383857e-03 4.12369417e-01 -4.27947303e-02 9.09410455e-01 -3.24922207e-02] [ 6.31752633e-03 -2.22407861e-01 -6.50857543e-04 -6.09313131e-02 3.16823819e-02 9.72511188e-01]] Current Energy: -2.9235191222993095 true energy -2.923523540416502 dvec [((0.010470453868872218+0j), -1.0 [0^ 6] + -1.0 [1^ 7] + 1.0 [6^ 0] + 1.0 [7^ 1]), ((0.006654678834670941+0j), -1.0 [2^ 6] + -1.0 [3^ 7] + 1.0 [6^ 2] + 1.0 [7^ 3]), ((0.015406083888045022+0j), -1.0 [4^ 6] + -1.0 [5^ 7] + 1.0 [6^ 4] + 1.0 [7^ 5]), ((-0.006161242409113891+0j), -1.0 [0^ 8] + -1.0 [1^ 9] + 1.0 [8^ 0] + 1.0 [9^ 1]), ((0.016739936458211514+0j), -1.0 [2^ 8] + -1.0 [3^ 9] + 1.0 [8^ 2] + 1.0 [9^ 3]), ((-0.0006175128415948361+0j), -1.0 [4^ 8] + -1.0 [5^ 9] + 1.0 [8^ 4] + 1.0 [9^ 5]), ((0.014443853801779698+0j), -1.0 [0^ 10] + -1.0 [1^ 11] + 1.0 [10^ 0] + 1.0 [11^ 1]), ((0.0068722360919028225+0j), -1.0 [2^ 10] + -1.0 [3^ 11] + 1.0 [10^ 2] + 1.0 [11^ 3]), ((0.00934817472494195+0j), -1.0 [4^ 10] + -1.0 [5^ 11] + 1.0 [10^ 4] + 1.0 [11^ 5])] New fr values norm 0.016440600286779992 ITERATION NUMBER : 7 unitary [[ 9.99171401e-01 -3.33334717e-02 1.88278996e-02 -6.27296257e-03 -1.04553939e-02 -6.49892292e-03] [ 3.22155394e-02 8.70070997e-01 6.39639958e-02 4.29782935e-01 1.93073272e-02 2.29697805e-01] [-2.34065991e-02 -6.19620849e-02 9.10697245e-01 5.89293874e-03 -4.07615661e-01 7.62270620e-03] [-8.30652195e-03 -4.32253859e-01 -1.44183921e-02 8.99336180e-01 4.61478442e-02 -4.40967730e-02] [ 7.74008526e-04 -1.60701098e-02 4.07331432e-01 -4.97124101e-02 9.11064378e-01 -3.62302859e-02] [-1.09736318e-03 -2.25664337e-01 -7.60659340e-03 -6.27348664e-02 3.46332434e-02 9.71535598e-01]] Current Energy: -2.9238977258522887 true energy -2.9238985467981786 dvec [((0.0058177015338317685+0j), -1.0 [0^ 6] + -1.0 [1^ 7] + 1.0 [6^ 0] + 1.0 [7^ 1]), ((0.00022287486490180086+0j), -1.0 [2^ 6] + -1.0 [3^ 7] + 1.0 [6^ 2] + 1.0 [7^ 3]), ((0.005788189203595353+0j), -1.0 [4^ 6] + -1.0 [5^ 7] + 1.0 [6^ 4] + 1.0 [7^ 5]), ((-0.003928357424124193+0j), -1.0 [0^ 8] + -1.0 [1^ 9] + 1.0 [8^ 0] + 1.0 [9^ 1]), ((0.008270309225101262+0j), -1.0 [2^ 8] + -1.0 [3^ 9] + 1.0 [8^ 2] + 1.0 [9^ 3]), ((0.003279243317207664+0j), -1.0 [4^ 8] + -1.0 [5^ 9] + 1.0 [8^ 4] + 1.0 [9^ 5]), ((0.006193137507152789+0j), -1.0 [0^ 10] + -1.0 [1^ 11] + 1.0 [10^ 0] + 1.0 [11^ 1]), ((0.00028777942950965196+0j), -1.0 [2^ 10] + -1.0 [3^ 11] + 1.0 [10^ 2] + 1.0 [11^ 3]), ((0.011944724050746515+0j), -1.0 [4^ 10] + -1.0 [5^ 11] + 1.0 [10^ 4] + 1.0 [11^ 5])] New fr values norm 0.008557842065769396 ITERATION NUMBER : 8 unitary [[ 0.99910509 -0.03622306 0.01761532 -0.00266714 -0.01250181 -0.00178883] [ 0.03219019 0.86792442 0.0673857 0.43202715 0.02740345 0.2318011 ] [-0.02353155 -0.06747426 0.91035666 0.01528878 -0.40717511 0.01090527] [-0.01236178 -0.43417585 -0.02445977 0.89787205 0.05048702 -0.04491194] [ 0.00315061 -0.02366583 0.40702787 -0.05343483 0.9107369 -0.03822745] [-0.00602797 -0.22753808 -0.01138637 -0.06389193 0.03620154 0.97091076]] Current Energy: -2.9239992303712206 true energy -2.9240004898549405 dvec [((0.004493105551805139+0j), -1.0 [0^ 6] + -1.0 [1^ 7] + 1.0 [6^ 0] + 1.0 [7^ 1]), ((0.005310059574327508+0j), -1.0 [2^ 6] + -1.0 [3^ 7] + 1.0 [6^ 2] + 1.0 [7^ 3]), ((0.005828402878573054+0j), -1.0 [4^ 6] + -1.0 [5^ 7] + 1.0 [6^ 4] + 1.0 [7^ 5]), ((0.0029030352679713465+0j), -1.0 [0^ 8] + -1.0 [1^ 9] + 1.0 [8^ 0] + 1.0 [9^ 1]), ((0.006780753516660748+0j), -1.0 [2^ 8] + -1.0 [3^ 9] + 1.0 [8^ 2] + 1.0 [9^ 3]), ((0.0027794006823822492+0j), -1.0 [4^ 8] + -1.0 [5^ 9] + 1.0 [8^ 4] + 1.0 [9^ 5]), ((-0.00016796679356435092+0j), -1.0 [0^ 10] + -1.0 [1^ 11] + 1.0 [10^ 0] + 1.0 [11^ 1]), ((-0.0014325599294213731+0j), -1.0 [2^ 10] + -1.0 [3^ 11] + 1.0 [10^ 2] + 1.0 [11^ 3]), ((-0.0008584509999620546+0j), -1.0 [4^ 10] + -1.0 [5^ 11] + 1.0 [10^ 4] + 1.0 [11^ 5])] New fr values norm 0.006435670841346409 ITERATION NUMBER : 9 unitary [[ 9.99052004e-01 -3.76758170e-02 1.68360087e-02 -6.11585502e-04 -1.38473740e-02 2.27080694e-04] [ 3.22047921e-02 8.67744106e-01 6.91141391e-02 4.31884087e-01 3.12976015e-02 2.31738751e-01] [-2.36157511e-02 -7.03804624e-02 9.10689804e-01 1.85300826e-02 -4.05648111e-01 1.54665336e-02] [-1.46055432e-02 -4.33903863e-01 -2.81833503e-02 8.97761490e-01 5.21554756e-02 -4.49881008e-02] [ 4.73649086e-03 -2.73433225e-02 4.05630375e-01 -5.53007421e-02 9.11096296e-01 -3.92335905e-02] [-8.03026593e-03 -2.27215911e-01 -1.59236675e-02 -6.40197902e-02 3.82317413e-02 9.70821653e-01]] Current Energy: -2.9240309078794757 true energy -2.924038119315364 dvec [((0.00015690520220090396+0j), -1.0 [0^ 6] + -1.0 [1^ 7] + 1.0 [6^ 0] + 1.0 [7^ 1]), ((-0.004966975009435104+0j), -1.0 [2^ 6] + -1.0 [3^ 7] + 1.0 [6^ 2] + 1.0 [7^ 3]), ((0.0032159958543552603+0j), -1.0 [4^ 6] + -1.0 [5^ 7] + 1.0 [6^ 4] + 1.0 [7^ 5]), ((-0.003721992361756998+0j), -1.0 [0^ 8] + -1.0 [1^ 9] + 1.0 [8^ 0] + 1.0 [9^ 1]), ((0.0037069721834967324+0j), -1.0 [2^ 8] + -1.0 [3^ 9] + 1.0 [8^ 2] + 1.0 [9^ 3]), ((0.0011342841449119567+0j), -1.0 [4^ 8] + -1.0 [5^ 9] + 1.0 [8^ 4] + 1.0 [9^ 5]), ((0.00402905366738221+0j), -1.0 [0^ 10] + -1.0 [1^ 11] + 1.0 [10^ 0] + 1.0 [11^ 1]), ((-0.0014770239849206807+0j), -1.0 [2^ 10] + -1.0 [3^ 11] + 1.0 [10^ 2] + 1.0 [11^ 3]), ((0.0015238891270694986+0j), -1.0 [4^ 10] + -1.0 [5^ 11] + 1.0 [10^ 4] + 1.0 [11^ 5])] New fr values norm 0.00444774326842547 Finished Optimization Each iteration prints out a variety of information that the user might find useful. Watching energies go down is known to be one of the best forms of entertainment during a shelter-in-place order. After the optimization we can print the energy as a function of iteration number to see close the energy gets to the true minium. import matplotlib.pyplot as plt plt.semilogy(range(len(result.func_vals)), np.abs(np.array(result.func_vals) - energy(parameters)), 'C0o-') plt.xlabel(\"Optimization Iterations\", fontsize=18) plt.ylabel(r\"$|E - E^{*}|$\", fontsize=18) plt.tight_layout() plt.show() Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-12-15 UTC.",
    "url": "https://quantumai.google/cirq/experiments/hfvqe/quickstart",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 2903,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:28.944837"
  },
  {
    "id": "cirq_3985948946352646181_0",
    "title": "Data analysis \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Data analysis View on QuantumAI Run in Google Colab View source on GitHub Download notebook This is the follow up to the data collection tutorial. We have measured bitstrings for the single-qubit circuit \\(R_y(\\theta)\\) for various thetas. In this analysis, we compute \\(\\langle Z \\rangle (\\theta)\\), compare to the analytically expected true value, and fit to a depolarizing noise model with T1 decay during readout. Setup Install the ReCirq package: try: import recirq except ImportError: !pip install --quiet git+https://github.com/quantumlib/ReCirq Now import Cirq, ReCirq and the module dependencies: import cirq import recirq from recirq.readout_scan.tasks import EXPERIMENT_NAME, DEFAULT_BASE_DIR Load data We can use utilities in ReCirq to query the filesystem and load in a dataset. Please recall that all tasks have an associated EXPERIMENT_NAME and a dataset_id which define the top two hierarchies in the filesystem. We import these values from the data collection script to ensure consistency. If you're running this notebook in Colab or you haven't yet gone through the Data Collection tutorial, we will download a pre-generated copy of the data for analysis. recirq.fetch_guide_data_collection_data() Downloading guide/data_collection data. recirq.iterload_records uses these two bits of information to iterate over records saved using recirq.save (in the data collection script. This also gives you a chance to do post-processing on the data. In general, you should do some massaging of the data and put the results into a pandas DataFrame. DataFrames are great for doing statistics and visualizations across tabular data. import numpy as np import pandas as pd records = [] # Load all data, do some light processing for record in recirq.iterload_records(dataset_id='2020-02-tutorial', base_dir=DEFAULT_BASE_DIR): # Expand task dataclass into columns recirq.flatten_dataclass_into_record(record, 'task') # Unwrap BitArray into np.ndarray all_bitstrings = [ba.bits for ba in record['all_bitstrings']] # Compute <Z> record['z_vals'] = [np.mean((-1)**bitstrings, axis=0).item() for bitstrings in all_bitstrings] # Don't need to carry around the full array of bits anymore del record['all_bitstrings'] records.append(record) df = pd.DataFrame(records) print(len(df)) df.head() 5 Plot the data A good first step. %matplotlib inline from matplotlib import pyplot as plt entry = df.iloc[0] # Pick the first qubit plt.plot([], []) # advance color cycle in anticipation of future analysis plt.plot(entry['thetas'], entry['z_vals'], 'o-') plt.xlabel('Theta', fontsize=14) plt.ylabel(r'$\\langle Z \\rangle$', fontsize=14) plt.title(\"Qubit {}\".format(entry['qubit']), fontsize=14) plt.tight_layout() How does it compare to analytical results? You could imagine setting up a separate task for computing and saving analytic results. For this single qubit example, we'll just compute it on the fly. qubit = cirq.LineQubit(0) thetas = df.iloc[0]['thetas'] class _DummyMeasurementGate(cirq.IdentityGate): \"\"\"A dummy measurement used to trick simulators into applying readout error when using PauliString.expectation_from_xxx.\"\"\" def _measurement_key_(self): return 'dummy!' def __repr__(self): if self.num_qubits() == 1: return '_DummyMeasurementGate' return '_DummyMeasurementGate({!r})'.format(self.num_qubits()) def __str__(self): if (self.num_qubits() == 1): return 'dummyM' else: return 'dummyM({})'.format(self.num_qubits()) def _circuit_diagram_info_(self, args): from cirq import protocols return protocols.CircuitDiagramInfo( wire_symbols=('dM',) * self.num_qubits(), connected=True) def dummy_measure(qubits): return _DummyMeasurementGate(num_qubits=len(qubits)).on(*qubits) def get_circuit(theta): return cirq.Circuit([ cirq.ry(theta).on(qubit), dummy_measure([qubit]) ]) true_z_vals = [] for theta in thetas: wf = cirq.final_state_vector(get_circuit(theta)) op = cirq.Z(qubit) * 1. true_z_val = op.expectation_from_state_vector(wf, qubit_map={qubit:0}, check_preconditions=False) true_z_vals.append(np.real_if_close(true_z_val).item()) true_z_vals = np.array(true_z_vals) true_z_vals array([ 0. , 0.25881901, 0.5 , 0.70710677, 0.86602539, 0.96592587, 1. , 0.96592587, 0.86602539, 0.70710677, 0.5 , 0.25881901, 0. , -0.25881901, -0.5 , -0.70710677, -0.86602539, -0.96592587, -1. , -0.96592587, -0.86602539, -0.70710677, -0.5 , -0.25881901, 0. ]) fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(11, 4)) ax1.plot(thetas, true_z_vals, '-', label='True') ax1.plot(entry['thetas'], entry['z_vals'], 'o-', label='Data') ax2.plot([], []) # advance color cycle ax2.plot(entry['thetas'], np.abs(true_z_vals - entry['z_vals']), 'o-', label='|Data - True|') ax1.legend(loc='best', frameon=False) ax2.legend(loc='best', frameon=False) ax1.set_xlabel('Theta', fontsize=14) ax2.set_xlabel('Theta', fontsize=14) fig.tight_layout() Learn a model Our experimental data has some wiggles in it, but it also has a clear pattern of deviation from the true values. We can hypothesize a (parameterized) noise model and then use function minimization to fit the noise model parameters. import scipy.optimize import cirq.contrib.noise_models as ccn def get_obj_func(data_expectations): all_results = [] def obj_func(x): depol_prob, decay_prob, readout_prob = x if depol_prob < 0 or decay_prob < 0 or readout_prob < 0: # emulate constraints by returning a high cost if we # stray into invalid territory return 1000 sim = cirq.DensityMatrixSimulator( noise=ccn.DepolarizingWithDampedReadoutNoiseModel( depol_prob=depol_prob, decay_prob=decay_prob, bitflip_prob=readout_prob)) results = [] for theta in thetas: density_result = sim.simulate(get_circuit(theta)) op = cirq.Z(qubit) * 1. true_z_val = op.expectation_from_state_vector( density_result.final_density_matrix, qubit_map=density_result.qubit_map, check_preconditions=False) results.append(np.real_if_close(true_z_val).item()) results = np.array(results) all_results.append(results) cost = np.sum(np.abs(results - data_expectations)) return cost return obj_func, all_results def print_result(x): depol_prob, decay_prob, readout_prob = x print(f'depol = {depol_prob:.2%}') print(f'decay = {decay_prob:.2%}') print(f'readout = {readout_prob:.2%}') dfb = df dfb = dfb.head(5) # Remove this to do all qubits len(dfb) 5 # Initial values depol_prob = 0.01 decay_prob = 0.01 readout_prob = 0.01 opt_results = [] for i, entry in dfb.iterrows(): ofunc, results = get_obj_func(entry['z_vals']) opt_result = scipy.optimize.minimize(ofunc, [depol_prob, decay_prob, readout_prob], method='nelder-mead', options={'disp': True}) label = f\"{entry['qubit'].row}, {entry['qubit'].col}\" print(\"Qubit\", label) print_result(opt_result.x) opt_results.append(opt_result) data_expectations = entry['z_vals'] fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(11, 4)) ax1.plot(thetas, true_z_vals, label='True') ax1.plot(thetas, data_expectations, 'o-', label=f'{label} Data') ax1.plot(thetas, results[-1], '.-', label='Fit') ax2.plot([], []) # advance color cycle ax2.plot(thetas, np.abs(true_z_vals - data_expectations), 'o-', label='|Data - True|') ax2.plot(thetas, np.abs(true_z_vals - results[-1]), '-', label='|Fit - True|') ax1.legend(loc='best') ax2.legend(loc='best') fig.tight_layout() plt.show() Optimization terminated successfully. Current function value: 0.046614 Iterations: 24 Function evaluations: 46 Qubit 3, 2 depol = 0.28% decay = 1.18% readout = 1.14% Optimization terminated successfully. Current function value: 0.074939 Iterations: 22 Function evaluations: 44 Qubit 4, 1 depol = 0.25% decay = 1.20% readout = 1.14% Optimization terminated successfully. Current function value: 0.071050 Iterations: 26 Function evaluations: 50 Qubit 4, 2 depol = 0.27% decay = 1.18% readout = 1.15% Optimization terminated successfully. Current function value: 0.061544 Iterations: 32 Function evaluations: 61 Qubit 4, 3 depol = 0.22% decay = 1.23% readout = 1.13% Optimization terminated successfully. Current function value: 0.057102 Iterations: 22 Function evaluations: 42 Qubit 5, 0 depol = 0.20% decay = 1.21% readout = 1.13% Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-12-15 UTC.",
    "url": "https://quantumai.google/cirq/experiments/guide/data_analysis",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 993,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:32.156217"
  },
  {
    "id": "cirq_1264786515434199079_0",
    "title": "Quantum walk \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Quantum walk View on QuantumAI Run in Google Colab View source on GitHub Download notebook The goal of this Notebook is to provide an interesting exposition to simulating quantum computational processes with Cirq. We will be investigating a very fundamental and interesting idea within quantum computing called the quantum walk, starting off with some information on classical random walks, and then building upon that knowledge to understand exactly what a quantum walk is, all while simulating the processes that are outlined mathematically with Cirq. In order to get started, we first need to import these libraries: try: import cirq except ImportError: print(\"installing cirq...\") !pip install --quiet cirq print(\"installed cirq.\") import cirq import random import numpy as np from matplotlib import pyplot as plt import scipy import scipy.special First, we'll need cirq. The random library is used to simulate our classical random walk, matplotlib is used to create graphs, and numpy and scipy are used for processing vectors, matrices, and more. Before we get started with quantum walks, let's first look into it's classical counterpart, and understand what a \"walk\" truly is: Classical random walks A random walk is a random process involving a \"walker\" that is placed in some \\(n\\)-dimensional medium, like a grid or a graph. We then repeatedly query some random variable, and based on the outcome of our measurement, the walker's position vector (position on the graph or grid) is updated. A basic example of a random walk is the one-dimensional graphical case, where we consider a marker placed on the origin of a number line with markings at each of the integers. Let the initial position vector of our marker be \\(\\lvert 0\\rangle\\). For \\(N\\) steps of our random walk, take a set of \\(N\\) random variables \\(\\{X_1, \\ ..., \\ X_N\\}\\), which can take on either a value of \\(1\\) or \\(-1\\) with equal probability. To find the updated position vector of our walker, we compute the value: \\[j \\ = \\ \\displaystyle\\sum_{k \\ = \\ 1}^{N} \\ X_k\\] Where we know: \\[\\lvert \\text{Final}\\rangle \\ = \\ \\lvert \\text{Initial} \\ + \\ j\\rangle\\] So for our case, the final position vector is \\(\\lvert j\\rangle\\). This model of a random walk can be generalized to \\(n\\)-dimensions. Another important fact to note is that for a discrete, 1-dimensional random walk on a number-line-like graph, the probability of the random walker being at a specific location follows a binomial distribution. Let us define an \\(N\\)-step random walk. Let us then assert that \\(N \\ = \\ L \\ + \\ R\\), where \\(L\\) is the number of steps to the left, and \\(R\\) is the number of steps to the right. We can then reason that if there is some probability \\(p_{r}\\) of the walker taking a rightward step at one time-step of the random walk, the probability of taking a leftward step is given by \\(1 \\ - \\ p_{r}\\). It follows that the probability of taking \\(L \\ = \\ N \\ - \\ R\\) leftward steps, and \\(R\\) rightward steps in a random walk of \\(N\\) total steps is: \\[P(N, \\ R) \\ = \\ p_{r}^R (1 \\ - \\ p_{r})^{N \\ - \\ R}\\] We then have to consider the probability that for an \\(N\\) step random walk, our walker ends up at position \\(X \\ = \\ R \\ - \\ L\\). Well, we know the probability of taking \\(L\\) left steps and \\(R\\) right steps, and we know that for a random walk of \\(N\\) steps, the position of the walker is determined by the number of right steps, minus the number of left steps. Since it doesn't matter the order in which the sequence of \\(N\\) steps occurs, to find the total probability of being at some location, \\(P(X)\\), we have to multiply the probability \\(P(L, \\ R)\\) by the number of possible ways in which \\(L\\) left steps and \\(R\\) right steps can be arranged in a sequence. Well, since we have \\(N\\) total steps, we can \"choose\" \\(R\\) of those steps to be allocated to rightward steps, and automatically know that the remaining \\(N \\ - \\ R\\) steps were left steps. We calculate \\(N\\) \"choose\" \\(R\\) steps by calculating the binomial coefficient, therefore getting: \\[P_{N}(X) \\ = \\ \\begin{pmatrix} N \\\\ R \\end{pmatrix} \\ p_{r}^R (1 \\ - \\ p_{r})^{N \\ - \\ R} \\Rightarrow \\ X \\ = \\ R \\ - \\ L \\ \\Rightarrow \\ P_{N}(X) \\ = \\ \\begin{pmatrix} N \\\\ \\frac{N \\ + \\ X}{2} \\end{pmatrix} \\ p_{r}^{\\frac{N \\ + \\ X}{2} } (1 \\ - \\ p_{r})^{\\frac{N \\ - \\ X}{2} }\\] It is important to note that this only holds true for even numbers if the total number of steps taken is even, and odd numbers if the total number of steps taken is odd. This is due to the fact that if we set the number of steps that the random walk can take to \\(N\\), then as we previously demonstrated, \\(L \\ + \\ R \\ = \\ N\\) and \\(R \\ - \\ L \\ = \\ X\\). Combining these two equations, we get, just like in the equation above: \\[R \\ = \\ \\frac{X \\ + \\ N}{2}\\] But \\(R\\) must be an integer, thus \\(X \\ + \\ N\\). Must be even. It follows that if \\(N\\) is odd, then \\(X\\) must also be odd to make an even number, and if \\(N\\) is even, \\(X\\) must also be even. From this, we come to the conclusion that if we have an even \\(N\\), the probability of being at a position \\(X\\) that is an odd value is \\(0\\), and if \\(N\\) is odd, then the probability of \\(X\\) being even is \\(0\\). And so we have shown that the probability distribution for the position of the walker for an \\(N\\) step random walk is given by a binomial distribution on the domain of the even or the odd numbers. This fact is important, as we will show that the probability distribution that is created when a quantum walk is simulated is nowhere close to the binomial distribution that we expect to see for a classical 1-dimensional random walk. If you don't believe me and/or the math, we can visualize this a bit better by coding up a simple program! We will define a one-dimensional random walk, starting at the point \\(0\\) on the integer number line. We will then repeatedly \"flip a coin\", and move left and right down the number line accordingly: # Defines all of the necessary parameters N = 50 # Defines the total number of steps our walker will take pr = 0.5 # Defines the probability of our walker stepping to the right i = 0 # Defines the initial position of our walker def random_walk(pr, N, i): position = i # Repeatedly queries our random variable and moves our walker for the specified number of steps for j in range(N): coin_flip = list(np.random.choice(2, 1, p=[1 - pr, pr])) # Flips our weighted coin position += 2 * coin_flip[0] - 1 # Moves our walker according to the coin flip return position print(\"The walker is located at: x = {var}\".format(var=random_walk(pr, N, i))) The walker is located at: x = 8 Now, let's attempt to generate the probability distribution corresponding to the walker's position, and make sure that it checks out with our math: def dist(runs, N): positions = range(-1 * N, N + 1) instances = [0 for i in range(-1 * N, N + 1)] for k in range(runs): result = random_walk(pr, N, i) instances[positions.index(result)] += 1 plt.bar(positions, [n / runs for n in instances]) plt.show() dist(10000, N) That looks pretty binomial to me (which is exactly what the math predicts)! We can now plot the distribution predicted in the math, and see if the two are the same: def height_calculate(x, N, pr): a = (N + x) / 2 b = (N - x) / 2 if x % 2 == 0: var = scipy.special.binom(N, a) * (pr**a) * ((1 - pr) ** b) else: var = 0 return var positions = range(-1 * N, N + 1) heights = [height_calculate(x, N, pr) for x in positions] plt.bar(positions, heights) plt.show() As you can see, the distributions look very similar, with the midpoint having a probability of a little bit over \\(0.1\\) in both graphs. Note that as we increase the runs variable, our simulated distribution will resemble our theoretical distribution more and more, as one would expect: run_range = [50, 100, 500, 1000, 5000, 10000] for run in run_range: dist(run, N) Quantum walks The process of the quantum walk isn't that much different from its classical counterpart, although the observed results of the two processes have many differences. First, let us motivate the creation of a QW. The idea is that when one performs analysis on a classical random walk, you can find that \\(\\sigma^2 \\ \\sim \\ T\\), where \\(\\sigma\\) is the standard deviation of the random walk's probability distribution, and \\(T\\) is the number of time-steps of the random walk. For the quantum walk, we can see that \\(\\sigma^2 \\ \\sim \\ T^2\\). In other words, the standard deviation grows at a quadratically faster rate. At a high level, this signifies that the quantum walker \"spreads out\" quadratically faster than the classical one, showing that the process of a QW is quadratically faster than its classical counterpart. In order to create a quantum walk, we have to translate the components of the classical random walk to a quantum problem. We can encode the position of a \"walker\" in some \\(n\\) -dimensional space with a vector \\(\\lvert j\\rangle\\). For the purpose of this project, we will be investigating a basic case of a random walk on a ring-shaped graph, with adjacent nodes connected by a single edge. The configuration looks something like this: Going back to our original idea of some position vector \\(\\lvert j\\rangle\\), it is apparent that in order to encode the location of a \"walker\" on this graph, we need to assign a specific value of our position vector to each node. Well, this is fairly simple, for a graph of \\(K\\) nodes, we form a Hilbert space \\(H_W\\) spanned by the following set: \\[H_W \\ = \\ \\{\\lvert j\\rangle \\ : \\ j \\ = \\ 0, \\ ..., \\ K \\ - \\ 1 \\}\\] We also require another vector in order to create a random walk. We need a \"coin vector\", which will encode the direction in which the random walk will progress at the \\(T\\)-th step of the process. This Hilbert space is spanned by the two basis states, representing forward and backward progression on our number-line-like graph (actually, our graph looks more like a ring, so the two basis states will represent clockwise and counter-clockwise motion, but it's the same idea). We will call this Hilbert space \\(H_C\\), and we can again define our spanning set: \\[H_C \\ = \\ \\{\\lvert i\\rangle \\ : \\ i \\ = \\ \\downarrow, \\ \\uparrow\\rangle\\}\\] Where the upward-arrow symbol represent counter-clockwise motion, and the downward arrow represents clock-wise motion. Now that we have defined all of the vectors we need to encode the information about our random walk, we must understand how we can realize these vectors in our quantum algorithm. Well, this is again fairly simple. For a graph of \\(K \\ = \\ 2^n\\) nodes, we require \\(n\\) qubits to encode binary representations of numbers ranging from \\(0\\) to \\(K \\ - \\ 1\\), therefore each of the vectors spanning \\(H_W\\) will be given by the binary representation of \\(j\\) corresponding to the basis vector \\(\\lvert j\\rangle\\). For the coin vector, since we have only two states, we only need one qubit to encode the two possible states: \\[\\lvert 0\\rangle \\ = \\ \\lvert \\uparrow\\rangle \\ \\ \\text{and} \\ \\ \\lvert 1\\rangle \\ = \\ \\lvert \\downarrow\\rangle\\] In order to represent the total space of all possible states of our system, we take the tensor product of the two spanning sets, which will then span the new Hilbert space \\(H_C \\ \\otimes \\ H_W\\). We will write a general element of this Hilbert space as \\(\\lvert i\\rangle \\ \\otimes \\ \\lvert j\\rangle\\). Moving right along, we now require a method to evolve our walk forward at each step. We define a random walk evolution operator as follows: \\[U \\ = \\ \\lvert \\uparrow\\rangle\\langle\\uparrow\\lvert \\ \\otimes \\ \\displaystyle\\sum_{j} \\ \\lvert j \\ + \\ 1\\rangle\\langle j\\lvert \\ + \\ \\lvert \\downarrow\\rangle\\langle\\downarrow\\lvert \\ \\otimes \\ \\displaystyle\\sum_{j} \\ \\lvert j \\ - \\ 1\\rangle\\langle j\\lvert \\] Essentially, since our qubits take on states \\(\\lvert 0\\rangle\\) and \\(\\lvert 1\\rangle\\), we know that any possible, general basis state vector formed from qubits \\(\\lvert n\\rangle^{\\otimes \\ N}\\) will be orthogonal to all other vectors in the basis spanning the space. Because of this, we can create an operator that first \"picks out\" the coin vector's state (the other term just goes to \\(0\\), as, like I said, the states or orthogonal), and then sums over all possible position states until it finds the position state to which the operator is being applied. The inner product of the vector and itself is just one (the vectors are not only orthogonal, they're orthonormal!), and the new position state of the vector is \\(\\lvert j \\ \\pm \\ 1\\rangle\\), depending on the state of the coin vector. This did exactly what we wanted, it evolved our walk either forward or backwards by one step! If you're still not convinced, let's check to see what happens when we have the state \\(\\lvert \\uparrow\\rangle \\ \\otimes \\ \\lvert 1\\rangle\\) and we apply the \\(U\\) operator: \\[U (\\lvert \\uparrow\\rangle \\ \\otimes \\ \\lvert 1\\rangle) \\ \\ = \\ \\Big( \\ \\lvert \\uparrow\\rangle\\langle\\uparrow\\lvert \\ \\otimes \\ \\displaystyle\\sum_{j} \\ \\lvert j \\ + \\ 1\\rangle\\langle j\\lvert \\ + \\ \\lvert \\downarrow\\rangle\\langle\\downarrow\\lvert \\ \\otimes \\ \\displaystyle\\sum_{j} \\ \\lvert j \\ - \\ 1\\rangle\\langle j\\lvert \\Big )(\\lvert \\uparrow\\rangle \\ \\otimes \\ \\lvert 1\\rangle)\\] \\[\\Rightarrow \\ \\lvert \\uparrow\\rangle\\langle\\uparrow\\lvert \\uparrow\\rangle \\ \\otimes \\ \\displaystyle\\sum_{j} \\ \\lvert j \\ + \\ 1\\rangle\\langle j\\lvert 1\\rangle \\ + \\ \\lvert \\downarrow\\rangle\\langle\\downarrow\\lvert \\uparrow\\rangle \\ \\otimes \\ \\displaystyle\\sum_{j} \\ \\lvert j \\ - \\ 1\\rangle\\langle j\\lvert 1\\rangle\\] \\[\\Rightarrow \\ \\lvert \\uparrow\\rangle \\ \\otimes \\ \\lvert 2\\rangle \\ + \\ 0\\lvert \\downarrow\\rangle \\ \\otimes \\ \\lvert 0\\rangle \\ = \\ \\lvert \\uparrow\\rangle \\ \\otimes \\ \\lvert 2\\rangle\\] As you can see, it works! Now, we must consider the randomness of the classical random walk. For the purposes of our quantum walk, we will \"set\" \\(p_{r} \\ = \\ 0.5\\), and therefore make \\(p_{l} \\ = \\ 0.5\\) as well. At each time step, it is necessary that we randomly flip the state of our coin vector \\(\\lvert i\\rangle\\). The Hadamard transformation seems like a natural choice, as: \\[H \\ = \\ \\frac{1}{\\sqrt{2} }\\begin{pmatrix} 1 && 1 \\\\ 1 && -1 \\end{pmatrix} \\ \\Rightarrow \\ H \\lvert \\uparrow\\rangle \\ = \\ \\frac{\\lvert \\uparrow\\rangle \\ + \\ \\lvert \\downarrow\\rangle }{\\sqrt{2} } \\ \\Rightarrow \\ H \\lvert \\downarrow\\rangle \\ = \\ \\frac{\\lvert \\uparrow\\rangle \\ - \\ \\lvert \\downarrow\\rangle }{\\sqrt{2} }\\] The probability of measuring one of the basis states is given by squaring the coefficient in the linear combination, which we can see for both outcomes is equal to \\(0.5\\), the same probability of a step to the right/step to the left that we originally desired. We can now combine our operators into one complete operator that works as one complete step of the random walk, including randomizing the coin vector: \\[S \\ = \\ U \\ (H \\ \\otimes \\ I)\\] Build a quantum walk with Cirq Now, that we have established all of the necessary mathematical rigour to create a quantum walk, we need to translate this into code. We can start by creating a qubit register, which will be used to represent all of the position vectors on our graph. Recall that for an \\(N\\) qubit register, we can encode all numbers ranging from \\(0\\) to \\(2^N \\ - \\ 1\\). For now, we will set \\(N \\ = \\ 7\\): number_qubits = 7 qubits = cirq.GridQubit.rect(1, number_qubits) print(qubits) [cirq.GridQubit(0, 0), cirq.GridQubit(0, 1), cirq.GridQubit(0, 2), cirq.GridQubit(0, 3), cirq.GridQubit(0, 4), cirq.GridQubit(0, 5), cirq.GridQubit(0, 6)] Next, we have to initialize our qubit register into some initial state. This can vary quite a bit, depending on the simulation that we want to make. To start, let's say that our initial position vector for our \"walker\" is roughly in the middle of the graph (not exactly, as we have an even number of position vector values). Let's also say that our coin vector is initialized in the \\(|\\downarrow\\rangle\\) state. Since \\(|\\downarrow\\rangle\\) corresponds to \\(|1\\rangle\\), the only operations that have to be performed in this qubit initialization method is an \\(X\\) gate acting on GridQubit(0, 1) (initializing the position vector), as well as an \\(X\\) gate acting on the coin qubit: def initial_state(): yield cirq.X.on(cirq.GridQubit(0, 1)) yield cirq.X.on(cirq.GridQubit(0, number_qubits)) Now that we have created and initialized our qubit register, we have to create an operation that can evolve our walk forward by one step. At a high level, our evolution operation will follow this process: \"Flip\" the coin qubit. The result of this \"flip\" will tell us in which direction our random walker should move. This \"flip\" operation is nothing more than a Hadamard transformation applied to the coin qubit after each evolution operation. Based on the state of the coin qubit after the flip, either perform the operation \\(|j\\rangle \\ \\rightarrow \\ |j \\ + \\ 1\\rangle\\) or \\(|j\\rangle \\ \\rightarrow \\ |j \\ - \\ 1\\rangle\\) on the register of qubits encoding the position vector of the walker on the graph. This will involve having two operations controlled by opposite states of the coin quibt, each representing a step forward or a step backward on the graph. Thus, our evolution operation will look something like this: If we construct our evolution operator in this fashion, the coin qubit is able to dictate whether the walker steps forwards or backwards without ever having to be measured! Now that we have a high-level setup for our evolution operator, we have to construct the \"step forward\" and \"step backward\" operations. These are nothing more than an addition and a subtraction operator, each of with adds or subtracts \\(1\\) from the position vector. Before we actually dive into making the addition and subtraction operators, it will be useful for us to define an operation which we will call an n-qubit Toffoli gate. The name is pretty self-explanatory, it is just an \\(X\\) gate that is controlled by an arbitrary number of qubits \\(n\\), rather than only \\(1\\) or \\(2\\) in the standard \\(CNOT\\) and Toffoli gates. In order to implement this, we can use the built-in function Cirq: cirq.X(target).controlled_by(*controls) (see Appendix A for an exact implementation of this gate with \\(CNOT\\)s). Now we can get back to creating the addition and subtraction operators. Starting with the addition operator, the idea is: Have a \\(CNOT\\) gate controlled by the coin qubit targeting the least significant qubit. This means that if the coin qubit is in the \"move forward\" state, the addition operator will be activated. Apply an \\(X\\) gate to the qubit that was just targeted by the \\(CNOT\\) gate. Apply a Toffoli gate controlled by the coin qubit and the qubit on which the \\(X\\) gate was just placed, targetting the second least-significant qubit. This acts as a \"carry operation\", meaning that if the coin qubit is in the addition state, and the least significant qubit is in the \\(|0\\rangle\\) state (meaning it was in the \\(|1\\rangle\\) state, but had the \\(CNOT\\) operation applied to it, we had to apply the \\(X\\) gate to flip it back to the \\(|1\\rangle\\) state so it can activate the Toffoli gate), then flip the value of the next qubit, signifying that the addition mod \\(2\\) carried over a one to the next digit of the number. Continue this process with \\(n\\)-qubit Toffoli gates controlled by all qubits less significant than the target qubit, along with the coin qubit until all qubits have had Toffoli gates applied. Apply \\(X\\) gates to all qubits in the position vector register, as they all had \\(X\\) gates applied to them in the process of addition (This jusst cancels out when we apply the inverse operator to perform subtraction). For the subtraction operator, we can make use of the fact that quantum operations are reversible, meaning that if we have some addition unitary \\(A\\), such that \\(A |j\\rangle \\ = \\ |j \\ + \\ 1\\rangle\\), then: \\[A^{\\dagger}A |j\\rangle \\ = \\ A^{\\dagger}|j \\ + \\ 1\\rangle \\ \\Rightarrow \\ A^{\\dagger}|j \\ + \\ 1\\rangle \\ = \\ |j\\rangle \\ \\Rightarrow \\ A^{\\dagger}|k\\rangle \\ = \\ |k \\ - \\ 1\\rangle\\] And so this means that \\(S \\ = \\ A^{\\dagger}\\). Since we can decompose \\(A\\) into a product of a bunch of unitaries, we get: \\[A \\ = \\ U_1 U_2 \\ ... \\ U_n \\ \\Rightarrow \\ S \\ = \\ A^{\\dagger} \\ = \\ U_n^{\\dagger} U_{n - 1}^{\\dagger} \\ ... \\ U_{1}^{\\dagger}\\] But our method only uses \\(X\\) gates and controlled \\(X\\) gates, all of which are Hermitian, thus we have: \\[S \\ = \\ U_n^{\\dagger} U_{n - 1}^{\\dagger} \\ ... \\ U_{1}^{\\dagger} \\ = \\ U_n U_{n - 1} \\ ... \\ U_{1}\\] So basically, our subtraction operation will just be applying our addition operator, but with the order of gates reversed. This allows us to create one general \"evolution operation\" for our walk, which adds or substract \\(1\\) to the walker's position vector, based on the coin qubit: def walk_step(): # \"Flip\" the coin vector yield cirq.H.on(cirq.GridQubit(0, number_qubits)) # Implement the Addition Operator yield cirq.X.on(cirq.GridQubit(0, number_qubits)) for i in range(number_qubits, 0, -1): controls = [cirq.GridQubit(0, v) for v in range(number_qubits, i - 1, -1)] yield cirq.X.on(cirq.GridQubit(0, i - 1)).controlled_by(*controls) if i > 1: yield cirq.X.on(cirq.GridQubit(0, i - 1)) yield cirq.X.on(cirq.GridQubit(0, number_qubits)) # Implement the Subtraction Operator for i in range(1, number_qubits + 1): controls = [cirq.GridQubit(0, v) for v in range(number_qubits, i - 1, -1)] yield cirq.X.on(cirq.GridQubit(0, i - 1)).controlled_by(*controls) if i < number_qubits: yield cirq.X.on(cirq.GridQubit(0, i)) Next, we have to append these operations to our quantum circuit, specifically iteratively apply the walk_step() function in order to evolve our random walk forward. After we do this, we measure of position vector qubit register, by applying measurement gates, and we sample our circuit repeatedly. In code, for the example of \\(10\\) iteration of our evolution operator, \\(200\\) samples of the circuit, and \\(7\\) position vector qubits, we have: number_qubits = 7 iterator = 30 sample_number = 5000 def generate_walk(number_qubits, iterator, sample_number): circuit = cirq.Circuit() circuit.append(initial_state()) for j in range(iterator): circuit.append(walk_step()) circuit.append(cirq.measure(*qubits, key='x')) simulator = cirq.Simulator() result = simulator.run(circuit, repetitions=sample_number) final = result.histogram(key='x') return final final = generate_walk(number_qubits, iterator, sample_number) print(final) Counter({12: 1199, 14: 653, 10: 347, 20: 326, 16: 287, 52: 267, 18: 194, 22: 155, 54: 154, 48: 154, 28: 126, 42: 119, 40: 118, 26: 117, 32: 114, 30: 112, 38: 106, 34: 100, 36: 93, 24: 89, 46: 55, 44: 53, 8: 23, 50: 20, 56: 18, 58: 1}) Finally, we then graph the results of our simulation, with final position vector value on the x-axis and the number of occurrences of that position vector value on the y-axis. This gives us a probability distribution for the position of the walker. It is important to note that the graphs will only have either even or odd numbered data point, depending on the initial position of the walker and the number of steps taken: def graph(final): x_arr = list(final.keys()) y_arr = [dict(final)[j] for j in dict(final).keys()] x_arr_final = [] y_arr_final = [] while len(x_arr) > 0: x_arr_final.append(min(x_arr)) y_arr_final.append(y_arr[x_arr.index(min(x_arr))]) holder = x_arr.index(min(x_arr)) del x_arr[holder] del y_arr[holder] plt.plot(x_arr_final, y_arr_final) plt.scatter(x_arr_final, y_arr_final) plt.show() graph(final) As you can see, we get a pretty strange probability distribution! This is due to the fact that repeated applications of the Hadamard gate to the coin qubit (which you may recall was initialized in the \\(|\\downarrow\\rangle\\) state). Over time, interference causes our coin qubit to bias to the left, but also creates a small bump far to the right as well! If you think this is weird, do the math! Take a qubit in the initial state of \\(|1\\rangle\\) and repeatedly apply a Hadamard transformation, then calculate the probabilities of measuring \\(|0\\rangle\\) and \\(|1\\rangle\\) by taking the modulus squared of the probability amplitude corresponding to each of the states. In fact, let's see what happens when our qubit is initialized in the \\(|\\uparrow\\rangle\\) state: def initial_state(): yield cirq.X.on(cirq.GridQubit(0, 1)) final = generate_walk(number_qubits, iterator, sample_number) graph(final) Cool, right!? It's the mirror image of what we saw when the coin qubit was in the other state. Let's try one more thing, let's initialize our coin qubit in a \"balanced\" state, where interference doesn't bias our distribution towards only one side! We will set our initial state to: \\[|i\\rangle \\ = \\ \\frac{|\\uparrow\\rangle \\ + \\ i|\\downarrow\\rangle}{\\sqrt{2} }\\] This is implemented by applying a Hadamard gate to \\(|\\uparrow\\rangle\\), and then applying an \\(S\\) gate to the qubit. When we simulate this with Cirq, we get: def initial_state(): yield cirq.X.on(cirq.GridQubit(0, 1)) yield cirq.H.on(cirq.GridQubit(0, number_qubits)) yield cirq.S.on(cirq.GridQubit(0, number_qubits)) final = generate_walk(number_qubits, iterator, sample_number) graph(final) So we get a probability distribution that is much more symmetric! Random walks have applications in so many fields of scientific inquiry, ranging from biology, to computer science, to finance. I definitely think there are a lot of possible great extensions to this basic example of a QW and many more great projects that can be made by utilizing this interesting process! References For more information about quantum random walks, see: https://arxiv.org/abs/quant-ph/0303081 For more information about applications of random walks, see: https://en.wikipedia.org/wiki/Random_walk#Applications Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-05-30 UTC.",
    "url": "https://quantumai.google/cirq/experiments/quantum_walks",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 4356,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:35.045582"
  },
  {
    "id": "cirq_-806660009011659482_0",
    "title": "Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Cirq An open source framework for programming quantum computers Cirq is a Python software library for writing, manipulating, and optimizing quantum circuits, and then running them on quantum computers and quantum simulators. Cirq provides useful abstractions for dealing with today\u2019s noisy intermediate-scale quantum computers, where details of the hardware are vital to achieving state-of-the-art results. Get started with Cirq open_in_new GitHub repository import cirq # Pick a qubit. qubit = cirq.GridQubit(0, 0) # Create a circuit circuit = cirq.Circuit( cirq.X(qubit)**0.5, # Square root of NOT. cirq.measure(qubit, key='m') # Measurement. ) print(\"Circuit:\") print(circuit) # Simulate the circuit several times. simulator = cirq.Simulator() result = simulator.run(circuit, repetitions=20) print(\"Results:\") print(result) Features Circuits Learn how to build quantum circuits from gates acting on qubits. Understand what a Moment is and how different insertion strategies can help you build your desired circuit. Learn about how to slice and dice circuits and transform them into new and better circuits. Learn more Devices Hardware constraints have a large impact on whether a circuit is practical or not on modern hardware. Learn how devices can be defined to handle these constraints. Learn more Simulation Cirq comes with built-in simulators, both for wave functions and for density matrices. These can handle noisy quantum channels using monte carlo or full density matrix simulations. In addition, Cirq works with a state-of-the-art wave function simulator: qsim. These simulators can be used to mock quantum hardware with the Quantum Virtual Machine. Simulate with Cirq Simulate with qsim Simulate with the QVM End-2-end experiments Cirq is used to run experiments on Google's quantum processors. Learn more about the latest experiments and access the code to see how to run them yourself. Learn more For beginners: Zero to quantum circuit simulation Get started on Cirq\u2019s basics with this tutorial. Learn the difference between gates and operations and how to build circuits out of moments. Simulate the resulting quantum circuits and find out how to perform transformations on these circuits. For advanced users: Quantum approximate optimization algorithm Learn how to write a quantum approximate optimization algorithm for NISQ hardware by writing a variational algorithm to optimize a solution to max-cut, which is a hard problem for classical computing. Featured guides and tutorials Introduction to Cirq Learn the basics of Cirq, from gates to operations to circuits to simulation. This is the best starting point for those who know the basics of quantum computing. See tutorial Textbook algorithms Cirq users have coded up a zoo of textbook quantum algorithms. These give you an idea of good patterns to follow in your own code and are useful when you are learning these algorithms. See list of algorithms Getting started with the QVM The Quantum Virtual Machine gives you the opportunity to run circuits on simulated hardware, which mocks the circuit constraints and noise behavior present in existing quantum hardware devices. Run a simple circuit with the QVM Learn how the QVM works QAOA See how to implement a Quantum Approximate Optimization Algorithm on real hardware. See tutorial Resources Our focused and responsible approach open_in_new Read here Educational resources Learn more GitHub repositories: Quantumlib open_in_new Explore Technical questions: Stack Exchange open_in_new Explore Community We are dedicated to cultivating an open and inclusive community to build software for near term quantum computers, and we welcome contributions from the community. Join our weekly open source meetings We host virtual open source meetings every week. Join our email lists to get invited to the ongoing open source meetings relevant to your work. Cirq Weekly Sync Subscribe: cirq-dev OpenFermion Weekly Sync Subscribe: openfermion-dev TensorFlow Quantum Weekly Sync Subscribe: tfq-dev Quantum Circuit Simulation Weekly Sync Subscribe: qsim-qsimh-dev Contribute to open source code Whether you are a researcher who wants to push the boundaries of what's available for NISQ computers, a software engineer, a technical writer, or a student who is excited about quantum computing, we welcome your contributions to our open source code available on GitHub. Getting started If you are looking for something to help out in Cirq, see the list of good first issues to get started. open_in_new Learn more Request for comment For larger features, check out our RFC process to learn how to contribute. Learn more Join our team We\u2019re looking for talented people to join our team to push the state of the art in quantum computing. Join us",
    "url": "https://quantumai.google/cirq/",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 725,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:36.645689"
  },
  {
    "id": "cirq_-3738731883403732951_0",
    "title": "Experiments using quantum circuits \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Textbook Algorithms Workshop A workshop notebook with examples that covers algorithms commonly shown in quantum textbooks. Shor's Algorithm An implementation of the famous integer factorization algorithm by Peter Shor. Variational Quantum Eigensolver An example of computing the ground state of a Hamiltonian using the variational principle. Quantum Walks An example of the quantum analog of a random walk algorithm. Fourier Checking A demonstration of the separation between quantum and classical computers. Hidden Linear Function problem An example showing quantum separation with a constant-depth solution. Research with ReCirq How to use this code. ReCirq experiment structure How ReCirq experiments are structured. Data collection How ReCirq experiments collect data. Data analysis How ReCirq experiments analyze data. Best practices Additional advice on writing ReCirq experiments. Overview Example problems Introductory QAOA problems. Tasks QAOA experiment Task object. Precomputed analysis QAOA analysis with precomputed optimal angles. Landscape analysis QAOA analysis with a hardware landscape. Optimization analysis QAOA analysis with an optimization path. Hardware grid circuits QAOA on grid-shaped hardware. Routing with tket Use t|ket> to map QAOA to a generic device. Overview Quickstart A short tutorial to show HFVQE in action. Molecular data How to make molecule files for use with HFVQE. Overview Experiment example End-to-end with a single instance of the Fermi-Hubbard experiment. Spin-charge separation results Experimental data collected and analyzed. Overview Experiment example Build, run and plot an OTOC circuit. Overview Ground State Create a toric code ground state. Experiment example Overview Code Layout A short tutorial on the code structure. End-to-End Example How to generate a shadow trial wavefunction for a molecular system Experimental Wavefunctions Analyze published experimental wavefunctions. Experiment Example Code Layout Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-06-24 UTC.",
    "url": "https://quantumai.google/cirq/experiments",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 327,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:38.386438"
  },
  {
    "id": "cirq_3179679315274349106_0",
    "title": "Shor's algorithm \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Shor's algorithm View on QuantumAI Run in Google Colab View source on GitHub Download notebook This tutorial presents a pedagogical demonstration of Shor's algorithm. It is a modified and expanded version of this Cirq example. \"\"\"Install Cirq.\"\"\" try: import cirq except ImportError: print(\"installing cirq...\") !pip install --quiet cirq print(\"installed cirq.\") \"\"\"Imports for the notebook.\"\"\" import fractions import math import random import numpy as np import sympy from typing import Callable, Iterable, Sequence import cirq Order finding Factoring an integer \\(n\\) can be reduced to finding the period of the modular exponential function (to be defined). Finding this period can be accomplished (with high probability) by finding the order of a randomly chosen element of the multiplicative group modulo \\(n\\). Let \\(n\\) be a positive integer and \\[ \\mathbb{Z}_n := \\{x \\in \\mathbb{Z}_+ : x < n \\text{ and } \\text{gcd}(x, n) = 1\\} \\] be the multiplicative group modulo \\(n\\). Given \\(x \\in \\mathbb{Z}_n\\), compute the smallest positive integer \\(r\\) such that \\(x^r \\text{ mod } n = 1\\). It can be shown from group/number theory that: (1) Such an integer \\(r\\) exists. (Note that \\(g^{|G|} = 1_G\\) for any group \\(G\\) with cardinality \\(|G|\\) and element \\(g \\in G\\), but it's possible that \\(r < |G|\\).) (2) If \\(n = pq\\) for primes \\(p\\) and \\(q\\), then \\(|\\mathbb{Z}_n| = \\phi(n) = (p - 1) (q - 1)\\). (The function \\(\\phi\\) is called Euler's totient function.) (3) The modular exponential function \\[ f_x(z) := x^z \\mod n \\] is periodic with period \\(r\\) (the order of the element \\(x \\in \\mathbb{Z}_n\\)). That is, \\(f_x(z + r) = f_x(z)\\). (4) If we know the period of the modular exponential function, we can (with high probability) figure out \\(p\\) and \\(q\\) -- that is, factor \\(n\\). As a refresher, we can visualize the elements of some multiplicative groups \\(\\mathbb{Z}_n\\) for integers \\(n\\) via the following simple function. \"\"\"Function to compute the elements of Z_n.\"\"\" def multiplicative_group(n: int) -> list[int]: \"\"\"Returns the multiplicative group modulo n. Args: n: Modulus of the multiplicative group. \"\"\" assert n > 1 group = [1] for x in range(2, n): if math.gcd(x, n) == 1: group.append(x) return group For example, the multiplicative group modulo \\(n = 15\\) is shown below. \"\"\"Example of a multiplicative group.\"\"\" n = 15 print(f\"The multiplicative group modulo n = {n} is:\") print(multiplicative_group(n)) The multiplicative group modulo n = 15 is: [1, 2, 4, 7, 8, 11, 13, 14] One can check that this set of elements indeed forms a group (under ordinary multiplication). Classical order finding A function for classically computing the order \\(r\\) of an element \\(x \\in \\mathbb{Z}_n\\) is provided below. This function simply computes the sequence \\[ x^2 \\text{ mod } n \\] \\[ x^3 \\text{ mod } n \\] \\[ x^4 \\text{ mod } n \\] \\[ \\vdots \\] until an integer \\(r\\) is found such that \\(x^r = 1 \\text{ mod } n\\). Since \\(|\\mathbb{Z}_n| = \\phi(n)\\), this algorithm for order finding has time complexity \\(O(\\phi(n))\\) which is inefficient. (Roughly \\(O(2^{L / 2})\\) where \\(L\\) is the number of bits in \\(n\\).) \"\"\"Function for classically computing the order of an element of Z_n.\"\"\" def classical_order_finder(x: int, n: int) -> int | None: \"\"\"Computes smallest positive r such that x**r mod n == 1. Args: x: Integer whose order is to be computed, must be greater than one and belong to the multiplicative group of integers modulo n (which consists of positive integers relatively prime to n), n: Modulus of the multiplicative group. Returns: Smallest positive integer r such that x**r == 1 mod n. Always succeeds (and hence never returns None). Raises: ValueError when x is 1 or not an element of the multiplicative group of integers modulo n. \"\"\" # Make sure x is both valid and in Z_n. if x < 2 or x >= n or math.gcd(x, n) > 1: raise ValueError(f\"Invalid x={x} for modulus n={n}.\") # Determine the order. r, y = 1, x while y != 1: y = (x * y) % n r += 1 return r An example of computing \\(r\\) for a given \\(x \\in \\mathbb{Z}_n\\) and given \\(n\\) is shown in the code block below. \"\"\"Example of (classically) computing the order of an element.\"\"\" n = 15 # The multiplicative group is [1, 2, 4, 7, 8, 11, 13, 14]. x = 8 r = classical_order_finder(x, n) # Check that the order is indeed correct. print(f\"x^r mod n = {x}^{r} mod {n} = {x**r % n}\") x^r mod n = 8^4 mod 15 = 1 The quantum part of Shor's algorithm is order finding, but done via a quantum circuit, which we'll discuss below. Quantum order finding Quantum order finding is essentially quantum phase estimation with unitary \\(U\\) that computes the modular exponential function \\(f_x(z)\\) for some randomly chosen \\(x \\in \\mathbb{Z}_n\\). The full details of how \\(U\\) is computed in terms of elementary gates can be complex to unravel, especially on a first reading. In this tutorial, we'll use arithmetic gates in Cirq which can implement such a unitary \\(U\\) without fully delving into the details of elementary gates. Below we first show an example of a simple arithmetic gate in Cirq (addition) then discuss the gate we care about (modular exponentiation). Quantum arithmetic gates in Cirq Here we discuss an example of defining an arithmetic gate in Cirq, namely modular addition. This gate adds the value of the input register into the target register. More specifically, this gate acts on two qubit registers as \\[ |a\\rangle_i |b\\rangle_t \\mapsto |a\\rangle_i |a + b \\text{ mod } N_t \\rangle_t . \\] Here, the subscripts \\(i\\) and \\(t\\) denote input and target register, respectively, and \\(N_t\\) is the dimension of the target register. To define this gate, called Adder, we inherit from cirq.ArithmeticGate and override the four methods shown below. Note the register arguments specify the shape of the qubits to which they can be applied. The main method is the apply method which defines the arithmetic. Here, we simply state the expression as \\(a + b\\) instead of the more accurate \\(a + b \\text{ mod } N_t\\) above -- the cirq.ArithmeticGate class is able to deduce what we mean by simply \\(a + b\\) since the gate must be reversible. \"\"\"Example of defining an arithmetic (quantum) gate in Cirq.\"\"\" class Adder(cirq.ArithmeticGate): \"\"\"Quantum addition.\"\"\" def __init__(self, target_register: int | Sequence[int], input_register: int | Sequence[int]): self.target_register = target_register self.input_register = input_register def registers(self) -> Sequence[int | Sequence[int]]: return self.target_register, self.input_register def with_registers(self, *new_registers: int | Sequence[int]) -> 'Adder': return Adder(*new_registers) def apply(self, *register_values: int) -> int | Iterable[int]: return sum(register_values) def _circuit_diagram_info_(self, args: cirq.CircuitDiagramInfoArgs): wire_symbols = [' + ' for _ in range(len(self.input_register) + len(self.target_register))] return cirq.CircuitDiagramInfo(wire_symbols=tuple(wire_symbols)) Now that we have the gate defined, we can use it in a circuit. The cell below creates two qubit registers, then sets the first register to be \\(|10\\rangle\\) (in binary) and the second register to be \\(|01\\rangle\\) (in binary) via \\(X\\) gates. Then, we use the Adder gate, then measure all the qubits. Since \\(10 + 01 = 11\\) (in binary), we expect to measure \\(|11\\rangle\\) in the target register every time. Additionally, since we do not alter the input register, we expect to measure \\(|10\\rangle\\) in the input register every time. In short, the only bitstring we expect to measure is \\(1011\\). \"\"\"Example of using an Adder in a circuit.\"\"\" # Two qubit registers. qreg1 = cirq.LineQubit.range(2) qreg2 = cirq.LineQubit.range(2, 4) # Define an adder gate for two 2D input and target qubits. adder = Adder(input_register=[2, 2], target_register=[2, 2]) # Define the circuit. circ = cirq.Circuit( cirq.X.on(qreg1[0]), cirq.X.on(qreg2[1]), adder.on(*qreg1, *qreg2), cirq.measure_each(*qreg1), cirq.measure_each(*qreg2), ) # Display it. print(\"Circuit:\\n\") print(circ) # Print the measurement outcomes. print(\"\\n\\nMeasurement outcomes:\\n\") print(cirq.sample(circ, repetitions=5).data) Circuit: 0: \u2500\u2500\u2500X\u2500\u2500\u2500 + \u2500\u2500\u2500M\u2500\u2500\u2500 \u2502 1: \u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500M\u2500\u2500\u2500 \u2502 2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500M\u2500\u2500\u2500 \u2502 3: \u2500\u2500\u2500X\u2500\u2500\u2500 + \u2500\u2500\u2500M\u2500\u2500\u2500 Measurement outcomes: q(0) q(1) q(2) q(3) 0 1 1 0 1 1 1 1 0 1 2 1 1 0 1 3 1 1 0 1 4 1 1 0 1 In the output of this code block, we first see the circuit which shows the initial \\(X\\) gates, the Adder gate, then the final measurements. Next, we see the measurement outcomes which are all the bitstring \\(1011\\) as expected. It is also possible to see the unitary of the adder gate, which we do below. Here, we set the target register to be two qubits in the zero state, i.e. \\(|00\\rangle\\). We specify the input register as the integer one which corresponds to the qubit register \\(|01\\rangle\\). \"\"\"Example of the unitary of an Adder gate.\"\"\" cirq.unitary(Adder(target_register=[2, 2], input_register=1)).real array([[0., 0., 0., 1.], [1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.]]) We can understand this unitary as follows. The \\(i\\)th column of the unitary is the state \\(|i + 1 \\text{ mod } 4\\rangle\\). For example, if we look at the \\(0\\)th column of the unitary, we see the state \\(|i + 1 \\text{ mod } 4\\rangle = |0 + 1 \\text{ mod } 4\\rangle = |1\\rangle\\). If we look at the \\(1\\)st column of the unitary, we see the state \\(|i + 1 \\text{ mod } 4\\rangle = |1 + 1 \\text{ mod } 4\\rangle = |2\\rangle\\). Similarly for the last two columns. Modular exponential arithmetic gate We can define the modular exponential arithmetic gate in a similar way to the simple addition arithmetic gate, shown below. For the purposes of understanding Shor's algorithm, the most important part of the following code block is the apply method which defines the arithmetic gate. \"\"\"Defines the modular exponential gate used in Shor's algorithm.\"\"\" class ModularExp(cirq.ArithmeticGate): \"\"\"Quantum modular exponentiation. This class represents the unitary which multiplies base raised to exponent into the target modulo the given modulus. More precisely, it represents the unitary V which computes modular exponentiation x**e mod n: V|y\u27e9|e\u27e9 = |y * x**e mod n\u27e9 |e\u27e9 0 <= y < n V|y\u27e9|e\u27e9 = |y\u27e9 |e\u27e9 n <= y where y is the target register, e is the exponent register, x is the base and n is the modulus. Consequently, V|y\u27e9|e\u27e9 = (U**e|y)|e\u27e9 where U is the unitary defined as U|y\u27e9 = |y * x mod n\u27e9 0 <= y < n U|y\u27e9 = |y\u27e9 n <= y \"\"\" def __init__( self, target: Sequence[int], exponent: int | Sequence[int], base: int, modulus: int ) -> None: if len(target) < modulus.bit_length(): raise ValueError( f'Register with {len(target)} qubits is too small for modulus' f' {modulus}' ) self.target = target self.exponent = exponent self.base = base self.modulus = modulus def registers(self) -> Sequence[int | Sequence[int]]: return self.target, self.exponent, self.base, self.modulus def with_registers(self, *new_registers: int | Sequence[int]) -> 'ModularExp': \"\"\"Returns a new ModularExp object with new registers.\"\"\" if len(new_registers) != 4: raise ValueError( f'Expected 4 registers (target, exponent, base, ' f'modulus), but got {len(new_registers)}' ) target, exponent, base, modulus = new_registers if not isinstance(target, Sequence): raise ValueError(f'Target must be a qubit register, got {type(target)}') if not isinstance(base, int): raise ValueError(f'Base must be a classical constant, got {type(base)}') if not isinstance(modulus, int): raise ValueError(f'Modulus must be a classical constant, got {type(modulus)}') return ModularExp(target, exponent, base, modulus) def apply(self, *register_values: int) -> int: \"\"\"Applies modular exponentiation to the registers. Four values should be passed in. They are, in order: - the target - the exponent - the base - the modulus Note that the target and exponent should be qubit registers, while the base and modulus should be constant parameters that control the resulting unitary. \"\"\" assert len(register_values) == 4 target, exponent, base, modulus = register_values if target >= modulus: return target return (target * base**exponent) % modulus def _circuit_diagram_info_(self, args: cirq.CircuitDiagramInfoArgs) -> cirq.CircuitDiagramInfo: \"\"\"Returns a 'CircuitDiagramInfo' object for printing circuits. This function just returns information on how to print this operation out in a circuit diagram so that the registers are labeled appropriately as exponent ('e') and target ('t'). \"\"\" assert args.known_qubits is not None wire_symbols = [f't{i}' for i in range(len(self.target))] e_str = str(self.exponent) if isinstance(self.exponent, Sequence): e_str = 'e' wire_symbols += [f'e{i}' for i in range(len(self.exponent))] wire_symbols[0] = f'ModularExp(t*{self.base}**{e_str} % {self.modulus})' return cirq.CircuitDiagramInfo(wire_symbols=tuple(wire_symbols)) In the apply method, we see that we evaluate (target * base**exponent) % modulus. The target and the exponent depend on the values of the respective qubit registers, and the base and modulus are constant -- namely, the modulus is \\(n\\) and the base is some \\(x \\in \\mathbb{Z}_n\\). The total number of qubits we will use is \\(3 (L + 1)\\) where \\(L\\) is the number of bits needed to store the integer \\(n\\) to factor. The size of the unitary which implements the modular exponential is thus \\(4^{3(L + 1)}\\). For a modest \\(n = 15\\), the unitary requires storing \\(2^{30}\\) floating point numbers in memory which is out of reach of most current standard laptops. \"\"\"Create the target and exponent registers for phase estimation, and see the number of qubits needed for Shor's algorithm. \"\"\" n = 15 L = n.bit_length() # The target register has L qubits. target = cirq.LineQubit.range(L) # The exponent register has 2L + 3 qubits. exponent = cirq.LineQubit.range(L, 3 * L + 3) # Display the total number of qubits to factor this n. print(f\"To factor n = {n} which has L = {L} bits, we need 3L + 3 = {3 * L + 3} qubits.\") To factor n = 15 which has L = 4 bits, we need 3L + 3 = 15 qubits. As with the simple adder gate, this modular exponential gate has a unitary which we can display (memory permitting) as follows. \"\"\"See (part of) the unitary for a modular exponential gate.\"\"\" # Pick some element of the multiplicative group modulo n. x = 5 # Display (part of) the unitary. Uncomment if n is small enough. # cirq.unitary(ModularExp(target, exponent, x, n)) Using the modular exponential gate in a circuit The quantum part of Shor's algorithm is just phase estimation with the unitary \\(U\\) corresponding to the modular exponential gate. The following cell defines a function which creates the circuit for Shor's algorithm using the ModularExp gate we defined above. \"\"\"Function to make the quantum circuit for order finding.\"\"\" def make_order_finding_circuit(x: int, n: int) -> cirq.Circuit: \"\"\"Returns quantum circuit which computes the order of x modulo n. The circuit uses Quantum Phase Estimation to compute an eigenvalue of the following unitary: U|y\u27e9 = |y * x mod n\u27e9 0 <= y < n U|y\u27e9 = |y\u27e9 n <= y Args: x: positive integer whose order modulo n is to be found n: modulus relative to which the order of x is to be found Returns: Quantum circuit for finding the order of x modulo n \"\"\" L = n.bit_length() target = cirq.LineQubit.range(L) exponent = cirq.LineQubit.range(L, 3 * L + 3) # Create a ModularExp gate sized for these registers. mod_exp = ModularExp([2] * L, [2] * (2 * L + 3), x, n) return cirq.Circuit( cirq.X(target[L - 1]), cirq.H.on_each(*exponent), mod_exp.on(*target, *exponent), cirq.qft(*exponent, inverse=True), cirq.measure(*exponent, key='exponent'), ) Using this function, we can visualize the circuit for a given \\(x\\) and \\(n\\) as follows. \"\"\"Example of the quantum circuit for period finding.\"\"\" n = 15 x = 7 circuit = make_order_finding_circuit(x, n) print(circuit) 0: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500ModularExp(t*7**e % 15)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 1: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500t1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500t2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 3: \u2500\u2500\u2500\u2500X\u2500\u2500\u2500t3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 4: \u2500\u2500\u2500\u2500H\u2500\u2500\u2500e0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500qft^-1\u2500\u2500\u2500M('exponent')\u2500\u2500\u2500 \u2502 \u2502 \u2502 5: \u2500\u2500\u2500\u2500H\u2500\u2500\u2500e1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500#2\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 6: \u2500\u2500\u2500\u2500H\u2500\u2500\u2500e2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500#3\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 7: \u2500\u2500\u2500\u2500H\u2500\u2500\u2500e3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500#4\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 8: \u2500\u2500\u2500\u2500H\u2500\u2500\u2500e4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500#5\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 9: \u2500\u2500\u2500\u2500H\u2500\u2500\u2500e5\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500#6\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 10: \u2500\u2500\u2500H\u2500\u2500\u2500e6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500#7\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 11: \u2500\u2500\u2500H\u2500\u2500\u2500e7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500#8\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 12: \u2500\u2500\u2500H\u2500\u2500\u2500e8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500#9\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 13: \u2500\u2500\u2500H\u2500\u2500\u2500e9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500#10\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 14: \u2500\u2500\u2500H\u2500\u2500\u2500e10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500#11\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 As previously described, we put the exponent register into an equal superposition via Hadamard gates. The \\(X\\) gate on the last qubit in the target register is used for phase kickback. The modular exponential gate performs the sequence of controlled unitaries in phase estimation, then we apply the inverse quantum Fourier transform to the exponent register and measure to read out the result. To illustrate the measurement results, we can sample from a smaller circuit. (Note that in practice we would never run Shor's algorithm with \\(n = 6\\) because it is even. This is just an example to illustrate the measurement outcomes.) \"\"\"Measuring Shor's period finding circuit.\"\"\" circuit = make_order_finding_circuit(x=5, n=6) res = cirq.sample(circuit, repetitions=8) print(\"Raw measurements:\") print(res) print(\"\\nInteger in exponent register:\") print(res.data) Raw measurements: exponent=11010000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000 Integer in exponent register: exponent 0 256 1 256 2 0 3 256 4 0 5 0 6 0 7 0 We interpret each measured bitstring as an integer, but what do these integers tell us? In the next section we look at how to classically post-process to interpret them. Classical post-processing The integer we measure is close to \\(s / r\\) where \\(r\\) is the order of \\(x \\in \\mathbb{Z}_n\\) and \\(0 \\le s < r\\) is an integer. We use the continued fractions algorithm to determine \\(r\\) from \\(s / r\\) then return it if the order finding circuit succeeded, else we return None. def process_measurement(result: cirq.Result, x: int, n: int) -> int | None: \"\"\"Interprets the output of the order finding circuit. Specifically, it determines s/r such that exp(2\u03c0is/r) is an eigenvalue of the unitary U|y\u27e9 = |xy mod n\u27e9 0 <= y < n U|y\u27e9 = |y\u27e9 n <= y then computes r (by continued fractions) if possible, and returns it. Args: result: result obtained by sampling the output of the circuit built by make_order_finding_circuit Returns: r, the order of x modulo n or None. \"\"\" # Read the output integer of the exponent register. exponent_as_integer = result.data[\"exponent\"][0] exponent_num_bits = result.measurements[\"exponent\"].shape[1] eigenphase = float(exponent_as_integer / 2**exponent_num_bits) # Run the continued fractions algorithm to determine f = s / r. f = fractions.Fraction.from_float(eigenphase).limit_denominator(n) # If the numerator is zero, the order finder failed. if f.numerator == 0: return None # Else, return the denominator if it is valid. r = f.denominator if x**r % n != 1: return None return r The next code block shows an example of creating an order finding circuit, executing it, then using the classical postprocessing function to determine the order. Recall that the quantum part of the algorithm succeeds with some probability. If the order is None, try re-running the cell a few times. \"\"\"Example of the classical post-processing.\"\"\" # Set n and x here n = 6 x = 5 print(f\"Finding the order of x = {x} modulo n = {n}\\n\") measurement = cirq.sample(circuit, repetitions=1) print(\"Raw measurements:\") print(measurement) print(\"\\nInteger in exponent register:\") print(measurement.data) r = process_measurement(measurement, x, n) print(\"\\nOrder r =\", r) if r is not None: print(f\"x^r mod n = {x}^{r} mod {n} = {x**r % n}\") Finding the order of x = 5 modulo n = 6 Raw measurements: exponent=0, 0, 0, 0, 0, 0, 0, 0, 0 Integer in exponent register: exponent 0 0 Order r = None You should see that the order of \\(x = 5\\) in \\(\\mathbb{Z}_6\\) is \\(r = 2\\). Indeed, \\(5^2 \\text{ mod } 6 = 25 \\text{ mod } 6 = 1\\). Quantum order finder We can now define a streamlined function for the quantum version of order finding using the functions we have previously written. The quantum order finder below creates the circuit, executes it, and processes the measurement result. def quantum_order_finder(x: int, n: int) -> int | None: \"\"\"Computes smallest positive r such that x**r mod n == 1. Args: x: integer whose order is to be computed, must be greater than one and belong to the multiplicative group of integers modulo n (which consists of positive integers relatively prime to n), n: modulus of the multiplicative group. \"\"\" # Check that the integer x is a valid element of the multiplicative group # modulo n. if x < 2 or n <= x or math.gcd(x, n) > 1: raise ValueError(f'Invalid x={x} for modulus n={n}.') # Create the order finding circuit. circuit = make_order_finding_circuit(x, n) # Sample from the order finding circuit. measurement = cirq.sample(circuit) # Return the processed measurement result. return process_measurement(measurement, x, n) This completes our quantum implementation of an order finder, and the quantum part of Shor's algorithm. The complete factoring algorithm We can use this quantum order finder (or the classical order finder) to complete Shor's algorithm. In the following code block, we add a few pre-processing steps which: (1) Check if \\(n\\) is even, (2) Check if \\(n\\) is prime, (3) Check if \\(n\\) is a prime power, all of which can be done efficiently with a classical computer. Additionally, we add the last necessary post-processing step which uses the order \\(r\\) to compute a non-trivial factor \\(p\\) of \\(n\\). This is achieved by computing \\(y = x^{r / 2} \\text{ mod } n\\) (assuming \\(r\\) is even), then computing \\(p = \\text{gcd}(y - 1, n)\\). \"\"\"Functions for factoring from start to finish.\"\"\" def find_factor_of_prime_power(n: int) -> int | None: \"\"\"Returns non-trivial factor of n if n is a prime power, else None.\"\"\" for k in range(2, math.floor(math.log2(n)) + 1): c = math.pow(n, 1 / k) c1 = math.floor(c) if c1**k == n: return c1 c2 = math.ceil(c) if c2**k == n: return c2 return None def find_factor( n: int, order_finder: Callable[[int, int], int | None] = quantum_order_finder, max_attempts: int = 30, ) -> int | None: \"\"\"Returns a non-trivial factor of composite integer n. Args: n: Integer to factor. order_finder: Function for finding the order of elements of the multiplicative group of integers modulo n. max_attempts: number of random x's to try, also an upper limit on the number of order_finder invocations. Returns: Non-trivial factor of n or None if no such factor was found. Factor k of n is trivial if it is 1 or n. \"\"\" # If the number is prime, there are no non-trivial factors. if sympy.isprime(n): print(\"n is prime!\") return None # If the number is even, two is a non-trivial factor. if n % 2 == 0: return 2 # If n is a prime power, we can find a non-trivial factor efficiently. c = find_factor_of_prime_power(n) if c is not None: return c for _ in range(max_attempts): # Choose a random number between 2 and n - 1. x = random.randint(2, n - 1) # Most likely x and n will be relatively prime. c = math.gcd(x, n) # If x and n are not relatively prime, we got lucky and found # a non-trivial factor. if 1 < c < n: return c # Compute the order r of x modulo n using the order finder. r = order_finder(x, n) # If the order finder failed, try again. if r is None: continue # If the order r is even, try again. if r % 2 != 0: continue # Compute the non-trivial factor. y = x ** (r // 2) % n assert 1 < y < n c = math.gcd(y - 1, n) if 1 < c < n: return c print(f\"Failed to find a non-trivial factor in {max_attempts} attempts.\") return None The function find_factor uses the quantum_order_finder by default, in which case it is executing Shor's algorithm. As previously mentioned, due to the large memory requirements for classically simulating this circuit, we cannot run Shor's algorithm for \\(n \\ge 15\\). However, we can use the classical order finder as a substitute. \"\"\"Example of factoring via Shor's algorithm (order finding).\"\"\" # Number to factor n = 184573 # Attempt to find a factor p = find_factor(n, order_finder=classical_order_finder) q = n // p print(\"Factoring n = pq =\", n) print(\"p =\", p) print(\"q =\", q) Factoring n = pq = 184573 p = 487 q = 379 \"\"\"Check the answer is correct.\"\"\" p * q == n True Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-05-30 UTC.",
    "url": "https://quantumai.google/cirq/experiments/shor",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 3995,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:45.060430"
  },
  {
    "id": "cirq_1393566144688032061_0",
    "title": "Making Molecule Files for HFVQE \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Making Molecule Files for HFVQE In this tutorial we describe the process of making the molecular data files necessary to run the HFVQE code. We focus on how to use the OpenFermion plugin modules to generate molecular files with canonical Hartree-Fock and generate integrals in a given atomic orbital basis set. We also provide helper functions to run variational Hartree-Fock simulating the experiment and generating initial parameters. This tutorial will follow the code in recirq/hfvqe/molecular_data/ for constructing MolecularData objects and getting atomic orbital integrals. In addition to the standard requirement of ReCirq and its dependencies, this notebook uses OpenFermion-pyscf (and pyscf) to compute some quantities. We install it below if you don't already have it. View on QuantumAI Run in Google Colab View source on GitHub Download notebook Setup try: import recirq except ImportError: !pip install --quiet git+https://github.com/quantumlib/ReCirq try: import openfermionpyscf except ImportError: !pip install --quiet openfermionpyscf~=0.5.0 Now we can import the packages required for this notebook. import os import numpy as np import scipy from recirq.hfvqe.molecular_data.molecular_data_construction import ( h6_linear_molecule, h8_linear_molecule, h10_linear_molecule, h12_linear_molecule, get_ao_integrals) from recirq.hfvqe.gradient_hf import rhf_minimization, rhf_func_generator from recirq.hfvqe.objective import RestrictedHartreeFockObjective, generate_hamiltonian def make_rhf_objective(molecule): S, Hcore, TEI = get_ao_integrals(molecule) _, X = scipy.linalg.eigh(Hcore, S) molecular_hamiltonian = generate_hamiltonian( general_basis_change(Hcore, X, (1, 0)), numpy.einsum('psqr', general_basis_change(TEI, X, (1, 0, 1, 0)), molecule.nuclear_repulsion)) rhf_objective = RestrictedHartreeFockObjective(molecular_hamiltonian, molecule.n_electrons) return rhf_objective, S, Hcore, TEI Hydrogen Chain MolecularData We provide helper functions in the hfvqe module to generate the Hydrogen chain data. Each chain is constructed using OpenFermion and Psi4 via the OpenFermion-Psi4 plugin. We will use creating H6 with equal spacing between Hydrogen atoms as an example. from openfermion import MolecularData, general_basis_change from openfermionpyscf import run_pyscf n_hydrogens = 6 bond_distance = 1.3 # in Angstroms molecule = MolecularData( geometry=[('H', (0, 0, i * bond_distance)) for i in range(n_hydrogens)], charge=0, basis='6-31g', multiplicity=1, description=f\"linear_r-{bond_distance}\") The previous lines set up the MolecularData file. We can now use pyscf to either run a full self-consistent-field Hartree-Fock calculation or get atomic integrals. Via Openfermion-Pyscf we provide an interface to running Hartree-Fock, coupled-cluster, second order perturbation theory, configuration-interaction singles-doubles, and full configuration interaction. Many of these methods depend on parameters such as convergence criteria or initial vectors in the subspace expansion. run_pyscf assumes common defaults which are appropriate for most systems. Below we will run default Hartree-Fock and CISD. molecule = run_pyscf(molecule, run_scf=True, run_cisd=True) print(\"Hartree-Fock energy:\", molecule.hf_energy, \"\\nCISD energy:\", molecule.cisd_energy) Hartree-Fock energy: -3.1025910099208893 CISD energy: -3.222103485102215 The MolecularData file holds almost all information that is required for post-Hartree-Fock correlated calculations. For example, we provide access to integrals as attributes of MolecularData. print(\"Overlap Ints\") print(molecule.overlap_integrals) print() print(\"One-electron integrals\") print(molecule.one_body_integrals) Overlap Ints [[1.00000000e+00 6.58292049e-01 1.07450262e-01 2.97950190e-01 2.92936786e-04 2.79155456e-02 1.86658314e-08 5.52805483e-04 2.50532789e-14 2.34306448e-06 7.06186034e-22 2.12361769e-09] [6.58292049e-01 1.00000000e+00 2.97950190e-01 6.14673658e-01 2.79155456e-02 1.42750753e-01 5.52805483e-04 1.25256830e-02 2.34306448e-06 4.15253811e-04 2.12361769e-09 5.20133758e-06] [1.07450262e-01 2.97950190e-01 1.00000000e+00 6.58292049e-01 1.07450262e-01 2.97950190e-01 2.92936786e-04 2.79155456e-02 1.86658314e-08 5.52805483e-04 2.50532789e-14 2.34306448e-06] [2.97950190e-01 6.14673658e-01 6.58292049e-01 1.00000000e+00 2.97950190e-01 6.14673658e-01 2.79155456e-02 1.42750753e-01 5.52805483e-04 1.25256830e-02 2.34306448e-06 4.15253811e-04] [2.92936786e-04 2.79155456e-02 1.07450262e-01 2.97950190e-01 1.00000000e+00 6.58292049e-01 1.07450262e-01 2.97950190e-01 2.92936786e-04 2.79155456e-02 1.86658314e-08 5.52805483e-04] [2.79155456e-02 1.42750753e-01 2.97950190e-01 6.14673658e-01 6.58292049e-01 1.00000000e+00 2.97950190e-01 6.14673658e-01 2.79155456e-02 1.42750753e-01 5.52805483e-04 1.25256830e-02] [1.86658314e-08 5.52805483e-04 2.92936786e-04 2.79155456e-02 1.07450262e-01 2.97950190e-01 1.00000000e+00 6.58292049e-01 1.07450262e-01 2.97950190e-01 2.92936786e-04 2.79155456e-02] [5.52805483e-04 1.25256830e-02 2.79155456e-02 1.42750753e-01 2.97950190e-01 6.14673658e-01 6.58292049e-01 1.00000000e+00 2.97950190e-01 6.14673658e-01 2.79155456e-02 1.42750753e-01] [2.50532789e-14 2.34306448e-06 1.86658314e-08 5.52805483e-04 2.92936786e-04 2.79155456e-02 1.07450262e-01 2.97950190e-01 1.00000000e+00 6.58292049e-01 1.07450262e-01 2.97950190e-01] [2.34306448e-06 4.15253811e-04 5.52805483e-04 1.25256830e-02 2.79155456e-02 1.42750753e-01 2.97950190e-01 6.14673658e-01 6.58292049e-01 1.00000000e+00 2.97950190e-01 6.14673658e-01] [7.06186034e-22 2.12361769e-09 2.50532789e-14 2.34306448e-06 1.86658314e-08 5.52805483e-04 2.92936786e-04 2.79155456e-02 1.07450262e-01 2.97950190e-01 1.00000000e+00 6.58292049e-01] [2.12361769e-09 5.20133758e-06 2.34306448e-06 4.15253811e-04 5.52805483e-04 1.25256830e-02 2.79155456e-02 1.42750753e-01 2.97950190e-01 6.14673658e-01 6.58292049e-01 1.00000000e+00]] One-electron integrals [[-1.87432470e+00 6.66718524e-16 -1.16409641e-01 -6.69781866e-16 -6.15072095e-02 8.64743077e-16 -1.25730762e-01 -9.82518280e-15 -5.89306300e-02 1.38904150e-15 2.71517033e-03 2.25766247e-15] [ 6.95913442e-16 -1.69304399e+00 3.29044146e-16 1.65551295e-01 7.57973688e-17 -4.41326519e-02 -5.52283445e-15 1.00494584e-01 -5.26451395e-15 -8.00969374e-02 9.95699260e-16 6.99057737e-03] [-1.16409641e-01 4.14669579e-16 -1.61481536e+00 -1.08419011e-16 1.42976433e-01 -1.22919674e-15 1.99568166e-02 -4.13016509e-16 -9.93300277e-02 3.68449433e-15 -8.38901334e-02 1.91177741e-15] [-1.07379547e-15 1.65551295e-01 -3.34502489e-17 -1.47182180e+00 -1.20745372e-15 -1.55554498e-01 -4.18991148e-15 6.81490634e-02 2.45799431e-15 1.47404734e-01 2.52356142e-15 4.83499815e-02] [-6.15072095e-02 -7.29409557e-18 1.42976433e-01 -1.11211777e-15 -1.29158710e+00 1.30133173e-15 5.71957393e-02 -2.40643206e-15 -1.32455830e-01 2.13733561e-15 1.56350662e-01 -1.29223941e-15] [ 1.99412076e-16 -4.41326519e-02 -1.29309921e-15 -1.55554498e-01 9.01102582e-16 -1.24806947e+00 1.00165479e-14 -1.25035099e-01 7.63654422e-16 -1.02022935e-01 3.14332314e-15 2.06045942e-01] [-1.25730762e-01 -5.56111086e-15 1.99568166e-02 -4.32524942e-15 5.71957393e-02 9.92538097e-15 -5.80091614e-01 -1.39709061e-14 -1.60790676e-01 -1.37441008e-15 -2.49740453e-02 -1.64777825e-15] [-9.76385997e-15 1.00494584e-01 -4.71473119e-16 6.81490634e-02 -2.41686844e-15 -1.25035099e-01 -1.39638608e-14 -4.13964503e-01 -9.35982132e-15 9.28605333e-02 4.14675110e-16 4.59666718e-02] [-5.89306300e-02 -5.20010038e-15 -9.93300277e-02 2.46246111e-15 -1.32455830e-01 7.49471803e-16 -1.60790676e-01 -9.26165761e-15 -4.68340636e-01 -5.90169813e-15 -3.67279868e-02 -3.61470632e-16] [ 1.15404347e-15 -8.00969374e-02 3.75428456e-15 1.47404734e-01 2.23782088e-15 -1.02022935e-01 -1.52222351e-15 9.28605333e-02 -5.75039805e-15 -5.21989869e-01 1.47588259e-15 -3.96033476e-02] [ 2.71517033e-03 8.03828408e-16 -8.38901334e-02 2.79715751e-15 1.56350662e-01 3.01522786e-15 -2.49740453e-02 5.63393019e-16 -3.67279868e-02 1.74880181e-15 -5.04870445e-01 9.98429008e-16] [ 9.88371921e-16 6.99057737e-03 1.65254921e-15 4.83499815e-02 -1.51022740e-15 2.06045942e-01 -1.11542008e-15 4.59666718e-02 -3.14064236e-16 -3.96033476e-02 1.84406451e-15 -4.15306461e-01]] For the Hartree-Fock experiment we will need to get the atomic basis integrals from the molecular integrals. We can use the identity \\(C^{\\dagger}SC = I\\) to reverse the transformation on the one and two electron integrals. oei_mo, tei_mo = molecule.one_body_integrals, molecule.two_body_integrals C = molecule.canonical_orbitals S = molecule.overlap_integrals oei_ao = general_basis_change(oei_mo, C.conj().T @ S, key=(1, 0)) print(oei_ao) [[-1.18698197e+00 -1.09398249e+00 -2.90382070e-01 -5.73478152e-01 -1.91588194e-03 -7.08618226e-02 -2.34028697e-07 -1.97458486e-03 -5.37356020e-13 -1.18105831e-05 -2.88770533e-17 -1.46391008e-08] [-1.09398249e+00 -1.30863711e+00 -6.31325886e-01 -9.69723130e-01 -7.72940958e-02 -2.75295274e-01 -2.08668247e-03 -2.98813560e-02 -1.21151858e-05 -1.23417943e-03 -1.46391011e-08 -1.91822048e-05] [-2.90382070e-01 -6.31325886e-01 -1.51260669e+00 -1.30790890e+00 -3.09964749e-01 -6.50637018e-01 -1.94571033e-03 -7.66467737e-02 -2.34897055e-07 -2.06566594e-03 -5.38093501e-13 -1.21151858e-05] [-5.73478152e-01 -9.69723130e-01 -1.30790890e+00 -1.61455088e+00 -6.69270617e-01 -1.08041337e+00 -7.82781452e-02 -2.89819977e-01 -2.06566594e-03 -3.04640626e-02 -1.18105831e-05 -1.23417943e-03] [-1.91588194e-03 -7.72940958e-02 -3.09964749e-01 -6.69270617e-01 -1.61437154e+00 -1.37489989e+00 -3.14983314e-01 -6.74320764e-01 -1.94571033e-03 -7.82781452e-02 -2.34028698e-07 -2.08668247e-03] [-7.08618226e-02 -2.75295274e-01 -6.50637018e-01 -1.08041337e+00 -1.37489989e+00 -1.71629957e+00 -6.74320764e-01 -1.10900856e+00 -7.66467737e-02 -2.89819977e-01 -1.97458486e-03 -2.98813560e-02] [-2.34028697e-07 -2.08668247e-03 -1.94571033e-03 -7.82781452e-02 -3.14983314e-01 -6.74320764e-01 -1.61437154e+00 -1.37489989e+00 -3.09964749e-01 -6.69270617e-01 -1.91588194e-03 -7.72940958e-02] [-1.97458486e-03 -2.98813560e-02 -7.66467737e-02 -2.89819977e-01 -6.74320764e-01 -1.10900856e+00 -1.37489989e+00 -1.71629957e+00 -6.50637018e-01 -1.08041337e+00 -7.08618226e-02 -2.75295274e-01] [-5.37305386e-13 -1.21151858e-05 -2.34897055e-07 -2.06566594e-03 -1.94571033e-03 -7.66467737e-02 -3.09964749e-01 -6.50637018e-01 -1.51260669e+00 -1.30790890e+00 -2.90382070e-01 -6.31325886e-01] [-1.18105831e-05 -1.23417943e-03 -2.06566594e-03 -3.04640626e-02 -7.82781452e-02 -2.89819977e-01 -6.69270617e-01 -1.08041337e+00 -1.30790890e+00 -1.61455088e+00 -5.73478152e-01 -9.69723130e-01] [-4.22430877e-18 -1.46391011e-08 -5.38052568e-13 -1.18105831e-05 -2.34028698e-07 -1.97458486e-03 -1.91588194e-03 -7.08618226e-02 -2.90382070e-01 -5.73478152e-01 -1.18698197e+00 -1.09398249e+00] [-1.46391007e-08 -1.91822048e-05 -1.21151858e-05 -1.23417943e-03 -2.08668247e-03 -2.98813560e-02 -7.72940958e-02 -2.75295274e-01 -6.31325886e-01 -9.69723130e-01 -1.09398249e+00 -1.30863711e+00]] print(oei_mo) [[-1.87432470e+00 6.66718524e-16 -1.16409641e-01 -6.69781866e-16 -6.15072095e-02 8.64743077e-16 -1.25730762e-01 -9.82518280e-15 -5.89306300e-02 1.38904150e-15 2.71517033e-03 2.25766247e-15] [ 6.95913442e-16 -1.69304399e+00 3.29044146e-16 1.65551295e-01 7.57973688e-17 -4.41326519e-02 -5.52283445e-15 1.00494584e-01 -5.26451395e-15 -8.00969374e-02 9.95699260e-16 6.99057737e-03] [-1.16409641e-01 4.14669579e-16 -1.61481536e+00 -1.08419011e-16 1.42976433e-01 -1.22919674e-15 1.99568166e-02 -4.13016509e-16 -9.93300277e-02 3.68449433e-15 -8.38901334e-02 1.91177741e-15] [-1.07379547e-15 1.65551295e-01 -3.34502489e-17 -1.47182180e+00 -1.20745372e-15 -1.55554498e-01 -4.18991148e-15 6.81490634e-02 2.45799431e-15 1.47404734e-01 2.52356142e-15 4.83499815e-02] [-6.15072095e-02 -7.29409557e-18 1.42976433e-01 -1.11211777e-15 -1.29158710e+00 1.30133173e-15 5.71957393e-02 -2.40643206e-15 -1.32455830e-01 2.13733561e-15 1.56350662e-01 -1.29223941e-15] [ 1.99412076e-16 -4.41326519e-02 -1.29309921e-15 -1.55554498e-01 9.01102582e-16 -1.24806947e+00 1.00165479e-14 -1.25035099e-01 7.63654422e-16 -1.02022935e-01 3.14332314e-15 2.06045942e-01] [-1.25730762e-01 -5.56111086e-15 1.99568166e-02 -4.32524942e-15 5.71957393e-02 9.92538097e-15 -5.80091614e-01 -1.39709061e-14 -1.60790676e-01 -1.37441008e-15 -2.49740453e-02 -1.64777825e-15] [-9.76385997e-15 1.00494584e-01 -4.71473119e-16 6.81490634e-02 -2.41686844e-15 -1.25035099e-01 -1.39638608e-14 -4.13964503e-01 -9.35982132e-15 9.28605333e-02 4.14675110e-16 4.59666718e-02] [-5.89306300e-02 -5.20010038e-15 -9.93300277e-02 2.46246111e-15 -1.32455830e-01 7.49471803e-16 -1.60790676e-01 -9.26165761e-15 -4.68340636e-01 -5.90169813e-15 -3.67279868e-02 -3.61470632e-16] [ 1.15404347e-15 -8.00969374e-02 3.75428456e-15 1.47404734e-01 2.23782088e-15 -1.02022935e-01 -1.52222351e-15 9.28605333e-02 -5.75039805e-15 -5.21989869e-01 1.47588259e-15 -3.96033476e-02] [ 2.71517033e-03 8.03828408e-16 -8.38901334e-02 2.79715751e-15 1.56350662e-01 3.01522786e-15 -2.49740453e-02 5.63393019e-16 -3.67279868e-02 1.74880181e-15 -5.04870445e-01 9.98429008e-16] [ 9.88371921e-16 6.99057737e-03 1.65254921e-15 4.83499815e-02 -1.51022740e-15 2.06045942e-01 -1.11542008e-15 4.59666718e-02 -3.14064236e-16 -3.96033476e-02 1.84406451e-15 -4.15306461e-01]] # Use pyscf to get atomic integrals and compare to transformed integrals from above pyscf_mol = molecule._pyscf_data['mol'] t = pyscf_mol.intor('int1e_kin') v = pyscf_mol.intor('int1e_nuc') hcore = t + v assert np.allclose(hcore, oei_ao) The two-electron integrals can also be acquired from the pyscf_mol object or we can use the general_basis_change to transform the two-electron integrals back into the AO basis. # Transform the two-electron integrals tei_ao = general_basis_change(tei_mo, C.conj().T @ S, key=(1, 1, 0, 0)) # re-ordering for chem->physics storage of the integrals eri_ao = np.einsum('ijkl->iklj', pyscf_mol.intor('int2e', aosym='s1')) assert np.allclose(tei_ao, eri_ao) assert not np.allclose(tei_ao, tei_mo) We also provide a function in recirq.hfvqe.molecular_data.molecular_data_construction that uses psi4 to generate atomic integrals for the HF-VQE study. Once the atomic orbital integrals are obtained we can perform the first step in setting up the HF-VQE experiment. This involes transforming the integrals to the core-orbital basis and building an RestrictedHartreeFockObjective. # diagonalize the AO-core Hamiltonian _, X = scipy.linalg.eigh(oei_ao, S) obi = general_basis_change(oei_ao, X, (1, 0)) tbi = np.einsum('psqr', general_basis_change(pyscf_mol.intor('int2e', aosym='s1'), X, (1, 0, 1, 0))) molecular_hamiltonian = generate_hamiltonian(obi, tbi, molecule.nuclear_repulsion) rhf_objective = RestrictedHartreeFockObjective(molecular_hamiltonian, molecule.n_electrons) To get initial parameters we can simulate the Hartree-Fock experiment which is performing variational-Hartree-Fock theory. from recirq.hfvqe.gradient_hf import rhf_minimization, rhf_func_generator # Uses conjugate gradient to solve non-linear hartree-fock functional: scipy_result = rhf_minimization(rhf_objective, verbose=True) Optimization terminated successfully. Current function value: -3.102591 Iterations: 12 Function evaluations: 25 Gradient evaluations: 25 print(molecule.hf_energy, scipy_result.fun) -3.1025910099208893 -3.102591009902639 print(\"Initial Parameters for HF-VQE Study \", scipy_result.x) Initial Parameters for HF-VQE Study [ 7.80281820e-20 4.73763008e-01 5.54525134e-20 -1.36102259e-02 2.95605222e-20 4.44832962e-01 6.22723080e-20 -2.59144562e-01 -6.01611435e-20 -1.17062375e-01 3.51187286e-21 -7.61172517e-03 -5.52147651e-20 -9.47442448e-02 2.38886202e-20 -2.71237052e-04 5.51579508e-20 -7.30836704e-02 -3.29682856e-19 4.10271133e-02 1.12879833e-19 -4.52955415e-03 -4.03326433e-21 -8.54284651e-02 -9.54943477e-20 -4.71103578e-02 1.85331761e-20] # Explicitly build kappa matrix from recirq.hfvqe.circuits import rhf_params_to_matrix import matplotlib.pyplot as plt kappa = rhf_params_to_matrix(scipy_result.x, len(rhf_objective.occ) + len(rhf_objective.virt), rhf_objective.occ, rhf_objective.virt) plt.imshow(kappa) plt.colorbar() <matplotlib.colorbar.Colorbar at 0x7fb410077e50> Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-12-15 UTC.",
    "url": "https://quantumai.google/cirq/experiments/hfvqe/molecular_data",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 1427,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:48.452431"
  },
  {
    "id": "cirq_-2991189101782697913_0",
    "title": "Toric Code \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Toric Code The toric code is an \"instant classic\" model of interacting qubits on a 2D lattice first proposed by Alexei Kitaev in 1997 ( A. Y. Kitaev, Ann. Phys. 303, 2\u201330 (2003) ). In K. J. Satzinger et al., Science 374 6572, 1237-1241 (2021) , we create toric code eigenstates on our quantum processor and explore their essential topological properties: long-range entanglement, anyonic excitations, and locally-indistinguishable degenerate states used as logical qubits. In the following example, we focus on understanding and creating a toric code ground state. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/toric_code",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 144,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:56.150157"
  },
  {
    "id": "cirq_-2308642632965611189_0",
    "title": "Build a circuit \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Build Circuits Quantum circuits and how to create them. Qubits The quantum bit data structure. Gates and Operations Quantum gates to apply to qubits in a circuit. Custom gates Create your own gates with unitaries or decomposition. Import/export circuits Importing or exporting circuits into/out of Cirq. Operators Unitary operators, measurements, and noise channels. Observables and PauliStrings Build and measure observables from sums and products of Pauli operators. Qudits Qutrits and higher-dimensional quantum systems. Protocols Magic methods supported by Cirq's classes. Tools ecosystem External tools for circuit construction. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-04-09 UTC.",
    "url": "https://quantumai.google/cirq/build",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 142,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:57.636039"
  },
  {
    "id": "cirq_-3335326836448822964_0",
    "title": "Research experiments with ReCirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Research experiments with ReCirq In addition to software for building and testing circuits (Cirq), we have a library of research experiments using Cirq -- ReCirq! This repository contains code for our flagship experiments, enabling you to reproduce and extend cutting edge quantum computing research. Quantum researchers For quantum researcher developing world class NISQ experiments, ReCirq provides the template for your future experiments. Experiments such as QAOA and HFVQE provide a template for performing variational algorithms demonstrating the iteration between data collection and circuit parameter adjustment. Other experiments such as the Fermi-Hubbard experiment can be used as a template for exploring dynamics of condensed matter physics with sophisticated calibration techniques. If you are learning quantum computing, try out the tutorials and familiarize yourself with the experiments. While these experiments are more complicated than some example introductory algorithms found in a quantum computing textbook, if you put in the effort to understand them you will be on the cutting edge of experimental quantum computing! The code documented here was used to produce high impact publications. How to use this code There are many ways you can use ReCirq. One path is as follows: Pick an experiment that most closely matches your interest. Read the paper. Pay careful attention to the error mitigation and calibration techniques used in the experiment to maximize performance. Go through the tutorial of each experiment. It will give you an overview of how the experiment actually works. Try out the tutorial either on your simulators or actual quantum computers. Pay attention to the dependencies of the experiments. This includes Cirq, libraries like OpenFermion, and qsim. Read the guide to learn about best practices for building up your own experiment. Go build your own experiment. If it is cutting edge, please contribute back to ReCirq! Contributing to ReCirq We hope ReCirq will become the go-to repository for cutting edge NISQ experiments. By contributing experiments or modifications to ReCirq, your research will be exposed to quantum researchers around the world to reproduce and extend your results. Contributed documentation and tutorials will be used by teachers in quantum information science to train the next generation of students. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/research",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 412,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:57:59.391611"
  },
  {
    "id": "cirq_-6473755159805113263_0",
    "title": "End-to-End Example \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments End-to-End Example We learned in the high-level notebook how to setup the quantum side of the calculation, which involves specifying a Hamiltonian, defining a trial wavefunction ansatz before performing shadow tomography to extract the AFQMC trial wavefunction. In this example, we will repeat these steps again for the case of H4 which was studied in the paper. Then we will outline how to interface the output of the quantum half of the calculation with ipie to perform AFQMC with the quantum trial wavefunction. Setup First install recirq: try: import recirq except ImportError: %pip install git+https://github.com/quantumlib/ReCirq Define an SCF Job We first setup a PyscfHamiltonianParams object which defines the SCF job we will run using pyscf. Here we are simulation H4 in the (minimal) sto-3g basis. from recirq.qcqmc.hamiltonian import PyscfHamiltonianParams, HamiltonianData pyscf_params = PyscfHamiltonianParams( name=\"TEST_square_H4\", n_orb=4, n_elec=4, geometry=((\"H\", (0, 0, 0)), (\"H\", (0, 0, 1.23)), (\"H\", (1.23, 0, 0)), (\"H\", (1.23, 0, 1.23))), basis=\"sto3g\", multiplicity=1, charge=0, save_chkfile=True, overwrite_chk_file=True, ) pyscf_hamiltonian = HamiltonianData.build_hamiltonian_from_pyscf(pyscf_params) chk_path = pyscf_params.base_path.with_suffix(\".chk\") Build Perfect Pairing Wavefunction Next we build a perfect pairing wavefunction based upon our pyscf_params import numpy as np from recirq.qcqmc.trial_wf import ( PerfectPairingPlusTrialWavefunctionParams, TrialWavefunctionData ) pp_params = PerfectPairingPlusTrialWavefunctionParams( 'pp_plus_test', hamiltonian_params=pyscf_params, heuristic_layers=tuple(), do_pp=True, restricted=False, initial_orbital_rotation=None, initial_two_body_qchem_amplitudes=np.asarray([0.3, 0.4]), do_optimization=True, use_fast_gradients=True ) trial_wf = TrialWavefunctionData.build_pp_plus_trial_from_dependencies( pp_params, dependencies={pyscf_params: pyscf_hamiltonian}, do_print=True ) Building Trial Wavefunction Optimization restart 0 energy (-0.9036540062626459+0j), max|grad| 0.4055778794357425 energy (-1.2562368588436836+0j), max|grad| 0.43313791305139393 .energy (-1.5679374247963844+7.888609052210118e-31j), max|grad| 0.18111782362662004 .energy (-1.6837246665467358+0j), max|grad| 0.17092036783044715 .energy (-1.6110669589234181+0j), max|grad| 0.24059875134725753 energy (-1.7390726256610076-7.888609052210118e-31j), max|grad| 0.18367926366417667 .energy (-1.7998087490345682-1.5777218104420236e-30j), max|grad| 0.1517612491290922 .energy (-1.85760482706117+0j), max|grad| 0.11159886713967626 .energy (-1.8729342965890314+7.888609052210118e-31j), max|grad| 0.1216392843358692 .energy (-1.8833608675750924-3.944304526105059e-31j), max|grad| 0.04744855668934871 .energy (-1.8915925472404727+0j), max|grad| 0.043464113681721546 .energy (-1.896150318701043+0j), max|grad| 0.06268423948369739 .energy (-1.8984417758128584+0j), max|grad| 0.029698836620385877 .energy (-1.8994746204928887+1.5777218104420236e-30j), max|grad| 0.016201854102027454 .energy (-1.899957201496921+0j), max|grad| 0.013304133970140785 .energy (-1.9008511510081867+2.341930812374879e-31j), max|grad| 0.013590539661908211 .energy (-1.9024862069591846-1.9721522630525295e-31j), max|grad| 0.01776285826411418 .energy (-1.9052419928245046+7.888609052210118e-31j), max|grad| 0.03273195822714455 .energy (-1.9077304802944566-1.5777218104420236e-30j), max|grad| 0.06430668054864518 .energy (-1.9109588448091852-1.5777218104420236e-30j), max|grad| 0.0456020728724604 .energy (-1.9167439088358718+1.5777218104420236e-30j), max|grad| 0.030847960479975674 .energy (-1.9245237883922313+9.860761315262648e-32j), max|grad| 0.05417187731080087 .energy (-1.9296292702179798+5.9164567891575885e-31j), max|grad| 0.025592029356486093 .energy (-1.9311761633082778-3.944304526105059e-31j), max|grad| 0.029638055385661645 .energy (-1.933215914812636+3.1554436208840472e-30j), max|grad| 0.01621076088582836 .energy (-1.9334865022840528+0j), max|grad| 0.05061349409744201 energy (-1.9343719716192522+0j), max|grad| 0.01912404951615153 .energy (-1.9355257556500183-1.5777218104420236e-30j), max|grad| 0.015830794257891478 .energy (-1.935838772234188+0j), max|grad| 0.0037725673337152825 .energy (-1.9359314607080256+1.1832913578315177e-30j), max|grad| 0.003200160407726419 .energy (-1.935949268389063+1.5777218104420236e-30j), max|grad| 0.0018919063116268726 .energy (-1.9359611849206226-1.5777218104420236e-30j), max|grad| 0.0015724061558558594 .energy (-1.9359718407742434-1.5777218104420236e-30j), max|grad| 0.002200219431710977 .energy (-1.9359908818544875+0j), max|grad| 0.0027990086027876444 .energy (-1.9360254775825618-3.944304526105059e-31j), max|grad| 0.0034162005029662727 .energy (-1.9360872529493829+7.888609052210118e-31j), max|grad| 0.004092624834665993 .energy (-1.9361891445655823-7.888609052210118e-31j), max|grad| 0.004789327611432818 .energy (-1.9363129739874951+7.888609052210118e-31j), max|grad| 0.006438470215631584 .energy (-1.936409828806081-6.902532920683853e-31j), max|grad| 0.004456081295501152 .energy (-1.9365429132704115+4.930380657631324e-32j), max|grad| 0.0021233065187949984 .energy (-1.9365688598431472+1.5777218104420236e-30j), max|grad| 0.0005844751564333227 .energy (-1.936569194425596+0j), max|grad| 0.0006212049182390798 .energy (-1.9365697065818228-1.9721522630525295e-31j), max|grad| 0.000396322023845012 .energy (-1.9365703915500676-1.5777218104420236e-30j), max|grad| 0.00035847268845497156 .energy (-1.9365715608439755+7.888609052210118e-31j), max|grad| 0.0005875338345701087 .energy (-1.9365736450508706-7.888609052210118e-31j), max|grad| 0.0009275529494447987 .energy (-1.936577364856836+0j), max|grad| 0.001290087498159842 .energy (-1.9365837600802127+1.5777218104420236e-30j), max|grad| 0.0016835767447708205 .energy (-1.9365936870844989+7.888609052210118e-31j), max|grad| 0.002066433013532154 .energy (-1.9366057394306582+3.944304526105059e-31j), max|grad| 0.002171053716593041 .energy (-1.9366157496909846+0j), max|grad| 0.0015707204870063496 .energy (-1.9366194954891824+1.5777218104420236e-30j), max|grad| 0.00036139858612830895 .energy (-1.9366196680654788+1.5777218104420236e-30j), max|grad| 0.00011315080525932123 .energy (-1.9366197270827676-1.5777218104420236e-30j), max|grad| 6.430515389602392e-05 .energy (-1.9366197458722914-3.944304526105059e-31j), max|grad| 7.331252496905818e-05 .energy (-1.9366197673277403+7.888609052210118e-31j), max|grad| 4.9780835403821e-05 .energy (-1.9366197715277558-7.888609052210118e-31j), max|grad| 2.5640979216920167e-05 .energy (-1.9366197732374273+4.733165431326071e-30j), max|grad| 2.658368168230504e-05 .energy (-1.9366197751441474+0j), max|grad| 2.8157268404369024e-05 .energy (-1.9366197785809476+1.5777218104420236e-30j), max|grad| 4.345122893493406e-05 .energy (-1.93661978495203+7.888609052210118e-31j), max|grad| 6.284515144451495e-05 .energy (-1.936619796829076+3.944304526105059e-31j), max|grad| 8.776692882146378e-05 .energy (-1.9366198187972676-3.1554436208840472e-30j), max|grad| 0.00012194120079247437 .energy (-1.9366198585693368-3.1554436208840472e-30j), max|grad| 0.0001701334299161085 .energy (-1.9366199276036058+1.5777218104420236e-30j), max|grad| 0.0002373872242281216 .energy (-1.9366200380462466+0j), max|grad| 0.00032367056761343577 .energy (-1.9366201880972573+0j), max|grad| 0.0003985907193036062 .energy (-1.9366203391133157+0j), max|grad| 0.00038025048350678084 .energy (-1.9366205555842493-3.1554436208840472e-30j), max|grad| 0.00023727562931326692 .energy (-1.93662064426736+3.944304526105059e-31j), max|grad| 6.282714761231305e-05 .energy (-1.9366206498974865-3.944304526105059e-31j), max|grad| 1.2028184630336895e-05 .energy (-1.936620650696911-4.733165431326071e-30j), max|grad| 3.6026151661679147e-06 . message: Optimization terminated successfully. success: True status: 0 fun: -1.936620650696911 x: [ 1.529e+00 1.601e+00 ... 1.504e+00 4.454e-01] nit: 69 jac: [ 4.615e-07 -1.193e-06 ... 1.574e-07 -8.279e-08] hess_inv: [[ 3.209e-01 -1.605e-02 ... -1.289e-01 3.218e-01] [-1.605e-02 2.131e+00 ... -1.185e+00 2.527e+00] ... [-1.289e-01 -1.185e+00 ... 6.735e+01 -1.023e+02] [ 3.218e-01 2.527e+00 ... -1.023e+02 1.811e+02]] nfev: 72 njev: 72 Hartree-Fock Energy: (-1.779243269890757+0j) Sector N = 4 : S_z = 0 a'0011'b'0011' (1+0j) -------------------------------------------------------------------------------- FCI Energy: -1.9695121652162788 -------------------------------------------------------------------------------- message: Optimization terminated successfully. success: True status: 0 fun: -1.936620650696911 x: [ 1.529e+00 1.601e+00 ... 1.504e+00 4.454e-01] nit: 69 jac: [ 4.615e-07 -1.193e-06 ... 1.574e-07 -8.279e-08] hess_inv: [[ 3.209e-01 -1.605e-02 ... -1.289e-01 3.218e-01] [-1.605e-02 2.131e+00 ... -1.185e+00 2.527e+00] ... [-1.289e-01 -1.185e+00 ... 6.735e+01 -1.023e+02] [ 3.218e-01 2.527e+00 ... -1.023e+02 1.811e+02]] nfev: 72 njev: 72 -------------------------------------------------------------------------------- Ansatz Energy: -1.936620650696911 Sector N = 4 : S_z = 0 a'0011'b'0011' (-0.46387401399583944-1.6169791200448813e-15j) a'0011'b'0101' (-0.49319604867937417-1.4418533641341602e-15j) a'0011'b'1010' (0.09453242557421507+2.408351838269207e-16j) a'0011'b'1100' (0.10050769884960999+3.006492624302304e-16j) a'0101'b'0011' (0.4932121133952673+1.240300180269105e-15j) a'0101'b'0101' (0.4638724215893809+9.917773254129042e-16j) a'0101'b'1010' (-0.10051252390245798-1.836909530733566e-16j) a'0101'b'1100' (-0.09453345932512375-2.362883109660596e-16j) a'1010'b'0011' (-0.09453244426471545-3.956524777942727e-16j) a'1010'b'0101' (-0.10050753163472044-4.301436594064678e-16j) a'1010'b'1010' (0.040495383211038925+1.1647041837925531e-16j) a'1010'b'1100' (0.043055478757829016+1.3775127414607236e-16j) a'1100'b'0011' (0.10051091749766967+4.610840789037729e-16j) a'1100'b'0101' (0.0945318069870978+4.036484688163533e-16j) a'1100'b'1010' (-0.04305727968792324-1.1641620827063104e-16j) a'1100'b'1100' (-0.04049580296637009-1.3711430536973712e-16j) Basis Rotation Matrix: [[-0.0019289 +0.j 0. +0.j 0.20844642+0.j 0. +0.j 0.97799642+0.j 0. +0.j -0.00832942+0.j 0. +0.j] [ 0. +0.j -0.0017375 +0.j 0. +0.j -0.20844971+0.j 0. +0.j -0.97801093+0.j 0. +0.j -0.00635044+0.j] [-0.70709082+0.j 0. +0.j -0.0055334 +0.j 0. +0.j -0.00623724+0.j 0. +0.j -0.70707358+0.j 0. +0.j] [ 0. +0.j -0.70708361+0.j 0. +0.j 0.00480579+0.j 0. +0.j 0.00482323+0.j 0. +0.j -0.70709717+0.j] [-0.70707664+0.j 0. +0.j -0.00587992+0.j 0. +0.j 0.0058808 +0.j 0. +0.j 0.70708802+0.j 0. +0.j] [ 0. +0.j 0.70709486+0.j 0. +0.j -0.00514814+0.j 0. +0.j 0.00443232+0.j 0. +0.j -0.70708607+0.j] [-0.00784059+0.j 0. +0.j 0.97800046+0.j 0. +0.j -0.20844549+0.j 0. +0.j 0.0020259 +0.j 0. +0.j] [ 0. +0.j 0.00682626+0.j 0. +0.j 0.97800773+0.j 0. +0.j -0.20845076+0.j 0. +0.j -0.00160098+0.j]] Two Body Rotation Parameters: [1.52877842 1.60143649] We can comare the wavefunction of the optimized ansatz to the exact ground state energy: print(f\"Trial wavefunction energy: {trial_wf.ansatz_energy}\") print(f\"Exact ground state energy: {trial_wf.fci_energy}\") Trial wavefunction energy: -1.9366206506969077 Exact ground state energy: -1.9695121652162788 Next, we build an experiment which will combine the trial wavefunction circuit with that required for shadow tomography. In this case the experiment will be simulated using a statevector simulator. from recirq.qcqmc.blueprint import BlueprintParamsTrialWf, BlueprintData from recirq.qcqmc.experiment import SimulatedExperimentParams, ExperimentData blueprint_params = BlueprintParamsTrialWf( name=\"blueprint_test_medium\", trial_wf_params=pp_params, n_cliffords=100, qubit_partition=(tuple(qubit for qubit in pp_params.qubits_jordan_wigner_ordered),), seed=1, ) blueprint = BlueprintData.build_blueprint_from_dependencies(blueprint_params, dependencies={pp_params: trial_wf}) simulated_experiment_params = SimulatedExperimentParams( name=\"test_1\", blueprint_params=blueprint.params, noise_model_name=\"None\", noise_model_params=(0,), n_samples_per_clifford=31, seed=1, ) experiment = ExperimentData.build_experiment_from_dependencies( params=simulated_experiment_params, dependencies={blueprint.params: blueprint} ) The experimental output is post-processed to extract the reconstructed trial wavefunction: from typing import Dict from recirq.qcqmc.data import Params, Data from recirq.qcqmc.analysis import OverlapAnalysisData, OverlapAnalysisParams analysis_params = OverlapAnalysisParams( \"TEST_analysis\", experiment_params=experiment.params, k_to_calculate=(1,) ) all_dependencies: Dict[Params, Data] = { pyscf_params: pyscf_hamiltonian, pp_params: trial_wf, blueprint_params: blueprint, simulated_experiment_params: experiment, } analysis = OverlapAnalysisData.build_analysis_from_dependencies( analysis_params, dependencies=all_dependencies ) Finally, we save the wavefunction in a format that is acceptable for ipie. from recirq.qcqmc.convert_to_ipie import save_wavefunction_for_ipie ipie_data = save_wavefunction_for_ipie( hamiltonian_data=pyscf_hamiltonian, trial_wf_data=trial_wf, overlap_analysis_data=analysis, do_print=False ) print(f\"Reconstructed shadow wavefunction energy: {ipie_data.variational_energy}\") print(f\"Ideal trial wavefunction energy: {trial_wf.ansatz_energy}\") print(f\"FCI energy: {trial_wf.fci_energy}\") Reconstructed shadow wavefunction energy: -1.8771197609628356 Ideal trial wavefunction energy: -1.9366206506969077 FCI energy: -1.9695121652162788 Run AFQMC Now that we have built our quantum wavefunction, we can use it as a trial wavefunction in an AFQMC simulation. First, we need to build a factorized Hamiltonian which is required for AFQMC. In particular, we require the three-index Cholesky tensor (ham.chol below) which satisfies \\[ (pq|rs) = \\sum_X L_{pq}^X L_{rs}^X. \\] from ipie.systems.generic import Generic from ipie.utils.from_pyscf import generate_hamiltonian_from_chk num_elec = (pyscf_params.n_elec // 2,) * 2 system = Generic(num_elec) chk_path = pyscf_params.base_path.with_suffix(\".chk\") ham = generate_hamiltonian_from_chk(str(chk_path)) assert ham.H1.shape == (2, pyscf_params.n_orb, pyscf_params.n_orb) assert ham.chol.shape[0] == pyscf_params.n_orb * pyscf_params.n_orb Next, we need to build a trial wavefunction from quantum wavefunction. In practice, the quantum trial is expanded as a linear combination of (orthogonal) Slater Determinants. Within ipie, this style of trial wavefunction is defined as a ParticleHole trial wavefunction. import h5py from ipie.trial_wavefunction.particle_hole import ParticleHole # Read quantum wavefunction from file. with h5py.File(ipie_data.path, 'r') as fh5: coeffs = fh5[\"coeffs_rotated\"][:] occa = fh5[\"occa_rotated\"][:] occb = fh5[\"occb_rotated\"][:] wfn = ParticleHole((coeffs, occa, occb), num_elec, pyscf_params.n_orb) wfn.half_rotate(ham) wfn.calculate_energy(system, ham) print(f\"Trial wavefunction variational energy in ipie: {wfn.energy.real}\") assert np.isclose(wfn.energy.real, ipie_data.variational_energy) Trial wavefunction variational energy in ipie: -1.8771197609628336 Note that the variational energy might differ slightly from the result compute from the previous section. This is because the cholesky factorization uses a threshold of \\(1\\times10^{-5}\\) a stopping criteria for convergence. Reducing the parameter chol_cut in generate_hamiltonian_from_chk will yield better agreement. At this point, we are ready to run AFQMC. We need to build an AFQMC driver class which takes as input the factorized Hamiltonian and our ParticleHole trial wavefunction. from ipie.qmc.afqmc import AFQMC qmc_driver = AFQMC.build(num_elec, ham, wfn, num_blocks=300, num_walkers=50, seed=7) # random seed is 7 from recirq.qcqmc.config import OUTDIRS import pathlib ipie_path = pathlib.Path(pyscf_hamiltonian.params.path_prefix + OUTDIRS.DEFAULT_QMC_DIRECTORY) if not ipie_path.is_dir(): ipie_path.mkdir(parents=True) qmc_driver.run(estimator_filename=f'{ipie_path}/estimates.h5') # Using pair_branch population control algorithm. # target weight is 50 # total weight is 50 # ipie version: 0.7.1 # Calculation uuid: 24501ff2-ec50-11ef-b8b6-4735a95cd5b3. # Approximate memory available per node: 117.9093 GB. # Running on 1 MPI rank. # Root processor name: kokoro-gcp-ubuntu-prod-2033379579 # Python interpreter: 3.10.16 (main, Dec 4 2024, 08:53:37) [GCC 9.4.0] # Using numpy v1.26.4 from: /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/numpy. # - BLAS lib: openblas64 # - BLAS version: 0.3.23.dev # - BLAS include directory: /usr/local/lib # Using scipy v1.15.1 from: /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/scipy. # Using h5py v3.12.1 from: /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/h5py. # Package mpi4py not found. # Package cupy not found. # MPI communicator : <class 'ipie.qmc.comm.FakeComm'> # Available memory on the node is 117.909 GB # Setting up estimator object. # Writing estimator data to data/afqmc/estimates.h5 # Finished settting up estimator object. Block Weight WeightFactor HybridEnergy ENumer EDenom ETotal E1Body E2Body 0 5.0000000000000000e+01 5.0000000000000000e+01 0.0000000000000000e+00 -9.6486304211488687e+01 5.0000000000000000e+01 -1.9297260842297739e+00 -4.3439319178107789e+00 2.4142058335810050e+00 1 5.0244433021531144e+01 5.0518752257436617e+01 -5.1480637820850661e-01 -9.6652905726715318e+01 4.9999999999999993e+01 -1.9330581145343066e+00 -4.3381857300470426e+00 2.4051276155127361e+00 2 4.9972807280256106e+01 5.0051684340529746e+01 -4.7661057456165529e-01 -9.7306249370556429e+01 5.0000000000000000e+01 -1.9461249874111286e+00 -4.3279047904644310e+00 2.3817798030533019e+00 3 5.0011569797916898e+01 5.0004270514043455e+01 -5.1187080315422628e-01 -9.7466683634549312e+01 5.0000000000000007e+01 -1.9493336726909860e+00 -4.3253085724128253e+00 2.3759748997218391e+00 4 4.9980812287753643e+01 4.9970432248304306e+01 -4.9087031780061963e-01 -9.7093058372178888e+01 4.9999999999999993e+01 -1.9418611674435782e+00 -4.3194201294604841e+00 2.3775589620169058e+00 5 4.9994801257977485e+01 4.9974671017998880e+01 -4.8858192683037621e-01 -9.7291505142812056e+01 4.9999999999999993e+01 -1.9458301028562415e+00 -4.3163812727238051e+00 2.3705511698675630e+00 6 4.9997714843681436e+01 4.9982897100679331e+01 -4.9093194610230290e-01 -9.7702570383522300e+01 5.0000000000000000e+01 -1.9540514076704460e+00 -4.3105616139856906e+00 2.3565102063152454e+00 7 5.0007412003784005e+01 5.0010881902570027e+01 -5.2110272755060705e-01 -9.7920892212579133e+01 5.0000000000000000e+01 -1.9584178442515827e+00 -4.3055738970673403e+00 2.3471560528157580e+00 8 4.9990340249788787e+01 4.9987359463236125e+01 -5.0874833940731967e-01 -9.7939553411516002e+01 5.0000000000000007e+01 -1.9587910682303198e+00 -4.3113561595155634e+00 2.3525650912852432e+00 9 4.9989284850478626e+01 4.9981113754918660e+01 -5.0401472905590616e-01 -9.8272343990656182e+01 5.0000000000000000e+01 -1.9654468798131237e+00 -4.3059263760891238e+00 2.3404794962759996e+00 10 5.0006358178325613e+01 5.0000626303982173e+01 -5.2611796729390081e-01 -9.7631184134596992e+01 5.0000000000000007e+01 -1.9526236826919396e+00 -4.3057905290823317e+00 2.3531668463903919e+00 11 4.9980080208319905e+01 4.9964096605758314e+01 -5.0367743461129999e-01 -9.8371913091738435e+01 5.0000000000000014e+01 -1.9674382618347681e+00 -4.3085366075498319e+00 2.3410983457150643e+00 12 4.9999931899736431e+01 4.9993907539921111e+01 -5.1187500571334732e-01 -9.8353383264582064e+01 4.9999999999999993e+01 -1.9670676652916417e+00 -4.3057810859607724e+00 2.3387134206691309e+00 13 5.0002668689623292e+01 5.0001259638211366e+01 -5.3646223591918407e-01 -9.9431472724407385e+01 5.0000000000000007e+01 -1.9886294544881473e+00 -4.3027794803545261e+00 2.3141500258663790e+00 14 4.9998826084918576e+01 5.0010955581098187e+01 -5.4435478943421745e-01 -9.9410765714284040e+01 4.9999999999999993e+01 -1.9882153142856811e+00 -4.3028827996241441e+00 2.3146674853384623e+00 15 4.9982614072712160e+01 4.9952091922242744e+01 -5.2096698062977853e-01 -9.9252527043375579e+01 5.0000000000000007e+01 -1.9850505408675112e+00 -4.2965557939014003e+00 2.3115052530338893e+00 16 4.9990789919252592e+01 4.9973016057325026e+01 -5.1743883837819094e-01 -9.8058542762004521e+01 4.9999999999999993e+01 -1.9611708552400908e+00 -4.3036254207827396e+00 2.3424545655426487e+00 17 4.9993406140504192e+01 4.9998093031715761e+01 -5.2068207001072209e-01 -9.7810171641123091e+01 4.9999999999999993e+01 -1.9562034328224622e+00 -4.3021554895597234e+00 2.3459520567372607e+00 18 4.9975149496412257e+01 4.9950113481249439e+01 -4.9005677110747670e-01 -9.7999026551000071e+01 5.0000000000000000e+01 -1.9599805310200014e+00 -4.3077444548056736e+00 2.3477639237856724e+00 19 5.0005774984390492e+01 5.0002251193645279e+01 -5.1313804176700895e-01 -9.8568097918989423e+01 5.0000000000000000e+01 -1.9713619583797886e+00 -4.3020695034150904e+00 2.3307075450353016e+00 20 4.9994172117780231e+01 4.9998603398896165e+01 -5.2135283528873477e-01 -9.9303299398269175e+01 5.0000000000000000e+01 -1.9860659879653835e+00 -4.3025271929278661e+00 2.3164612049624824e+00 21 4.9995540539900588e+01 4.9983850213668156e+01 -5.2500069320609266e-01 -9.8654834587960195e+01 4.9999999999999986e+01 -1.9730966917592045e+00 -4.2995162044321633e+00 2.3264195126729588e+00 22 4.9992854443426523e+01 4.9982982269585399e+01 -5.1687921128049441e-01 -9.9144502633874282e+01 4.9999999999999986e+01 -1.9828900526774864e+00 -4.3027621791799229e+00 2.3198721265024353e+00 23 5.0009319441501511e+01 5.0022835222998069e+01 -5.5309663419454003e-01 -9.9066684339159181e+01 5.0000000000000007e+01 -1.9813336867831832e+00 -4.2974451121122232e+00 2.3161114253290394e+00 24 4.9980093422969389e+01 4.9961797472414432e+01 -5.2516615738122541e-01 -9.8614704176758536e+01 5.0000000000000000e+01 -1.9722940835351708e+00 -4.2958739873981608e+00 2.3235799038629903e+00 25 4.9994903683055909e+01 4.9972682025857488e+01 -5.2523844585285329e-01 -9.9081490737931802e+01 5.0000000000000007e+01 -1.9816298147586358e+00 -4.2918535992996505e+00 2.3102237845410145e+00 26 4.9988338585218919e+01 4.9976526952501828e+01 -5.0861014543042593e-01 -9.8109548255270695e+01 5.0000000000000007e+01 -1.9621909651054137e+00 -4.2918645320355573e+00 2.3296735669301443e+00 27 4.9990834245715213e+01 4.9968323566239476e+01 -5.0075093856621189e-01 -9.8091356799549047e+01 5.0000000000000007e+01 -1.9618271359909807e+00 -4.3013358349746182e+00 2.3395086989836376e+00 28 4.9994738338054120e+01 4.9995865029125653e+01 -5.0860209232344544e-01 -9.8277177524773577e+01 4.9999999999999993e+01 -1.9655435504954719e+00 -4.2968221605206880e+00 2.3312786100252159e+00 29 4.9985949817529118e+01 4.9977845437993196e+01 -5.0164122061738314e-01 -9.7910038983702407e+01 5.0000000000000000e+01 -1.9582007796740482e+00 -4.2968167838148563e+00 2.3386160041408082e+00 30 4.9992088035229528e+01 4.9974992199507035e+01 -4.9642837810959883e-01 -9.7666891001829867e+01 5.0000000000000000e+01 -1.9533378200365974e+00 -4.2949670440235037e+00 2.3416292239869070e+00 31 4.9999109147124813e+01 4.9989536954869649e+01 -5.0482516571917013e-01 -9.7815204464413284e+01 4.9999999999999993e+01 -1.9563040892882662e+00 -4.2969376514416675e+00 2.3406335621534011e+00 32 4.9994153961188260e+01 4.9984604718898581e+01 -5.0661504745061636e-01 -9.7955232981519075e+01 5.0000000000000000e+01 -1.9591046596303816e+00 -4.2997153493492979e+00 2.3406106897189165e+00 33 4.9991514971757191e+01 4.9984375601409710e+01 -5.0716369047509058e-01 -9.8745105176034826e+01 4.9999999999999993e+01 -1.9749021035206968e+00 -4.3008548732694480e+00 2.3259527697487519e+00 34 5.0005343451714296e+01 5.0007976017923255e+01 -5.2625391794144383e-01 -9.8677998901312208e+01 5.0000000000000007e+01 -1.9735599780262438e+00 -4.3031445049539929e+00 2.3295845269277495e+00 35 4.9987483482277540e+01 4.9969837988977936e+01 -5.1873658001150935e-01 -9.8606628319365100e+01 4.9999999999999993e+01 -1.9721325663873024e+00 -4.2997473824171015e+00 2.3276148160297989e+00 36 5.0001187662637712e+01 4.9999520789206230e+01 -5.3305344920904607e-01 -9.8884945166772482e+01 5.0000000000000007e+01 -1.9776989033354493e+00 -4.2996832294195286e+00 2.3219843260840793e+00 37 4.9996728645946277e+01 4.9980649839976408e+01 -5.4874925857240786e-01 -9.9085777202352872e+01 5.0000000000000007e+01 -1.9817155440470571e+00 -4.3046448663738959e+00 2.3229293223268384e+00 38 4.9972114622023319e+01 4.9941646087250547e+01 -5.2003119149503718e-01 -9.8106304997623184e+01 5.0000000000000000e+01 -1.9621260999524637e+00 -4.2945608581543633e+00 2.3324347582018992e+00 39 4.9970077517419348e+01 4.9927005848964228e+01 -4.8912682424444492e-01 -9.7307242565102698e+01 5.0000000000000007e+01 -1.9461448513020536e+00 -4.2983826500019324e+00 2.3522377986998788e+00 40 4.9984798679108479e+01 4.9964407153068464e+01 -4.8364990002614527e-01 -9.7628783122446052e+01 5.0000000000000000e+01 -1.9525756624489210e+00 -4.2909079773566390e+00 2.3383323149077175e+00 41 5.0002817671269241e+01 4.9994492967876425e+01 -5.0508991806093217e-01 -9.7500963492958803e+01 5.0000000000000007e+01 -1.9500192698591758e+00 -4.2878538598001246e+00 2.3378345899409485e+00 42 4.9983261243728649e+01 4.9978116803823589e+01 -4.9634996089666183e-01 -9.8201524169693300e+01 5.0000000000000000e+01 -1.9640304833938660e+00 -4.2890164565790867e+00 2.3249859731852203e+00 43 4.9989907079234655e+01 4.9965312671317868e+01 -5.1718279776047849e-01 -9.9065492963159770e+01 5.0000000000000000e+01 -1.9813098592631955e+00 -4.2871956514628327e+00 2.3058857921996374e+00 44 4.9979733625990598e+01 4.9957198905276421e+01 -5.1111308534469380e-01 -9.9770971794708572e+01 5.0000000000000007e+01 -1.9954194358941710e+00 -4.2858514765436420e+00 2.2904320406494705e+00 45 5.0001137715694661e+01 4.9999105411951859e+01 -5.4990749244343806e-01 -9.8214313065759782e+01 5.0000000000000014e+01 -1.9642862613151950e+00 -4.2673307041698223e+00 2.3030444428546279e+00 46 4.9968303815945056e+01 4.9939032359940512e+01 -5.0597273385638297e-01 -9.7727974748325451e+01 5.0000000000000007e+01 -1.9545594949665088e+00 -4.2724118330145053e+00 2.3178523380479974e+00 47 4.9989647849689561e+01 4.9960145165255717e+01 -5.1228695517853384e-01 -9.8064320942202016e+01 5.0000000000000007e+01 -1.9612864188440400e+00 -4.2754579625824807e+00 2.3141715437384409e+00 48 4.9968121965909909e+01 4.9927904951468804e+01 -4.7888588195868059e-01 -9.8404043576266105e+01 5.0000000000000000e+01 -1.9680808715253222e+00 -4.2691965680866222e+00 2.3011156965613004e+00 49 5.0007235987386323e+01 4.9985935774013235e+01 -5.3140371844388923e-01 -9.8418368153502087e+01 5.0000000000000000e+01 -1.9683673630700418e+00 -4.2850431330789682e+00 2.3166757700089269e+00 50 4.9972003651908338e+01 4.9951637622629342e+01 -4.9688435641040990e-01 -9.7833249893577687e+01 5.0000000000000007e+01 -1.9566649978715533e+00 -4.2835571031838606e+00 2.3268921053123077e+00 51 4.9997581891458950e+01 4.9980594651541637e+01 -5.1205763859406983e-01 -9.7785148146568446e+01 5.0000000000000000e+01 -1.9557029629313689e+00 -4.2881573280947674e+00 2.3324543651633989e+00 52 4.9992032836567041e+01 4.9982206447625138e+01 -5.1074038272003275e-01 -9.8655261931102388e+01 5.0000000000000000e+01 -1.9731052386220478e+00 -4.2920465284994638e+00 2.3189412898774155e+00 53 4.9996290299352715e+01 4.9985303789574836e+01 -5.1824853011534910e-01 -9.8341451848160801e+01 4.9999999999999993e+01 -1.9668290369632164e+00 -4.2928210011798340e+00 2.3259919642166174e+00 54 4.9991606277841967e+01 4.9979729220857891e+01 -5.0951119765216268e-01 -9.8604618797892144e+01 5.0000000000000014e+01 -1.9720923759578421e+00 -4.2951650214871631e+00 2.3230726455293200e+00 55 4.9997363924449893e+01 4.9988912601915040e+01 -5.2881791551160562e-01 -9.7862401157971632e+01 5.0000000000000000e+01 -1.9572480231594327e+00 -4.2918702034661571e+00 2.3346221803067246e+00 56 4.9985359001188719e+01 4.9967422992136548e+01 -5.1410716251327826e-01 -9.7157112318081815e+01 5.0000000000000000e+01 -1.9431422463616363e+00 -4.2958252205453213e+00 2.3526829741836854e+00 57 4.9984607907566691e+01 4.9964583393484112e+01 -5.0282312721438227e-01 -9.7397841166327211e+01 4.9999999999999993e+01 -1.9479568233265445e+00 -4.2958497586594167e+00 2.3478929353328719e+00 58 4.9992629205983889e+01 4.9978066628935487e+01 -5.0730141242278537e-01 -9.7711132597477246e+01 5.0000000000000000e+01 -1.9542226519495449e+00 -4.2987761778936209e+00 2.3445535259440766e+00 59 4.9992029831262791e+01 4.9964195642612601e+01 -4.9425369437091432e-01 -9.8192915502826978e+01 4.9999999999999986e+01 -1.9638583100565403e+00 -4.3075882372768088e+00 2.3437299272202683e+00 60 4.9992138835409776e+01 4.9990209979405627e+01 -5.0508199466955339e-01 -9.8312867659532870e+01 4.9999999999999993e+01 -1.9662573531906578e+00 -4.3086170297430728e+00 2.3423596765524146e+00 61 4.9990278267527742e+01 4.9981724486243564e+01 -5.0894823246295517e-01 -9.7881327261555668e+01 5.0000000000000000e+01 -1.9576265452311135e+00 -4.3107771590713728e+00 2.3531506138402598e+00 62 4.9990243742759240e+01 4.9975161919777882e+01 -4.9921792292167005e-01 -9.7410251424034513e+01 5.0000000000000000e+01 -1.9482050284806902e+00 -4.3148717804806083e+00 2.3666667519999183e+00 63 4.9987261585729001e+01 4.9968155369514363e+01 -4.8100254978047685e-01 -9.7509913754898122e+01 4.9999999999999986e+01 -1.9501982750979632e+00 -4.3145299841647171e+00 2.3643317090667537e+00 64 4.9995055986703917e+01 4.9992379771572736e+01 -5.0256704560452503e-01 -9.7980891878746945e+01 5.0000000000000007e+01 -1.9596178375749387e+00 -4.3142900253690257e+00 2.3546721877940864e+00 65 4.9997443095928148e+01 4.9989777531757120e+01 -5.1116393336829324e-01 -9.8291606597809519e+01 5.0000000000000007e+01 -1.9658321319561900e+00 -4.3070873335425039e+00 2.3412552015863137e+00 66 4.9997759850601469e+01 4.9997938912507244e+01 -5.1665803226855200e-01 -9.8019806817668055e+01 5.0000000000000000e+01 -1.9603961363533611e+00 -4.3088209697716335e+00 2.3484248334182722e+00 67 4.9976425830372435e+01 4.9943655026514605e+01 -4.9057348761031710e-01 -9.8106318381151070e+01 4.9999999999999993e+01 -1.9621263676230218e+00 -4.3104726203983388e+00 2.3483462527753165e+00 68 5.0004814827202544e+01 4.9998180623414804e+01 -5.1222429002901415e-01 -9.8213729079976929e+01 5.0000000000000000e+01 -1.9642745815995386e+00 -4.3105461906206850e+00 2.3462716090211475e+00 69 4.9989958303432303e+01 4.9968661120834433e+01 -5.0270966010506379e-01 -9.7937576990940798e+01 5.0000000000000000e+01 -1.9587515398188160e+00 -4.3088894582066342e+00 2.3501379183878170e+00 70 4.9984101267437637e+01 4.9977032339175722e+01 -4.9663344904487972e-01 -9.7672220535982248e+01 5.0000000000000014e+01 -1.9534444107196443e+00 -4.3085630676847257e+00 2.3551186569650815e+00 71 4.9999136913758740e+01 4.9979757776361758e+01 -5.1151310031560970e-01 -9.7717293057168817e+01 5.0000000000000007e+01 -1.9543458611433759e+00 -4.3075945415828771e+00 2.3532486804395005e+00 72 4.9976509798755487e+01 4.9961477549611189e+01 -4.8509272827121908e-01 -9.7720032227446424e+01 5.0000000000000000e+01 -1.9544006445489286e+00 -4.3124202642822747e+00 2.3580196197333465e+00 73 4.9995904614658265e+01 4.9986964016028253e+01 -4.9538898545670995e-01 -9.8081181284150730e+01 4.9999999999999993e+01 -1.9616236256830151e+00 -4.3124166328848093e+00 2.3507930072017942e+00 74 4.9995004594462266e+01 4.9986202947733645e+01 -5.0127652599855088e-01 -9.7945560945456947e+01 5.0000000000000007e+01 -1.9589112189091387e+00 -4.3097052119600017e+00 2.3507939930508637e+00 75 4.9999786682311317e+01 4.9985804712706475e+01 -5.1837322288087961e-01 -9.7574870047905463e+01 5.0000000000000000e+01 -1.9514974009581094e+00 -4.3029651689624595e+00 2.3514677680043494e+00 76 4.9983923073221156e+01 4.9965023845100639e+01 -4.9615237804243345e-01 -9.7361123356454257e+01 4.9999999999999986e+01 -1.9472224671290859e+00 -4.3010404721652256e+00 2.3538180050361390e+00 77 4.9994498414319544e+01 4.9974661746169318e+01 -5.0348812861835579e-01 -9.7165736281155091e+01 4.9999999999999993e+01 -1.9433147256231023e+00 -4.2963248832161689e+00 2.3530101575930669e+00 78 4.9988085810003703e+01 4.9973803555192674e+01 -5.0637783404694126e-01 -9.7514402898547985e+01 4.9999999999999993e+01 -1.9502880579709601e+00 -4.2926125547166221e+00 2.3423244967456629e+00 79 4.9982739925498137e+01 4.9962750599193491e+01 -4.8175447921304110e-01 -9.7720084024148733e+01 5.0000000000000000e+01 -1.9544016804829747e+00 -4.2912618301423411e+00 2.3368601496593668e+00 80 4.9988248469877135e+01 4.9969938714148839e+01 -4.8523378488240404e-01 -9.7121004464965381e+01 5.0000000000000000e+01 -1.9424200892993078e+00 -4.2926199155375286e+00 2.3501998262382204e+00 81 4.9992494866569039e+01 4.9982341374242608e+01 -4.9246795321068221e-01 -9.7145090658374301e+01 5.0000000000000014e+01 -1.9429018131674853e+00 -4.2907870043485401e+00 2.3478851911810543e+00 82 4.9988239030609357e+01 4.9973665167521943e+01 -4.8065331792035221e-01 -9.7196091343458420e+01 4.9999999999999993e+01 -1.9439218268691687e+00 -4.2912486730631656e+00 2.3473268461939965e+00 83 5.0000186239574560e+01 4.9992134792584302e+01 -5.0195659715682561e-01 -9.7382251689268529e+01 4.9999999999999993e+01 -1.9476450337853710e+00 -4.2943460265696576e+00 2.3467009927842870e+00 84 4.9990239051185263e+01 4.9977284589704595e+01 -4.9645661311474548e-01 -9.7585497281741596e+01 5.0000000000000007e+01 -1.9517099456348317e+00 -4.2877967676876683e+00 2.3360868220528368e+00 85 4.9995848535424074e+01 4.9964588380671458e+01 -5.0078305046183080e-01 -9.7380193532608814e+01 5.0000000000000014e+01 -1.9476038706521757e+00 -4.2771155197289090e+00 2.3295116490767338e+00 86 4.9986702731432352e+01 4.9974022996236258e+01 -5.0168644950416941e-01 -9.8196848067922772e+01 4.9999999999999993e+01 -1.9639369613584559e+00 -4.2907184150434396e+00 2.3267814536849833e+00 87 4.9984222767269138e+01 4.9959539816216591e+01 -4.9820195022732411e-01 -9.8313374592412757e+01 4.9999999999999993e+01 -1.9662674918482554e+00 -4.2869020534323745e+00 2.3206345615841197e+00 88 4.9994098055469848e+01 4.9972883080766636e+01 -5.0801971450051475e-01 -9.8257486742923049e+01 4.9999999999999993e+01 -1.9651497348584614e+00 -4.2766560114745920e+00 2.3115062766161318e+00 89 4.9996883745613097e+01 4.9995594527025759e+01 -5.4872013597786684e-01 -9.8400276403947913e+01 5.0000000000000007e+01 -1.9680055280789579e+00 -4.2866253761623359e+00 2.3186198480833768e+00 90 4.9968526726643624e+01 4.9924541136227937e+01 -5.3294531517715904e-01 -9.9293396391211772e+01 5.0000000000000014e+01 -1.9858679278242348e+00 -4.2972221257770498e+00 2.3113541979528152e+00 91 4.9966865686611925e+01 4.9921775729284207e+01 -5.2281771185204584e-01 -9.8431980134365730e+01 5.0000000000000007e+01 -1.9686396026873143e+00 -4.2973948999579088e+00 2.3287552972705945e+00 92 4.9991049763958699e+01 4.9969301921760056e+01 -5.2760205017909312e-01 -9.9315157155384412e+01 5.0000000000000000e+01 -1.9863031431076883e+00 -4.2868946153647460e+00 2.3005914722570577e+00 93 4.9995661610510972e+01 4.9982891005876262e+01 -5.3872557622214556e-01 -9.8236433531743941e+01 4.9999999999999993e+01 -1.9647286706348792e+00 -4.2874066639524537e+00 2.3226779933175745e+00 94 4.9968485054623379e+01 4.9929329339515796e+01 -5.0744122708463268e-01 -9.7898525696985402e+01 5.0000000000000007e+01 -1.9579705139397077e+00 -4.2879202764331543e+00 2.3299497624934471e+00 95 4.9973241782245999e+01 4.9928252003521550e+01 -5.2356694455787356e-01 -9.8164528890665324e+01 5.0000000000000000e+01 -1.9632905778133065e+00 -4.2848685684539838e+00 2.3215779906406766e+00 96 4.9966557418229016e+01 4.9925274254502355e+01 -5.2331110076492426e-01 -9.7892685695400985e+01 5.0000000000000000e+01 -1.9578537139080197e+00 -4.2837026640558236e+00 2.3258489501478046e+00 97 4.9978663386041163e+01 4.9959743996853668e+01 -5.3264755457442881e-01 -9.8223092425093938e+01 5.0000000000000007e+01 -1.9644618485018785e+00 -4.2890751944254344e+00 2.3246133459235563e+00 98 4.9979519760927282e+01 4.9951324298787121e+01 -5.1718749421558274e-01 -9.8368191539150430e+01 5.0000000000000000e+01 -1.9673638307830086e+00 -4.2843339989434783e+00 2.3169701681604700e+00 99 4.9990630431548453e+01 4.9973673405107803e+01 -5.2346076761304550e-01 -9.9279984252310626e+01 4.9999999999999993e+01 -1.9855996850462130e+00 -4.2906408747600926e+00 2.3050411897138807e+00 100 4.9988577176595555e+01 4.9976200696204032e+01 -5.3335384343501258e-01 -9.9542925280574025e+01 5.0000000000000007e+01 -1.9908585056114803e+00 -4.2927434357293768e+00 2.3018849301178959e+00 101 4.9966703003632894e+01 4.9923072900587457e+01 -5.3613278184151536e-01 -9.8307187879935199e+01 5.0000000000000000e+01 -1.9661437575987040e+00 -4.2994461468775897e+00 2.3333023892788844e+00 102 4.9972056214502501e+01 4.9941140273227610e+01 -5.0892470146305557e-01 -9.8785772686435678e+01 4.9999999999999993e+01 -1.9757154537287140e+00 -4.2997404896138010e+00 2.3240250358850867e+00 103 4.9991412451912623e+01 4.9975650560149838e+01 -5.1692396825320597e-01 -9.8385448625830094e+01 5.0000000000000000e+01 -1.9677089725166019e+00 -4.3027225556896695e+00 2.3350135831730676e+00 104 4.9991828165575619e+01 4.9966840083414930e+01 -5.1995868448623583e-01 -9.9080671140777852e+01 4.9999999999999993e+01 -1.9816134228155575e+00 -4.3044715278343766e+00 2.3228581050188186e+00 105 4.9985563981991504e+01 4.9970799939299958e+01 -5.2223069415323620e-01 -9.8318342119009031e+01 4.9999999999999993e+01 -1.9663668423801810e+00 -4.2951259250093186e+00 2.3287590826291376e+00 106 4.9986348632435863e+01 4.9960261598652181e+01 -5.1204440691038122e-01 -9.8278478470775639e+01 5.0000000000000007e+01 -1.9655695694155124e+00 -4.3000100581209049e+00 2.3344404887053924e+00 107 4.9984572735725237e+01 4.9972030862947697e+01 -5.1706669556793505e-01 -9.9683065304824083e+01 5.0000000000000000e+01 -1.9936613060964816e+00 -4.3062573115376184e+00 2.3125960054411361e+00 108 4.9965583524455390e+01 4.9930187755332902e+01 -5.0942777929604677e-01 -9.8173418998429327e+01 5.0000000000000000e+01 -1.9634683799685866e+00 -4.3008680325161333e+00 2.3373996525475462e+00 109 4.9994649526900218e+01 4.9972146469568450e+01 -5.1059044638192297e-01 -9.8061805938206817e+01 5.0000000000000007e+01 -1.9612361187641361e+00 -4.3002967163835351e+00 2.3390605976194001e+00 110 4.9969123815395243e+01 4.9920427104522517e+01 -5.0337233331613362e-01 -9.7614569350490342e+01 4.9999999999999986e+01 -1.9522913870098075e+00 -4.2981580811883804e+00 2.3458666941785724e+00 111 4.9982185711463899e+01 4.9957991493873941e+01 -4.9533085145868011e-01 -9.8148734166904561e+01 5.0000000000000000e+01 -1.9629746833380912e+00 -4.2988208602930831e+00 2.3358461769549912e+00 112 4.9977820474663567e+01 4.9943317782529995e+01 -5.1026041565557978e-01 -9.8235177392792465e+01 5.0000000000000000e+01 -1.9647035478558494e+00 -4.3025418740908323e+00 2.3378383262349827e+00 113 4.9994069622540280e+01 4.9986215978847383e+01 -5.1610232186609262e-01 -9.8522675575130876e+01 5.0000000000000007e+01 -1.9704535115026172e+00 -4.3087375332546420e+00 2.3382840217520244e+00 114 4.9980783609773518e+01 4.9965814357947330e+01 -5.1702962576086187e-01 -9.8745419224419692e+01 5.0000000000000000e+01 -1.9749083844883939e+00 -4.3007390872573517e+00 2.3258307027689575e+00 115 4.9992548541962215e+01 4.9977449506824513e+01 -5.3063154074609065e-01 -9.8356607156018228e+01 5.0000000000000000e+01 -1.9671321431203646e+00 -4.2865469139125016e+00 2.3194147707921378e+00 116 4.9980633142531161e+01 4.9963278196066497e+01 -5.2014107826531242e-01 -9.8409999921341964e+01 4.9999999999999993e+01 -1.9681999984268397e+00 -4.2839306105976638e+00 2.3157306121708241e+00 117 4.9996183532890655e+01 4.9980507435569208e+01 -5.2925527100142089e-01 -9.8102857836128464e+01 4.9999999999999993e+01 -1.9620571567225698e+00 -4.2912089303097298e+00 2.3291517735871605e+00 118 4.9978401304484699e+01 4.9956815171488763e+01 -5.1069437668261153e-01 -9.8227200988514653e+01 5.0000000000000007e+01 -1.9645440197702928e+00 -4.2979382006962448e+00 2.3333941809259522e+00 119 4.9987658891821958e+01 4.9963898978087059e+01 -4.9672646287103195e-01 -9.7645264799798113e+01 5.0000000000000000e+01 -1.9529052959959623e+00 -4.3031003498717002e+00 2.3501950538757379e+00 120 5.0002596578085061e+01 4.9991692671518926e+01 -5.1430169211552901e-01 -9.8491013345117423e+01 5.0000000000000000e+01 -1.9698202669023486e+00 -4.3125463870196681e+00 2.3427261201173204e+00 121 4.9990829927374932e+01 4.9981755091102727e+01 -5.1386794350445253e-01 -9.8201382056024357e+01 5.0000000000000000e+01 -1.9640276411204871e+00 -4.3086832464844074e+00 2.3446556053639203e+00 122 4.9992785766630618e+01 4.9992609932544433e+01 -5.2110044221664220e-01 -9.8729136048660877e+01 5.0000000000000000e+01 -1.9745827209732176e+00 -4.3145278277661712e+00 2.3399451067929538e+00 123 4.9988572520476126e+01 4.9989363350065254e+01 -5.2450661044121083e-01 -9.8803769447662773e+01 5.0000000000000007e+01 -1.9760753889532552e+00 -4.3190346676448215e+00 2.3429592786915663e+00 124 4.9990809171205946e+01 4.9961340060948523e+01 -5.2303671552084174e-01 -9.9325638628457170e+01 5.0000000000000000e+01 -1.9865127725691434e+00 -4.3136367202560146e+00 2.3271239476868710e+00 125 5.0001050684914730e+01 5.0006704740906578e+01 -5.4450269642948479e-01 -9.9122012269802212e+01 5.0000000000000000e+01 -1.9824402453960444e+00 -4.3131620922889242e+00 2.3307218468928799e+00 126 4.9983986807702550e+01 4.9943623908317313e+01 -5.2120862868031381e-01 -9.9514390119619677e+01 5.0000000000000007e+01 -1.9902878023923933e+00 -4.3134193625736250e+00 2.3231315601812317e+00 127 4.9997333591909431e+01 4.9975464268123396e+01 -5.3358253242988174e-01 -9.9242007988077901e+01 5.0000000000000007e+01 -1.9848401597615577e+00 -4.3058130823409746e+00 2.3209729225794167e+00 128 4.9989060146892115e+01 4.9984843467216244e+01 -5.3637226487335077e-01 -9.9186775077402416e+01 5.0000000000000007e+01 -1.9837355015480480e+00 -4.3115028766161698e+00 2.3277673750681216e+00 129 4.9996936119457089e+01 4.9985781957203301e+01 -5.3995456495967209e-01 -9.8291745829845894e+01 4.9999999999999993e+01 -1.9658349165969182e+00 -4.3092255703752897e+00 2.3433906537783713e+00 130 4.9982526502597914e+01 4.9952408959517925e+01 -5.2021976083365840e-01 -9.9077202983019134e+01 5.0000000000000000e+01 -1.9815440596603828e+00 -4.3049420479056506e+00 2.3233979882452682e+00 131 5.0006809758449592e+01 4.9997362304428087e+01 -5.5265806933866157e-01 -1.0045865075123271e+02 4.9999999999999993e+01 -2.0091730150246545e+00 -4.3135146030620586e+00 2.3043415880374050e+00 132 4.9985998246949237e+01 4.9985196074603216e+01 -5.4224301845383172e-01 -1.0022071378403932e+02 5.0000000000000000e+01 -2.0044142756807863e+00 -4.3053704989775810e+00 2.3009562232967942e+00 133 4.9989559301414900e+01 4.9973711296784266e+01 -5.4317362985952145e-01 -1.0023125726431520e+02 4.9999999999999993e+01 -2.0046251452863046e+00 -4.2990007421046794e+00 2.2943755968183743e+00 134 4.9998094977668487e+01 4.9984967087136830e+01 -5.5102406019486072e-01 -1.0020395162308373e+02 4.9999999999999993e+01 -2.0040790324616751e+00 -4.3011587238945799e+00 2.2970796914329052e+00 135 4.9995241308128342e+01 5.0780669994320469e+01 -5.6041017719132036e-01 -9.9745742926914687e+01 5.0000000000000007e+01 -1.9949148585382934e+00 -4.3050354197629783e+00 2.3101205612246849e+00 136 4.9979668220211224e+01 4.9944881232658908e+01 -5.3750168657079200e-01 -1.0000628283655578e+02 5.0000000000000000e+01 -2.0001256567311159e+00 -4.2973536742521414e+00 2.2972280175210251e+00 137 4.9992344018924854e+01 4.9977908944012555e+01 -5.4247806986449498e-01 -9.8858065791775957e+01 5.0000000000000000e+01 -1.9771613158355192e+00 -4.2769787283339786e+00 2.2998174124984589e+00 138 4.9968893896500958e+01 4.9932546344547276e+01 -5.2139511485475309e-01 -9.9462472911301077e+01 5.0000000000000000e+01 -1.9892494582260216e+00 -4.2849690268646956e+00 2.2957195686386740e+00 139 4.9998672277359063e+01 4.9997792922919814e+01 -5.5408635356096692e-01 -9.9820916993219825e+01 5.0000000000000014e+01 -1.9964183398643958e+00 -4.2869488231150177e+00 2.2905304832506213e+00 140 4.9979782575054067e+01 4.9968876540571976e+01 -5.5615842694077666e-01 -9.9196467806988920e+01 5.0000000000000007e+01 -1.9839293561397782e+00 -4.2845304952282541e+00 2.3006011390884762e+00 141 4.9978512882832582e+01 4.9934636208196601e+01 -5.3477618232438329e-01 -9.9143112352476692e+01 5.0000000000000000e+01 -1.9828622470495338e+00 -4.2838457472698135e+00 2.3009835002202794e+00 142 4.9984514754539198e+01 4.9959953311900883e+01 -5.4105541443594496e-01 -9.8546335630322588e+01 4.9999999999999993e+01 -1.9709267126064522e+00 -4.2888827922757562e+00 2.3179560796693037e+00 143 4.9965919677154226e+01 4.9936343103719423e+01 -5.0994060782755579e-01 -9.8458364355324008e+01 5.0000000000000000e+01 -1.9691672871064803e+00 -4.2857436322552669e+00 2.3165763451487869e+00 144 4.9995865231394063e+01 4.9958660653662392e+01 -5.2790181130781522e-01 -9.8645837611648602e+01 5.0000000000000007e+01 -1.9729167522329718e+00 -4.2799543692570525e+00 2.3070376170240792e+00 145 4.9977448757862248e+01 4.9943809254289846e+01 -5.2221307547794593e-01 -9.9185738736103531e+01 5.0000000000000000e+01 -1.9837147747220707e+00 -4.2781484199744755e+00 2.2944336452524050e+00 146 4.9973049846328948e+01 4.9935518016372811e+01 -5.1272558440436700e-01 -9.9614477656920599e+01 4.9999999999999993e+01 -1.9922895531384124e+00 -4.2679675535075363e+00 2.2756780003691239e+00 147 4.9991055354523922e+01 4.9958826856908381e+01 -5.5178471616864178e-01 -9.9624088055226679e+01 4.9999999999999993e+01 -1.9924817611045340e+00 -4.2818907051208850e+00 2.2894089440163512e+00 148 4.9971998468212206e+01 4.9928285670536226e+01 -5.1751368753326366e-01 -9.9455951329786444e+01 5.0000000000000000e+01 -1.9891190265957290e+00 -4.2985535235906802e+00 2.3094344969949514e+00 149 5.0008318613060126e+01 4.9995284129428349e+01 -5.6222343789570806e-01 -9.9826869033299843e+01 5.0000000000000000e+01 -1.9965373806659970e+00 -4.3013282890226359e+00 2.3047909083566398e+00 150 4.9977309468112054e+01 4.9950231302732838e+01 -5.4787899910011140e-01 -9.9727207372902257e+01 5.0000000000000007e+01 -1.9945441474580448e+00 -4.2985485461527793e+00 2.3040043986947345e+00 151 4.9992799712536566e+01 4.9981922764225139e+01 -5.6948685575324887e-01 -9.9661424848335287e+01 5.0000000000000007e+01 -1.9932284969667053e+00 -4.3075834997057560e+00 2.3143550027390507e+00 152 4.9947482608074068e+01 4.9854377559189771e+01 -5.2786337061069066e-01 -9.9624741528672729e+01 4.9999999999999993e+01 -1.9924948305734549e+00 -4.3024240449830895e+00 2.3099292144096339e+00 153 4.9985621364476039e+01 4.9940183537047396e+01 -5.2396878766701127e-01 -1.0006825874882837e+02 5.0000000000000000e+01 -2.0013651749765673e+00 -4.2978062118671376e+00 2.2964410368905703e+00 154 4.9968202941158104e+01 4.9922557076102905e+01 -5.1584142528376209e-01 -9.8631135215809820e+01 5.0000000000000007e+01 -1.9726227043161961e+00 -4.3076164637375776e+00 2.3349937594213817e+00 155 4.9940461044350613e+01 5.0260465724514098e+01 -4.7296476420260131e-01 -9.7015115260594840e+01 4.9999999999999993e+01 -1.9403023052118971e+00 -4.3016527230959456e+00 2.3613504178840476e+00 156 4.9992002359879784e+01 4.9973024838319006e+01 -4.8254927911351048e-01 -9.7097989951722610e+01 5.0000000000000000e+01 -1.9419597990344521e+00 -4.3053701664141917e+00 2.3634103673797391e+00 157 4.9983583081822701e+01 4.9976299128134315e+01 -4.8320068697688368e-01 -9.6457489222281907e+01 4.9999999999999993e+01 -1.9291497844456384e+00 -4.2986110609338368e+00 2.3694612764881988e+00 158 4.9989939238041892e+01 4.9971929554759207e+01 -4.9388399557770396e-01 -9.6842456164738365e+01 5.0000000000000000e+01 -1.9368491232947673e+00 -4.2984826825425184e+00 2.3616335592477506e+00 159 4.9985657992281524e+01 4.9961459537338243e+01 -4.8859065042676364e-01 -9.6683716003207394e+01 4.9999999999999986e+01 -1.9336743200641486e+00 -4.2981515772668821e+00 2.3644772572027333e+00 160 4.9977061990707135e+01 4.9941078364243722e+01 -4.6304509735663946e-01 -9.7040225498817492e+01 5.0000000000000000e+01 -1.9408045099763498e+00 -4.2981460688054494e+00 2.3573415588290998e+00 161 5.0005880456490189e+01 4.9997802282983415e+01 -5.0052217218896033e-01 -9.7610242566385665e+01 4.9999999999999993e+01 -1.9522048513277137e+00 -4.2963658020096043e+00 2.3441609506818910e+00 162 4.9991837572114363e+01 4.9984678457114718e+01 -5.0442067399175672e-01 -9.8342038934718246e+01 5.0000000000000000e+01 -1.9668407786943649e+00 -4.2945193134651571e+00 2.3276785347707931e+00 163 4.9990756466301427e+01 4.9993507297770819e+01 -5.2680467496219441e-01 -9.7885226677002450e+01 5.0000000000000007e+01 -1.9577045335400487e+00 -4.2946040693408865e+00 2.3368995358008373e+00 164 4.9971939305679591e+01 4.9932202411206191e+01 -4.9890270553845334e-01 -9.8207633150542833e+01 4.9999999999999993e+01 -1.9641526630108570e+00 -4.2929975886827965e+00 2.3288449256719392e+00 165 4.9993499072724916e+01 4.9972653222556040e+01 -5.1680082087703283e-01 -9.8278202033188151e+01 5.0000000000000000e+01 -1.9655640406637631e+00 -4.2790125994507013e+00 2.3134485587869378e+00 166 4.9985700507521024e+01 4.9967290218611225e+01 -5.1780366567719238e-01 -9.9154495830396186e+01 5.0000000000000000e+01 -1.9830899166079237e+00 -4.2978870523776838e+00 2.3147971357697603e+00 167 4.9985362902779670e+01 4.9976265686785823e+01 -5.2211382314280530e-01 -9.8705542790329915e+01 5.0000000000000000e+01 -1.9741108558065983e+00 -4.2962120703974263e+00 2.3221012145908277e+00 168 4.9991447492840408e+01 4.9975630846185084e+01 -5.2645579790138730e-01 -9.9149053687549753e+01 5.0000000000000000e+01 -1.9829810737509952e+00 -4.3050375420773745e+00 2.3220564683263798e+00 169 4.9991729391718472e+01 4.9968051948452867e+01 -5.2346310247177885e-01 -9.8705917439319336e+01 5.0000000000000007e+01 -1.9741183487863865e+00 -4.3063039572874260e+00 2.3321856085010397e+00 170 4.9983865463645060e+01 4.9975468964463055e+01 -5.2605487640659232e-01 -9.8352250186048451e+01 4.9999999999999993e+01 -1.9670450037209695e+00 -4.2944813293960218e+00 2.3274363256750519e+00 171 4.9983644629425662e+01 4.9970599378780371e+01 -5.1970145648679633e-01 -9.7843958838984491e+01 5.0000000000000000e+01 -1.9568791767796898e+00 -4.2878932668885401e+00 2.3310140901088507e+00 172 4.9993938112795284e+01 4.9970100496365177e+01 -5.2163435652673684e-01 -9.8351626018197649e+01 4.9999999999999993e+01 -1.9670325203639534e+00 -4.2987641525301692e+00 2.3317316321662163e+00 173 4.9982314335270530e+01 4.9946283545493543e+01 -5.0093430249256043e-01 -9.8889393234376399e+01 5.0000000000000000e+01 -1.9777878646875280e+00 -4.3052131445556290e+00 2.3274252798681005e+00 174 4.9997328850244166e+01 4.9994234483878770e+01 -5.2643601067106627e-01 -9.9106848391631559e+01 5.0000000000000000e+01 -1.9821369678326313e+00 -4.2993772338988281e+00 2.3172402660661975e+00 175 4.9991028561286207e+01 4.9986821423980054e+01 -5.3588991761097449e-01 -9.9638015913933032e+01 5.0000000000000000e+01 -1.9927603182786606e+00 -4.3022178597043146e+00 2.3094575414256537e+00 176 4.9995085467298843e+01 4.9983489105141906e+01 -5.6507096358413444e-01 -9.9424675980004167e+01 5.0000000000000000e+01 -1.9884935196000835e+00 -4.2929972759058703e+00 2.3045037563057873e+00 177 4.9969227388359116e+01 4.9927372821256959e+01 -5.3784628042710891e-01 -9.9387304951346763e+01 5.0000000000000000e+01 -1.9877460990269353e+00 -4.2949755243277554e+00 2.3072294253008194e+00 178 4.9984340508701479e+01 4.9964910412315483e+01 -5.4347026488666839e-01 -9.9860794856556240e+01 5.0000000000000007e+01 -1.9972158971311245e+00 -4.3020944616955354e+00 2.3048785645644112e+00 179 4.9987207440374888e+01 4.9971925569348372e+01 -5.4653301270189736e-01 -9.9242919219449007e+01 4.9999999999999993e+01 -1.9848583843889804e+00 -4.2915543622785117e+00 2.3066959778895302e+00 180 4.9971380922334831e+01 4.9937127530033813e+01 -5.1601837351088897e-01 -9.8427650721441850e+01 5.0000000000000007e+01 -1.9685530144288368e+00 -4.2934594674846007e+00 2.3249064530557644e+00 181 4.9996568157475032e+01 4.9982608375820710e+01 -5.3481445910002312e-01 -9.8284881246605281e+01 5.0000000000000000e+01 -1.9656976249321056e+00 -4.3081557363747836e+00 2.3424581114426775e+00 182 4.9983590194863041e+01 4.9961778578793130e+01 -5.2477872262991221e-01 -9.8668924234075462e+01 5.0000000000000014e+01 -1.9733784846815086e+00 -4.3107527016732909e+00 2.3373742169917824e+00 183 4.9985616377704496e+01 4.9961852104365505e+01 -5.1606737753569920e-01 -9.8478530672711472e+01 5.0000000000000000e+01 -1.9695706134542295e+00 -4.3075566029825891e+00 2.3379859895283595e+00 184 4.9987297403367286e+01 4.9972864552322335e+01 -5.0614105049683134e-01 -9.7712752544218503e+01 5.0000000000000000e+01 -1.9542550508843701e+00 -4.3055847671054295e+00 2.3513297162210587e+00 185 4.9990124415026941e+01 4.9979648414611084e+01 -5.0735001242207822e-01 -9.7861377790776842e+01 5.0000000000000000e+01 -1.9572275558155370e+00 -4.2927647216603519e+00 2.3355371658448143e+00 186 4.9988360517096666e+01 4.9953638037905066e+01 -4.9980048389058856e-01 -9.7709927229541933e+01 5.0000000000000000e+01 -1.9541985445908387e+00 -4.2945586448669335e+00 2.3403601002760950e+00 187 4.9997566250750708e+01 4.9995419722493551e+01 -5.0885389203704445e-01 -9.8175661234179387e+01 4.9999999999999993e+01 -1.9635132246835880e+00 -4.2896411866610178e+00 2.3261279619774293e+00 188 4.9995669293339752e+01 4.9985111459679409e+01 -5.2419265902496714e-01 -9.9056951343003817e+01 4.9999999999999993e+01 -1.9811390268600768e+00 -4.3016754123290033e+00 2.3205363854689267e+00 189 4.9994374067654469e+01 4.9990854741889926e+01 -5.5055425614383491e-01 -9.9939258630701389e+01 5.0000000000000007e+01 -1.9987851726140275e+00 -4.3212247405529425e+00 2.3224395679389152e+00 190 4.9982897433882776e+01 4.9981349018799541e+01 -5.6119719386745959e-01 -1.0063201836322158e+02 5.0000000000000000e+01 -2.0126403672644315e+00 -4.3165530878636780e+00 2.3039127205992473e+00 191 4.9971513574966103e+01 4.9927143156537042e+01 -5.5801923381178764e-01 -1.0125417782555546e+02 4.9999999999999993e+01 -2.0250835565111096e+00 -4.3165926803538435e+00 2.2915091238427334e+00 192 4.9995054835242719e+01 4.9981126758319760e+01 -5.5720614278504266e-01 -1.0033284370055155e+02 5.0000000000000000e+01 -2.0066568740110311e+00 -4.3122160321542520e+00 2.3055591581432209e+00 193 4.9999677503543545e+01 4.9968745620221192e+01 -5.9182166595618635e-01 -1.0107031968688842e+02 5.0000000000000007e+01 -2.0214063937377680e+00 -4.3230860981040644e+00 2.3016797043662973e+00 194 4.9974693410602107e+01 4.9943899534743537e+01 -5.8391263721592435e-01 -1.0029930360061984e+02 4.9999999999999993e+01 -2.0059860720123970e+00 -4.3208879010311954e+00 2.3149018290187975e+00 195 4.9948987879679230e+01 4.9894962599529002e+01 -5.2283955573994589e-01 -9.9144794805221082e+01 4.9999999999999993e+01 -1.9828958961044221e+00 -4.3142965526264625e+00 2.3314006565220415e+00 196 5.0001603812434453e+01 4.9972958534592763e+01 -5.4197906772937854e-01 -9.9529330496956135e+01 5.0000000000000000e+01 -1.9905866099391227e+00 -4.3159626349288587e+00 2.3253760249897351e+00 197 4.9980736450896245e+01 4.9958675917967895e+01 -5.2406991006698422e-01 -9.8814396398727737e+01 5.0000000000000007e+01 -1.9762879279745544e+00 -4.3095706414935178e+00 2.3332827135189635e+00 198 4.9979637000734897e+01 4.9951165669402307e+01 -5.1037625861118063e-01 -9.9455579504285311e+01 4.9999999999999993e+01 -1.9891115900857066e+00 -4.3057511453505724e+00 2.3166395552648660e+00 199 4.9999648085738890e+01 4.9985766828813368e+01 -5.4624846722187581e-01 -9.9321520940153576e+01 4.9999999999999986e+01 -1.9864304188030721e+00 -4.3088801037516493e+00 2.3224496849485767e+00 200 4.9984324412786364e+01 4.9971384257678878e+01 -5.4552924545243442e-01 -9.9175952231446630e+01 5.0000000000000007e+01 -1.9835190446289324e+00 -4.3084490724896165e+00 2.3249300278606837e+00 201 4.9979690398986477e+01 4.9960480055108036e+01 -5.4174560038318598e-01 -9.8660549994475659e+01 5.0000000000000007e+01 -1.9732109998895129e+00 -4.3123634015234389e+00 2.3391524016339265e+00 202 4.9961771873225601e+01 4.9919594641052072e+01 -5.1887389822799534e-01 -9.8082486844807576e+01 5.0000000000000007e+01 -1.9616497368961512e+00 -4.3118548126388090e+00 2.3502050757426587e+00 203 4.9982533888427909e+01 4.9933053996780174e+01 -4.9854845129936087e-01 -9.7836430067266022e+01 4.9999999999999993e+01 -1.9567286013453209e+00 -4.3030548394136998e+00 2.3463262380683796e+00 204 4.9987861294970003e+01 4.9980405613862821e+01 -5.0504122336702650e-01 -9.7438999184220819e+01 5.0000000000000007e+01 -1.9487799836844162e+00 -4.3024063261580299e+00 2.3536263424736132e+00 205 4.9986344254502811e+01 4.9961642815970833e+01 -4.9400951625779804e-01 -9.7198185303196468e+01 4.9999999999999993e+01 -1.9439637060639297e+00 -4.2902074065489968e+00 2.3462437004850663e+00 206 4.9992758241911986e+01 4.9978894445318005e+01 -5.1054378495542763e-01 -9.7134948292562171e+01 5.0000000000000007e+01 -1.9426989658512432e+00 -4.2820456414395416e+00 2.3393466755882986e+00 207 4.9989699692834101e+01 4.9975734812420349e+01 -5.1761467112545445e-01 -9.7812877035336896e+01 5.0000000000000007e+01 -1.9562575407067375e+00 -4.2919837918245172e+00 2.3357262511177797e+00 208 4.9978977369246181e+01 4.9951651318461458e+01 -4.8943190709857703e-01 -9.7257203464941412e+01 5.0000000000000007e+01 -1.9451440692988280e+00 -4.2938404658004989e+00 2.3486963965016718e+00 209 4.9981508378812308e+01 4.9949557203164581e+01 -4.8443426100778730e-01 -9.7812446404197928e+01 5.0000000000000007e+01 -1.9562489280839583e+00 -4.2944736059568500e+00 2.3382246778728915e+00 210 5.0003967305587722e+01 4.9981588278186628e+01 -5.0646746400082787e-01 -9.8187480420421508e+01 5.0000000000000000e+01 -1.9637496084084303e+00 -4.2928745717179053e+00 2.3291249633094759e+00 211 4.9984809791305644e+01 4.9979195954107588e+01 -5.0551325049013507e-01 -9.9351219594285979e+01 5.0000000000000000e+01 -1.9870243918857196e+00 -4.3073207326901324e+00 2.3202963408044126e+00 212 4.9993889487446076e+01 4.9980131468240081e+01 -5.2859465182877219e-01 -1.0020037584833092e+02 5.0000000000000007e+01 -2.0040075169666181e+00 -4.3156186533086034e+00 2.3116111363419853e+00 213 4.9931343486669221e+01 4.9841885925061831e+01 -5.2457781906939205e-01 -9.8958554291679491e+01 5.0000000000000007e+01 -1.9791710858335896e+00 -4.2953369076926737e+00 2.3161658218590846e+00 214 4.9988315936323389e+01 4.9965670407978941e+01 -5.2400761076938629e-01 -9.8418805817109373e+01 5.0000000000000007e+01 -1.9683761163421871e+00 -4.2906899391664304e+00 2.3223138228242437e+00 215 4.9981016624149063e+01 4.9956056267126137e+01 -5.1948216894066401e-01 -9.8029487487218404e+01 4.9999999999999993e+01 -1.9605897497443685e+00 -4.2877220334788690e+00 2.3271322837345005e+00 216 4.9977740873600204e+01 4.9964667514118709e+01 -5.0645084182849165e-01 -9.7970798099616275e+01 5.0000000000000000e+01 -1.9594159619923255e+00 -4.2930024187892553e+00 2.3335864567969291e+00 217 4.9984834586180106e+01 4.9961976829817679e+01 -5.1386472065574351e-01 -9.8779541436358116e+01 5.0000000000000007e+01 -1.9755908287271620e+00 -4.2916584453750986e+00 2.3160676166479361e+00 218 4.9971422210689269e+01 4.9923498776367076e+01 -5.0884208437647482e-01 -9.8248887875421488e+01 5.0000000000000000e+01 -1.9649777575084297e+00 -4.2721196875029310e+00 2.3071419299945002e+00 219 4.9963061312418851e+01 4.9918077160467902e+01 -4.8197608427518041e-01 -9.6958003350453239e+01 4.9999999999999993e+01 -1.9391600670090652e+00 -4.2744431441264226e+00 2.3352830771173569e+00 220 4.9990594458723308e+01 4.9958585319191599e+01 -5.0507859597873617e-01 -9.8528364533860966e+01 4.9999999999999993e+01 -1.9705672906772198e+00 -4.2748808906002482e+00 2.3043135999230286e+00 221 4.9970157438078516e+01 4.9946847675864667e+01 -4.8894756001727424e-01 -9.7639469541099686e+01 5.0000000000000000e+01 -1.9527893908219938e+00 -4.2946620454700870e+00 2.3418726546480935e+00 222 4.9984626834875485e+01 4.9947037437006223e+01 -4.9180289195205296e-01 -9.8042309373268708e+01 5.0000000000000000e+01 -1.9608461874653742e+00 -4.2999570618852072e+00 2.3391108744198332e+00 223 4.9984171844928632e+01 4.9968962038249067e+01 -4.9477489078807402e-01 -9.7551559836172373e+01 5.0000000000000007e+01 -1.9510311967234473e+00 -4.3045733845091814e+00 2.3535421877857345e+00 224 4.9984882822291240e+01 4.9968386675999852e+01 -4.9421238439462534e-01 -9.7049853980543489e+01 5.0000000000000000e+01 -1.9409970796108698e+00 -4.3024358955112589e+00 2.3614388159003896e+00 225 4.9984147464708144e+01 4.9964171983302315e+01 -4.8709554669650690e-01 -9.6748470204196323e+01 5.0000000000000007e+01 -1.9349694040839263e+00 -4.3053379272553904e+00 2.3703685231714648e+00 226 4.9994874291826200e+01 4.9982256323265176e+01 -4.9704423868166303e-01 -9.6609571098672774e+01 5.0000000000000007e+01 -1.9321914219734553e+00 -4.3057747578343006e+00 2.3735833358608454e+00 227 4.9981405743096232e+01 4.9966452396085501e+01 -4.9087938950302901e-01 -9.7255654731903135e+01 5.0000000000000000e+01 -1.9451130946380628e+00 -4.3124328108759871e+00 2.3673197162379251e+00 228 4.9986337470395831e+01 4.9954275175430986e+01 -4.7858473571763543e-01 -9.7303982385253292e+01 5.0000000000000000e+01 -1.9460796477050659e+00 -4.3081697884627417e+00 2.3620901407576751e+00 229 4.9981575350726651e+01 4.9969894841264875e+01 -4.7707440476462226e-01 -9.7467882505396787e+01 5.0000000000000000e+01 -1.9493576501079357e+00 -4.3074602833224267e+00 2.3581026332144903e+00 230 5.0000813270985255e+01 4.9980876457871453e+01 -4.8775085184459327e-01 -9.7583087879785126e+01 5.0000000000000000e+01 -1.9516617575957025e+00 -4.3179643860008596e+00 2.3663026284051578e+00 231 4.9998620038597764e+01 4.9993891347454493e+01 -5.0924889272519891e-01 -9.7668070284202173e+01 5.0000000000000007e+01 -1.9533614056840432e+00 -4.3133840472746536e+00 2.3600226415906107e+00 232 4.9978729093871642e+01 4.9960229185290409e+01 -4.9520990924257718e-01 -9.7923227949331277e+01 5.0000000000000007e+01 -1.9584645589866252e+00 -4.3102583310256080e+00 2.3517937720389832e+00 233 4.9999287393814178e+01 4.9975756791222430e+01 -5.1115394055645980e-01 -9.7944183220849155e+01 5.0000000000000000e+01 -1.9588836644169831e+00 -4.3154385816268848e+00 2.3565549172099018e+00 234 4.9991731207678377e+01 4.9989705522608958e+01 -5.2097882431269316e-01 -9.8185774889767373e+01 5.0000000000000000e+01 -1.9637154977953475e+00 -4.3061408638013061e+00 2.3424253660059584e+00 235 4.9975117549701828e+01 4.9938802925850908e+01 -5.0223169793688471e-01 -9.8094023705255097e+01 5.0000000000000000e+01 -1.9618804741051019e+00 -4.3041036145612859e+00 2.3422231404561837e+00 236 4.9989771327622961e+01 4.9980822749320552e+01 -5.1997470368097554e-01 -9.8688017028883820e+01 5.0000000000000000e+01 -1.9737603405776765e+00 -4.3101638457624185e+00 2.3364035051847423e+00 237 4.9991512470907949e+01 4.9969680650564960e+01 -5.1599495839711185e-01 -9.8531604095790343e+01 5.0000000000000007e+01 -1.9706320819158065e+00 -4.3150843460309609e+00 2.3444522641151537e+00 238 4.9993093478613574e+01 4.9981137616693758e+01 -5.3160902591706527e-01 -9.8748338393299662e+01 5.0000000000000007e+01 -1.9749667678659930e+00 -4.3223758763753883e+00 2.3474091085093947e+00 239 4.9968584861718995e+01 4.9946324543728259e+01 -4.9303550654010259e-01 -9.8134944486878652e+01 4.9999999999999993e+01 -1.9626988897375734e+00 -4.3147159868064939e+00 2.3520170970689205e+00 240 5.0000429020997800e+01 4.9979910589643076e+01 -5.0851723548514638e-01 -9.8393923268484059e+01 5.0000000000000000e+01 -1.9678784653696813e+00 -4.3142629706185565e+00 2.3463845052488752e+00 241 5.0001723024675350e+01 4.9998796007657340e+01 -5.2577843284780446e-01 -9.8632713398814843e+01 5.0000000000000007e+01 -1.9726542679762966e+00 -4.3156581561010912e+00 2.3430038881247950e+00 242 4.9979006602007416e+01 4.9964824260302933e+01 -5.0389080942060305e-01 -9.8591413150915017e+01 5.0000000000000007e+01 -1.9718282630182999e+00 -4.3164599305773743e+00 2.3446316675590744e+00 243 5.0004657106027352e+01 4.9993979839918147e+01 -5.2406384686528473e-01 -9.9223378709146616e+01 4.9999999999999993e+01 -1.9844675741829327e+00 -4.3176276864019165e+00 2.3331601122189825e+00 244 4.9993647434936797e+01 4.9986319909132753e+01 -5.2581164815047254e-01 -9.9478658402923472e+01 5.0000000000000007e+01 -1.9895731680584692e+00 -4.3176655835763089e+00 2.3280924155178395e+00 245 4.9998222392766415e+01 4.9990146975950609e+01 -5.5450719839375928e-01 -9.9638231191623603e+01 4.9999999999999986e+01 -1.9927646238324728e+00 -4.3171535127418945e+00 2.3243888889094215e+00 246 4.9987253068173167e+01 4.9980952465680858e+01 -5.4076147948598619e-01 -9.9012727086229390e+01 5.0000000000000000e+01 -1.9802545417245878e+00 -4.3194167762318418e+00 2.3391622345072540e+00 247 4.9981861001729598e+01 4.9940089363730422e+01 -5.1599924754193827e-01 -9.8738917869174458e+01 4.9999999999999993e+01 -1.9747783573834896e+00 -4.3193300028956934e+00 2.3445516455122042e+00 248 5.0001617959023044e+01 4.9988148980696373e+01 -5.3380700250088453e-01 -9.9003517001750154e+01 5.0000000000000000e+01 -1.9800703400350030e+00 -4.3218604765925299e+00 2.3417901365575271e+00 249 4.9989194485660583e+01 4.9972867610558900e+01 -5.3862631625953128e-01 -9.9840690603765225e+01 5.0000000000000000e+01 -1.9968138120753045e+00 -4.3273383630187174e+00 2.3305245509434127e+00 250 4.9989351656883748e+01 4.9986324360779513e+01 -5.4998166655141234e-01 -9.9472667054517061e+01 5.0000000000000000e+01 -1.9894533410903412e+00 -4.3276604491022805e+00 2.3382071080119395e+00 251 4.9968556849872833e+01 4.9929936239928310e+01 -5.2044490654020470e-01 -9.9200250898212673e+01 4.9999999999999993e+01 -1.9840050179642539e+00 -4.3201584195207783e+00 2.3361534015565240e+00 252 4.9993435777522258e+01 4.9967749004661350e+01 -5.2562292990735260e-01 -9.8980573179280199e+01 5.0000000000000000e+01 -1.9796114635856041e+00 -4.3151414382137752e+00 2.3355299746281712e+00 253 4.9984299110120432e+01 4.9967578480511314e+01 -5.1859119459663294e-01 -9.9043838408583653e+01 5.0000000000000007e+01 -1.9808767681716728e+00 -4.3179670515358461e+00 2.3370902833641733e+00 254 4.9998153543399489e+01 5.0002862814772683e+01 -5.4968990084983660e-01 -9.9490021108563440e+01 5.0000000000000007e+01 -1.9898004221712684e+00 -4.3196589458914492e+00 2.3298585237201812e+00 255 4.9975383871588491e+01 4.9954776019392433e+01 -5.2148197733600610e-01 -9.8127603042036611e+01 5.0000000000000007e+01 -1.9625520608407319e+00 -4.3226760360466141e+00 2.3601239752058834e+00 256 4.9993630422345831e+01 4.9970822603856085e+01 -5.2612646602648239e-01 -9.8407686054056214e+01 5.0000000000000000e+01 -1.9681537210811244e+00 -4.3207772135363127e+00 2.3526234924551885e+00 257 4.9987170776264229e+01 4.9987333018662504e+01 -5.2902523571216498e-01 -9.8594800668064437e+01 5.0000000000000000e+01 -1.9718960133612888e+00 -4.3299840505989238e+00 2.3580880372376360e+00 258 4.9990048149929493e+01 4.9958613087560352e+01 -5.2193646966731910e-01 -9.8581300707894457e+01 5.0000000000000007e+01 -1.9716260141578887e+00 -4.3266019669430182e+00 2.3549759527851291e+00 259 4.9985898610681936e+01 4.9960314309804176e+01 -5.1786167233724867e-01 -9.8908332501254336e+01 4.9999999999999993e+01 -1.9781666500250872e+00 -4.3282761786964477e+00 2.3501095286713602e+00 260 4.9989083268492415e+01 4.9970079806647810e+01 -5.2387362195701459e-01 -9.8584173675137237e+01 5.0000000000000007e+01 -1.9716834735027444e+00 -4.3163935405893401e+00 2.3447100670865964e+00 261 4.9989396083982626e+01 4.9958240469204725e+01 -5.2032952066178972e-01 -9.9238113545305993e+01 4.9999999999999993e+01 -1.9847622709061203e+00 -4.3058173269737843e+00 2.3210550560676650e+00 262 4.9973063618957887e+01 4.9982180916625985e+01 -5.6822552726305142e-01 -1.0030550644836595e+02 5.0000000000000007e+01 -2.0061101289673187e+00 -4.3153814805061383e+00 2.3092713515388184e+00 263 4.9955270400859327e+01 4.9852891748640339e+01 -5.2604874485831066e-01 -9.8281502036363008e+01 5.0000000000000000e+01 -1.9656300407272602e+00 -4.3003524917481597e+00 2.3347224510208990e+00 264 4.9974282772403939e+01 4.9932847005994425e+01 -5.0290630821269400e-01 -9.7680942269441417e+01 4.9999999999999986e+01 -1.9536188453888290e+00 -4.3081053631345840e+00 2.3544865177457548e+00 265 4.9990410121776826e+01 4.9954715445567835e+01 -4.9205770205836191e-01 -9.7752443330994495e+01 4.9999999999999993e+01 -1.9550488666198902e+00 -4.3094698529927120e+00 2.3544209863728218e+00 266 5.0004180271299894e+01 4.9991627160938208e+01 -5.0991866142168585e-01 -9.8166252786324861e+01 5.0000000000000007e+01 -1.9633250557264970e+00 -4.3090212020519285e+00 2.3456961463254316e+00 267 4.9986503401530044e+01 4.9983922039176285e+01 -5.1535373894212855e-01 -9.7683730221983495e+01 5.0000000000000007e+01 -1.9536746044396696e+00 -4.2979100632595344e+00 2.3442354588198642e+00 268 4.9983594680491009e+01 4.9966993294042361e+01 -5.0871623011110789e-01 -9.7566183540163209e+01 5.0000000000000000e+01 -1.9513236708032642e+00 -4.3134705719417195e+00 2.3621469011384555e+00 269 4.9996042871824756e+01 4.9979215416881374e+01 -5.1406691325199061e-01 -9.7468437348510975e+01 4.9999999999999993e+01 -1.9493687469702199e+00 -4.3187388809973157e+00 2.3693701340270961e+00 270 4.9980245686676611e+01 4.9958828080331841e+01 -5.0414316725401376e-01 -9.8123062950255388e+01 5.0000000000000007e+01 -1.9624612590051074e+00 -4.3231615133089942e+00 2.3607002543038864e+00 271 5.0001258309330737e+01 5.0002348148607894e+01 -5.1378273519208650e-01 -9.7588835720982061e+01 4.9999999999999993e+01 -1.9517767144196416e+00 -4.3197866358997574e+00 2.3680099214801160e+00 272 4.9984225503098244e+01 4.9971133709703381e+01 -5.0396129616965391e-01 -9.7969414657526528e+01 5.0000000000000000e+01 -1.9593882931505306e+00 -4.3191935556935688e+00 2.3598052625430386e+00 273 4.9985907671418545e+01 4.9960887618570723e+01 -4.9129356331249874e-01 -9.7531502749246883e+01 5.0000000000000007e+01 -1.9506300549849374e+00 -4.3185109241154649e+00 2.3678808691305275e+00 274 4.9988273382903635e+01 4.9964292743391844e+01 -4.8781474722605678e-01 -9.7887236149703739e+01 5.0000000000000014e+01 -1.9577447229940741e+00 -4.3063515357456250e+00 2.3486068127515507e+00 275 4.9992684374228666e+01 5.0560880731549716e+01 -4.8919705619414333e-01 -9.7913650650331093e+01 4.9999999999999993e+01 -1.9582730130066222e+00 -4.3060446978215179e+00 2.3477716848148948e+00 276 4.9990679484283085e+01 4.9977838465176305e+01 -4.9370683567031809e-01 -9.7722353713354664e+01 4.9999999999999986e+01 -1.9544470742670941e+00 -4.2944589256336023e+00 2.3400118513665085e+00 277 4.9964479310245423e+01 4.9915886827458500e+01 -4.8127080722904830e-01 -9.7264664181160697e+01 5.0000000000000000e+01 -1.9452932836232140e+00 -4.2892246276683101e+00 2.3439313440450955e+00 278 4.9984451866857924e+01 4.9949255498528913e+01 -4.7644628586355681e-01 -9.7058217148412837e+01 5.0000000000000000e+01 -1.9411643429682568e+00 -4.2800363251567548e+00 2.3388719821884982e+00 279 4.9993806004479431e+01 4.9983245916087689e+01 -4.9476494139657939e-01 -9.7004791553321894e+01 5.0000000000000000e+01 -1.9400958310664380e+00 -4.2680779105883673e+00 2.3279820795219295e+00 280 4.9987074932050554e+01 4.9962945921570252e+01 -4.8210044180453648e-01 -9.7433932842135562e+01 4.9999999999999993e+01 -1.9486786568427117e+00 -4.2768364998162980e+00 2.3281578429735852e+00 281 4.9986734469638968e+01 4.9962937803908389e+01 -4.8350587550818802e-01 -9.7446527581217339e+01 5.0000000000000007e+01 -1.9489305516243465e+00 -4.2836685239455186e+00 2.3347379723211716e+00 282 5.0003822026686159e+01 5.0013081023905642e+01 -5.1040193778321608e-01 -9.8090664803878894e+01 5.0000000000000007e+01 -1.9618132960775776e+00 -4.3057270552716806e+00 2.3439137591941033e+00 283 4.9976870926168026e+01 4.9944456793682839e+01 -4.7710853160926869e-01 -9.8142617550613565e+01 5.0000000000000000e+01 -1.9628523510122713e+00 -4.3069672580015279e+00 2.3441149069892551e+00 284 4.9998493790695925e+01 4.9994648796455905e+01 -4.9941059025808715e-01 -9.8713228991832139e+01 5.0000000000000000e+01 -1.9742645798366427e+00 -4.3043606938453296e+00 2.3300961140086862e+00 285 5.0000889925923929e+01 5.0024934605297815e+01 -5.4173992939446569e-01 -9.8954235207838181e+01 4.9999999999999993e+01 -1.9790847041567641e+00 -4.3108170723805035e+00 2.3317323682237401e+00 286 4.9983326136707966e+01 4.9960965548587787e+01 -5.2670495926202143e-01 -9.9432137735469951e+01 5.0000000000000007e+01 -1.9886427547093988e+00 -4.3015101268328637e+00 2.3128673721234647e+00 287 4.9984018757949478e+01 4.9977417859031888e+01 -5.2839107945982622e-01 -9.8957722550461924e+01 5.0000000000000007e+01 -1.9791544510092383e+00 -4.3049284121128428e+00 2.3257739611036046e+00 288 4.9994361216594484e+01 4.9968842583468344e+01 -5.3432971568772114e-01 -9.8585848184419291e+01 5.0000000000000000e+01 -1.9717169636883858e+00 -4.2979956555291556e+00 2.3262786918407703e+00 289 4.9985696227254557e+01 4.9979718525710368e+01 -5.2901793734434954e-01 -9.8723953567463042e+01 5.0000000000000000e+01 -1.9744790713492608e+00 -4.3010335567799522e+00 2.3265544854306914e+00 290 4.9993555678830191e+01 4.9973980808991293e+01 -5.2824423777251317e-01 -9.9416981873945446e+01 5.0000000000000007e+01 -1.9883396374789086e+00 -4.3054572264261735e+00 2.3171175889472653e+00 291 4.9976251534004390e+01 4.9960595320242746e+01 -5.2228223158892151e-01 -9.8877390193364249e+01 5.0000000000000000e+01 -1.9775478038672851e+00 -4.3037514726785266e+00 2.3262036688112415e+00 292 5.0005479002428409e+01 5.0001809041470800e+01 -5.6203871152763163e-01 -9.9381998711001231e+01 4.9999999999999993e+01 -1.9876399742200250e+00 -4.3065391140167222e+00 2.3188991397966978e+00 293 4.9978452574785877e+01 4.9945599067997449e+01 -5.4065628951499800e-01 -9.9686833151483711e+01 5.0000000000000000e+01 -1.9937366630296742e+00 -4.3085418459733935e+00 2.3148051829437195e+00 294 4.9985072522410576e+01 4.9955745002184159e+01 -5.2761444335491758e-01 -9.8744278768672217e+01 5.0000000000000000e+01 -1.9748855753734444e+00 -4.3117015596775703e+00 2.3368159843041263e+00 295 4.9985118449292052e+01 4.9962707473172408e+01 -5.2753271487452602e-01 -9.8503936822698265e+01 5.0000000000000000e+01 -1.9700787364539654e+00 -4.3198443223143368e+00 2.3497655858603719e+00 296 4.9983470121669988e+01 4.9975185364793873e+01 -5.1976985334242720e-01 -9.8972178119816732e+01 5.0000000000000000e+01 -1.9794435623963347e+00 -4.3083790068361445e+00 2.3289354444398103e+00 297 4.9998134625101358e+01 4.9984910191131043e+01 -5.3281557660509471e-01 -9.8702981973186624e+01 5.0000000000000007e+01 -1.9740596394637322e+00 -4.3047497560239938e+00 2.3306901165602620e+00 298 4.9983632536097183e+01 4.9962977670721614e+01 -5.1831320269633119e-01 -9.8466127924089250e+01 5.0000000000000014e+01 -1.9693225584817844e+00 -4.3144092390799909e+00 2.3450866805982065e+00 299 4.9994690530640646e+01 4.9974340044250212e+01 -5.2245209668610437e-01 -9.8238618555057869e+01 5.0000000000000000e+01 -1.9647723711011573e+00 -4.3116632233296981e+00 2.3468908522285408e+00 300 4.9983510644580008e+01 4.9957965873627828e+01 -5.0993882668998092e-01 -9.7808635295369371e+01 4.9999999999999993e+01 -1.9561727059073879e+00 -4.3034476284047996e+00 2.3472749224974114e+00 Next, we can visualize the data which is by default saved to estimates.0.h5. from ipie.analysis.extraction import extract_observable import matplotlib.pyplot as plt data = extract_observable(qmc_driver.estimators.filename) plt.plot(data.ETotal, marker='o', label=\"AFQMC\", color=\"C0\") plt.axhline(-1.969512, label=\"Exact Result\", color=\"C1\") plt.legend() plt.xlabel(\"Block number\") plt.ylabel(\"Total Energy (Ha)\") Text(0, 0.5, 'Total Energy (Ha)') Through visual inspection, we can determine when the calculation has equilibrated, after which we should be sampling the (approximate) ground state. We can use samples from this point on to estimate the AFQMC energy and error bar. The function reblock_minimal will perform the necessary error analysis taking into account the serial temporal correlation in the AFQMC data. from ipie.analysis.blocking import reblock_minimal reblock_minimal(qmc_driver.estimators.filename, start_block=20) Note that the number of walkers and the number of blocks is probably too low to obtain statistically significant results and we would advise increasing both of these. For larger scale simulations, we can use MPI to distribute the work among many MPI processes. See ipie for further details. Next steps The results presented above are worse than reported in the paper. In practice one needs to: Carefully converge the trial wavefunction parameters by scanning over multiple random restarts. Converge the reconstructed shadow wavefunction with respect to: n_cliffords The AFQMC part of the simulations can be sped up using MPI parallelism. See ipie for more information. The number of walkers should also be increased to obtain better statistics and reduce any population control biases. The number of samples (num_blocks) should also be increased (ETotal_nsamp_ac should be about 100 for statistically significant results.) Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-02-16 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qcqmc/full_workflow",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 4441,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:02.645085"
  },
  {
    "id": "cirq_3850375885868896340_0",
    "title": "Best Practices \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Best Practices Be disciplined about Tasks Avoid the temptation to add additional parameters or variables to your functions directly. It is worth the effort to encapsulate all input variables into Task objects. Maintain backwards compatibility in Task definitions If you need to add a new option (parameter) to a Task, give it a default value and make sure the .fn property is backwards compatible. This means that you can append additional parts to the string if the new parameter is anything other than its default value, but if the new parameter is set to its default avoid adding it to fn. By maintaining backwards compatibility, you can aggregate datasets taken before and after the change. However, too many changes can make the Task hard to follow so try to think of all the parameters up front. If you need significant changes, it might be a new Task. Write driver scripts in Python Python driver scripts can be concise and highly readable while also avoiding any ambiguity over what data will be collected and in which order. If you're writing command-line parsing and/or doing for loops in bash, something has gone wrong. Configuration options live in the Python driver script. Consequently, you may have to edit some \"code\" before launching a job. The overhead and inflexibility of introducing configuration files is likely not worth it. Separate library functionality out of Tasks There may be a tendency to develop more and more logic into task functions. Avoid this temptation! Factor out 'business logic' into well-designed library functions. Task definitions and driver scripts should merely translate configuration options into calls to library functionality and handle I/O. Save everything Be exhaustive in metadata pertaining to your experiment. You should likely be saving job ids, calibration ids, durations of various parts of your task, circuits, and more. By default, a timestamp is saved with each file. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/guide/best_practices",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 367,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:04.227683"
  },
  {
    "id": "cirq_-6659990599845587116_0",
    "title": "QAOA example problems \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments QAOA example problems View on QuantumAI Run in Google Colab View source on GitHub Download notebook The shallowest depth version of the Quantum Approximate Optimization Algorithm (QAOA) consists of the application of two unitary operators: the problem unitary and the driver unitary. The first of these depends on the parameter \\(\\gamma\\) and applies a phase to pairs of bits according to the problem-specific cost operator \\(C\\): \\[ U_C \\! \\left(\\gamma \\right) = e^{-i \\gamma C } = \\prod_{j < k} e^{-i \\gamma w_{jk} Z_j Z_k} \\] whereas the driver unitary depends on the parameter \\(\\beta\\), is problem-independent, and serves to drive transitions between bitstrings within the superposition state: \\[ \\newcommand{\\gammavector}{\\boldsymbol{\\gamma} } \\newcommand{\\betavector}{\\boldsymbol{\\beta} } U_B \\! \\left(\\beta \\right) = e^{-i \\beta B} = \\prod_j e^{- i \\beta X_j}, \\quad \\qquad B = \\sum_j X_j \\] where \\(X_j\\) is the Pauli \\(X\\) operator on qubit \\(j\\). These operators can be implemented by sequentially evolving under each term of the product; specifically the problem unitary is applied with a sequence of two-body interactions while the driver unitary is a single qubit rotation on each qubit. For higher-depth versions of the algorithm the two unitaries are sequentially re-applied each with their own \\(\\beta\\) or \\(\\gamma\\). The number of applications of the pair of unitaries is represented by the hyperparameter \\(p\\) with parameters \\(\\gammavector = (\\gamma_1, \\dots, \\gamma_p)\\) and \\(\\betavector = (\\beta_1, \\dots, \\beta_p)\\). For \\(n\\) qubits, we prepare the parameterized state \\[ \\newcommand{\\bra}[1]{\\langle #1|} \\newcommand{\\ket}[1]{|#1\\rangle} | \\gammavector , \\betavector \\rangle = U_B(\\beta_p) U_C(\\gamma_p ) \\cdots U_B(\\beta_1) U_C(\\gamma_1 ) \\ket{+}^{\\otimes n}, \\] where \\(\\ket{+}^{\\otimes n}\\) is the symmetric superposition of computational basis states. The optimization problems we study in this work are defined through a cost function with a corresponding quantum operator C given by \\[ C = \\sum_{j < k} w_{jk} Z_j Z_k \\] where \\(Z_j\\) dnotes the Pauli \\(Z\\) operator on qubit \\(j\\), and the \\(w_{jk}\\) correspond to scalar weights with values \\(\\{0, \\pm1\\}\\). Because these clauses act on at most two qubits, we are able to associate a graph with a given problem instance with weighted edges given by the \\(w_{jk}\\) adjacency matrix. Setup Install the ReCirq package: try: import recirq except ImportError: !pip install git+https://github.com/quantumlib/ReCirq Now import Cirq, ReCirq and the module dependencies: import networkx as nx import numpy as np import scipy.optimize import cirq import recirq %matplotlib inline from matplotlib import pyplot as plt # theme colors QBLUE = '#1967d2' QRED = '#ea4335ff' QGOLD = '#fbbc05ff' Hardware grid First, we study problem graphs which match the connectivity of our hardware, which we term \"Hardware Grid problems\". Despite results showing that problems on such graphs are efficient to solve on average, we study these problems as they do not require routing. This family of problems is composed of random instances generated by sampling \\(w_{ij}\\) to be \\(\\pm 1\\) for edges in the device topology or a subgraph thereof. from recirq.qaoa.problems import get_all_hardware_grid_problems import cirq.contrib.routing as ccr hg_problems = get_all_hardware_grid_problems( device_graph=ccr.gridqubits_to_graph_device(recirq.get_device_obj_by_name('Sycamore23').metadata.qubit_set), central_qubit=cirq.GridQubit(6,3), n_instances=10, rs=np.random.RandomState(5) ) instance_i = 0 n_qubits = 23 problem = hg_problems[n_qubits, instance_i] fig, ax = plt.subplots(figsize=(6,5)) pos = {i: coord for i, coord in enumerate(problem.coordinates)} nx.draw_networkx(problem.graph, pos=pos, with_labels=False, node_color=QBLUE) if True: # toggle edge labels edge_labels = {(i1, i2): f\"{weight:+d}\" for i1, i2, weight in problem.graph.edges.data('weight')} nx.draw_networkx_edge_labels(problem.graph, pos=pos, edge_labels=edge_labels) ax.axis('off') fig.tight_layout() Sherrington-Kirkpatrick model Next, we study instances of the Sherrington-Kirkpatrick (SK) model, defined on the complete graph with \\(w_{ij}\\) randomly chosen to be \\(\\pm 1\\). This is a canonical example of a frustrated spin glass and is most penalized by routing, which can be performed optimally using the linear swap networks at the cost of a linear increase in circuit depth. from recirq.qaoa.problems import get_all_sk_problems n_qubits = 17 all_sk_problems = get_all_sk_problems(max_n_qubits=17, n_instances=10, rs=np.random.RandomState(5)) sk_problem = all_sk_problems[n_qubits, instance_i] fig, ax = plt.subplots(figsize=(6,5)) pos = nx.circular_layout(sk_problem.graph) nx.draw_networkx(sk_problem.graph, pos=pos, with_labels=False, node_color=QRED) if False: # toggle edge labels edge_labels = {(i1, i2): f\"{weight:+d}\" for i1, i2, weight in sk_problem.graph.edges.data('weight')} nx.draw_networkx_edge_labels(sk_problem.graph, pos=pos, edge_labels=edge_labels) ax.axis('off') fig.tight_layout() 3-regular MaxCut Finally, we study instances of the MaxCut problem on 3-regular graphs. This is a prototypical discrete optimization problem with a low, fixed node degree but a high dimension which cannot be trivially mapped to a planar architecture. It more closely matches problems of industrial interest. For these problems, we use an automated routing algorithm to heuristically insert SWAP operations. from recirq.qaoa.problems import get_all_3_regular_problems n_qubits = 22 instance_i = 0 threereg_problems = get_all_3_regular_problems(max_n_qubits=22, n_instances=10, rs=np.random.RandomState(5)) threereg_problem = threereg_problems[n_qubits, instance_i] fig, ax = plt.subplots(figsize=(6,5)) pos = nx.spring_layout(threereg_problem.graph, seed=11) nx.draw_networkx(threereg_problem.graph, pos=pos, with_labels=False, node_color=QGOLD) if False: # toggle edge labels edge_labels = {(i1, i2): f\"{weight:+d}\" for i1, i2, weight in threereg_problem.graph.edges.data('weight')} nx.draw_networkx_edge_labels(threereg_problem.graph, pos=pos, edge_labels=edge_labels) ax.axis('off') fig.tight_layout() Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qaoa/example_problems",
    "source": "cirq",
    "doc_type": "example",
    "metadata": {
      "word_count": 821,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:05.877624"
  },
  {
    "id": "cirq_5341386768948030809_0",
    "title": "Fermi-Hubbard experiment example \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Fermi-Hubbard experiment example View on QuantumAI Run in Google Colab View source on GitHub Download notebook This notebook demonstrates how to define, execute, and plot the results of a single instance of the Fermi-Hubbard experiment. We show how to run the experiment using a Cirq simulator and a quantum processor through Google's Quantum Computing Service. The Fermi-Hubbard model on a one-dimensional lattice of \\(L\\) sites with open boundary conditions is defined by the Hamiltonian \\[ H = - J \\sum_{j = 1}^{L - 1} \\sum_{\\nu = \\uparrow, \\downarrow} c_{j, \\nu}^\\dagger c_{j + 1, \\nu} + \\text{h.c.} + U \\sum_{j = 1}^{L} n_{j, \\uparrow} n_{j, \\downarrow} + \\sum_{j = 1}^{L} \\sum_{\\nu = \\uparrow, \\downarrow} \\epsilon_{j, \\nu} n_{j, \\nu} \\] where \\(c_{j, \\nu}\\) (\\(c_{j, \\nu}^\\dagger\\)) are the fermionic annihilation (creation) operators associated to site number \\(j\\) and spin state \\(\\nu\\), and \\(n_{j, \\nu} = c_{j, \\nu}^\\dagger c_{j, \\nu}\\) are the number operators. The hopping term with coefficient \\(J\\) describes particles tunneling between neighboring sites, the onsite interaction term with coefficient \\(U\\) introduces an energy difference for doubly occupied sites, and the term \\(\\epsilon_{j, \\nu}\\) represents spin-dependent local potentials. Our goal in this experiment is to compute the charge and spin densities which are defined as the sum and difference of the spin-up and spin-down particle densities, respectively \\[ \\rho_{j}^{\\pm} = \\langle n_{j, \\uparrow} \\rangle \\pm \\langle n_{j, \\downarrow} \\rangle, \\] after simulating the Fermi-Hubbard model for some evolution time. Here, the expectation is taken with respect to the extended Hamiltonian \\[ H' = H + V \\sum_{j = 1}^{L - 1} \\sum_{\\nu = \\uparrow, \\downarrow} n_{j, \\nu} n_{j + 1, \\nu} \\] which has an additional interaction term between neighboring fermionic sites. This enables extended simulations beyond the standard Fermi-Hubbard model. Setup We first install ReCirq which contains code for running Fermi-Hubbard experiments. try: import recirq except ImportError: print(\"Installing ReCirq...\") !pip install git+https://github.com/quantumlib/recirq --quiet print(\"Installed ReCirq!\") To track the progress of simulating experiments, we use the tqdm package. try: import ipywidgets except ImportError: !pip install ipywidgets --quiet !jupyter nbextension enable --py widgetsnbextension --sys-prefix We can now import Cirq and the fermi_hubbard module from ReCirq. import cirq from recirq import fermi_hubbard from recirq.fermi_hubbard import publication # Hide numpy warnings import warnings warnings.filterwarnings(\"ignore\") Experiment parameters The first step is to decide on exact experiment parameters including problem Hamiltonian, initial state description, as well as a mapping from fermions to qubits on the device. Once we have this information, we can create circuits and run the experiment. Qubit layout We will simulate the Fermi-Hubbard model on \\(L = 8\\) sites. Each site is represented by two qubits due to the two spin states, so we need a total of \\(16\\) qubits to simulate the experiment. The function rainbow23_layouts returns a set of \\(16\\)-qubit subgrids of the Google Rainbow processor. Note: We use multiple layouts to average results over different qubit assignments. One the quantum processor, this cancels some of the statistical errors which occur from calibration to calibration. \"\"\"Get all layouts for 8 sites on a 23-qubit subgrid of the Google Rainbow processor.\"\"\" layouts = publication.rainbow23_layouts(sites_count=8) print(f\"There are {len(layouts)} total qubit layouts.\") There are 16 total qubit layouts. We can see an example layout by printing out its text diagram. \"\"\"Display an example layout.\"\"\" print(layouts[0].text_diagram()) 1\u2193 q(4, 1)\u2501\u2501\u25011\u2191 q(4, 2) \u2502 \u2502 \u2502 \u2502 2\u2193 q(5, 1)\u2501\u2501\u25012\u2191 q(5, 2)\u2500\u2500\u25003\u2191 q(5, 3) \u2502 \u2502 \u2502 \u2502 3\u2193 q(6, 1)\u2500\u2500\u25004\u2193 q(6, 2)\u2501\u2501\u25014\u2191 q(6, 3)\u2500\u2500\u25005\u2191 q(6, 4) \u2502 \u2502 \u2502 \u2502 5\u2193 q(7, 2)\u2500\u2500\u25006\u2193 q(7, 3)\u2501\u2501\u25016\u2191 q(7, 4)\u2500\u2500\u25007\u2191 q(7, 5) \u2502 \u2502 \u2502 \u2502 7\u2193 q(8, 3)\u2500\u2500\u25008\u2193 q(8, 4)\u2501\u2501\u25018\u2191 q(8, 5) The layout indicates the site index \\(j\\) and spin state \\(\\nu\\), as well as which cirq.GridQubit on the Rainbow processor this combination of \\((j, \\nu)\\) is encoded into. One can choose a different layout in the previous cell to see how the configurations vary. Problem parameters Let's use the Hamiltonian with uniform \\(J = 1\\) and \\(U = 2\\) on each site, initial state prepared as a ground state of a non-interacting Hamiltonian with trapping potential of a Gaussian shape, Trotter step size equal to 0.3, and two particles per chain. The problem parameters with this initial state can be prepared with the pre-defined function trapping_instance. \"\"\"Get FermiHubbardParameters (problem descriptions) for each qubit layout with the above parameters.\"\"\" parameters = [ publication.trapping_instance( layout, u=2, dt=0.3, up_particles=2, down_particles=2 ) for layout in layouts ] Other configurations which support site-dependent \\(U\\) and \\(J\\) coefficients can be prepared by creating instances of the fermi_hubbard.FermiHubbardParameters data class explicitly. The results are instances of the FermiHubbardParameters data class for each layout. This data class uniquely defines the configuration to run and contains information such as the Hamiltonian, initial state, layout, and time step. Below, we display these values for an example element of parameters. \"\"\"Display the Hamiltonian for an example problem description.\"\"\" parameters_example = parameters[0] print(parameters_example.hamiltonian) Hamiltonian(sites_count=8, j=1.0, u=2, v=0, local_charge=0, local_spin=0, mu_up=0, mu_down=0) We can also see the initial state: parameters_example.initial_state IndependentChainsInitialState(up=GaussianTrappingPotential(particles=2, center=0.5, sigma=0.14285714285714285, scale=-4), down=UniformTrappingPotential(particles=2)) And the time step: parameters_example.dt 0.3 Circuits One can directly run an experiment from a FermiHubbardParameters instance (which we will do in the next section). However, it is illustrative to construct the circuits to see how the Fermi-Hubbard execution works. Circuit creation To create a circuit from a description of a problem, the function fermi_hubbard.create_circuits can be used. This function inputs a FermiHubbardParameters instance (i.e., a problem description) and number of Trotter steps. It returns circuits for constructing the initial state, simulating time-evolution via a number of Trotter steps, and measuring to compute observables. \"\"\"Create circuits from a problem description.\"\"\" initial, trotter, measurement = fermi_hubbard.create_circuits(parameters_example, trotter_steps=1) Below, we display the complete circuit to execute which is a sum of the three component circuits above. \"\"\"Display the total circuit to execute.\"\"\" circuit = initial + trotter + measurement circuit Note: For a deeper explanation of these circuits and the gates used in them, see the Fermi-Hubbard experiment paper. Circuit decomposition The circuit above is constructed using gates which are not native to Google hardware, for example cirq.FSim or cirq.CZ with arbitrary exponent. To run these circuits on Google hardware, we have to convert them into native operations. For the Fermi-Hubbard experiment, a special converter called ConvertToNonUniformSqrtIswapGates is provided. This converter has the ability to decompose gates to \\(\\sqrt{\\small \\mbox{iSWAP} }\\) both perfectly (i.e., without noise) and with unitary parameters deviating from the perfect ones and varying between qubit pairs. The function ideal_sqrt_iswap_converter creates an instance of the noiseless converter which decomposes \\(\\sqrt{\\small \\mbox{iSWAP} }\\) gates exactly as cirq.FSim(\u03c0/4, 0). The function google_sqrt_iswap_converter creates an instance of the noisy converter which approximates the average values on Rainbow processor (which are about cirq.FSim(\u03c0/4, \u03c0/24) on each two-qubit pair). Below we show an example of the perfect decomposition into the \\(\\sqrt{\\small \\mbox{iSWAP} }\\) gate set. \"\"\"Convert the circuit to native hardware gates perfectly (without noise).\"\"\" publication.ideal_sqrt_iswap_converter().convert(circuit) We will consider both ideal and noisy decompositions when executing the experiment below. Cirq simulation This section demonstrates how to simulate experiments using Cirq simulator. We will simulate the evolution from \\(0\\) to \\(10\\) Trotter steps. Physically, this corresponds to an evolution time of \\(t = 3 \\hbar / J\\). \"\"\"Set the number of Trotter steps to simulate.\"\"\" trotter_steps = range(10 + 1) Ideal As mentioned above, we can use the ideal_sqrt_iswap_converter to convert circuits perfectly into the \\(\\sqrt{\\small \\mbox{iSWAP} }\\) gate set. The Fermi-Hubbard project provides ConvertingSampler that converts circuits before executing ands sampling from them. We get an ideal sampler below. \"\"\"Get an ideal sampler to simulate experiments.\"\"\" ideal_sampler = fermi_hubbard.ConvertingSampler( cirq.Simulator(), publication.ideal_sqrt_iswap_converter().convert ) We can now run experiments using the run_experiment function. This function takes the parameters of a problem, a sampler, and a list of Trotter steps to simulate. Below, we provide the problem parameters defined on each \\(16\\) qubit layout of the Rainbow processor and simulate the experiments using ten Trotter steps and the ideal_sampler. \"\"\"Run the experiments on a perfect simulator for each qubit layout.\"\"\" from tqdm.notebook import tqdm with tqdm(range(len(parameters) * len(trotter_steps))) as progress: experiments = [ fermi_hubbard.run_experiment( params, trotter_steps, ideal_sampler, post_run_func=lambda *_: progress.update() ) for params in parameters ] 0%| | 0/176 [00:00<?, ?it/s] The output of run_experiment is an instance of the ExperimentResult data class. A series of experiments for the same problem instance on different qubit layouts can be post-processed with the help of the InstanceBundle class. This class takes care of averaging results over qubits layouts, re-scaling the data by comparing against a reference run (perfect simulation in this case), and extracting various quantities. \"\"\"Post-process the experimental data for all qubit layouts.\"\"\" bundle = fermi_hubbard.InstanceBundle(experiments) bundle.cache_exact_numerics() A number of quantities of interest can be accessed from an InstanceBundle, as shown below. \"\"\"Show quantities which can be accessed from an InstanceBundle.\"\"\" for quantity_name in bundle.quantities: print(quantity_name) up_down_density up_down_position_average up_down_position_average_dt up_down_spreading up_down_spreading_dt charge_spin_density charge_spin_position_average charge_spin_position_average_dt charge_spin_spreading charge_spin_spreading_dt up_down_density_norescale up_down_position_average_norescale up_down_position_average_dt_norescale up_down_spreading_norescale up_down_spreading_dt_norescale charge_spin_density_norescale charge_spin_position_average_norescale charge_spin_position_average_dt_norescale charge_spin_spreading_norescale charge_spin_spreading_dt_norescale scaling post_selection Each quantity can be converted to a pandas DataFrame using the quantity_data_frame function. Our main goal in simulating the Fermi-Hubbard model was to compute the charge and spin densities \\[ \\rho_{j}^{\\pm} = \\langle n_{j, \\uparrow} \\rangle \\pm \\langle n_{j, \\downarrow} \\rangle . \\] We can get a DataFrame for the \"charge_spin_density\" quantity as follows. \"\"\"Example of getting a DataFrame from a quantity.\"\"\" charge_spin_density, _, _ = fermi_hubbard.quantity_data_frame(bundle, \"charge_spin_density\") charge_spin_density.head() This data frame contains the value, standard error, and standard deviation of the \"charge_spin_density\" quantity at each site for each time (Trotter step). For convenience, this quantity (and others) can be plotted with the fermi_hubbard.plot_quantity helper function. \"\"\"Plot the charge spin density.\"\"\" fermi_hubbard.plot_quantity(bundle, \"charge_spin_density\"); This plotting function automatically adjusts the appearance of plots according to the data being plotted. We illustrate this by plotting the \"charge_spin_spreading\" below. \"\"\"Plot the charge spin spreading.\"\"\" fermi_hubbard.plot_quantity(bundle, \"charge_spin_spreading\"); One can compare these plots to Figure 2 of the Fermi-Hubbard experiment paper. Parasitic controlled-phase We now run the same experiment but with the google_sqrt_iswap_converter. As mentioned, this decomposes \\(\\sqrt{\\small \\mbox{iSWAP} }\\) gates imperfectly as cirq.FSim(\u03c0/4, \u03c0/24) which is close to the average value of the parasitic controlled phase on the Rainbow processor. \"\"\"Run the experiments on a noisy simulator for each qubit layout.\"\"\" parasitic_sampler = fermi_hubbard.ConvertingSampler( cirq.Simulator(), publication.google_sqrt_iswap_converter().convert ) with tqdm(range(len(parameters) * len(trotter_steps))) as progress: experiments = [ fermi_hubbard.run_experiment( params, trotter_steps, parasitic_sampler, post_run_func=lambda *_: progress.update() ) for params in parameters ] 0%| | 0/176 [00:00<?, ?it/s] As above, we can post-process the data using an InstanceBundle and plot quantities of interest using the plot_quantity helper function. \"\"\"Post-process the experimental data for all qubit layouts.\"\"\" bundle = fermi_hubbard.InstanceBundle(experiments) bundle.cache_exact_numerics() We first plot the \"charge_spin_density\": fermi_hubbard.plot_quantity(bundle, \"charge_spin_density\"); And plot the \"charge_spin_spreading\" as well. \"\"\"Plot the charge spin spreading.\"\"\" fermi_hubbard.plot_quantity(bundle, \"charge_spin_spreading\", show_std_error=True); One can compare these to the simulation with exact decompositions above to see the effect of the parasitic controlled phase. Execution on Google's Quantum Computing Service In order to run an experiment on Google's QCS, a QuantumEngine sampler is needed. To create an engine sampler, an environment variable GOOGLE_CLOUD_PROJECT must be present and set to a valid Google Cloud Platform project identifier. \"\"\"Get an engine sampler.\"\"\" import os import cirq_google if \"GOOGLE_CLOUD_PROJECT\" in os.environ: engine_sampler = cirq_google.get_engine_sampler( processor_id=\"rainbow\", gate_set_name=\"sqrt_iswap\" ) else: # Use the simulator as a backup. engine_sampler = cirq.Simulator() # Get a sampler for the Fermi-Hubbard experiment. google_sampler = fermi_hubbard.ConvertingSampler( engine_sampler, publication.google_sqrt_iswap_converter().convert ) Now that we are running on a quantum computer, we follow good experimental practice and save the results on disk as soon as each experiment finishes using the fermi_hubbard.save_experiment function. Although rare, remote operation may fail for various reasons. More advanced execution workflow might include error handling, experiment pause and continuation, etc., which we omit here for simplicity. Note: We do not include Floquet calibration, the calibration technique described in the Supplementary Information of the Fermi-Hubbard experiment paper, when executing the experiments below. \"\"\"Run the experiments on Google's QCS and save the results.\"\"\" # Directory to save results in. results_dir = \"trapping\" with tqdm(range(len(layouts) * len(trotter_steps))) as progress: for index, params in enumerate(parameters): experiment = fermi_hubbard.run_experiment( params, trotter_steps, google_sampler, post_run_func=lambda *_: progress.update() ) fermi_hubbard.save_experiment( experiment, f\"{results_dir}/trapping_{index + 1}.json\" ) 0%| | 0/176 [00:00<?, ?it/s] We can now load the results using fermi_hubbard.load_experiment. \"\"\"Load experimental results.\"\"\" experiments = [ fermi_hubbard.load_experiment(f\"{results_dir}/trapping_{index + 1}.json\") for index in range(len(parameters)) ] When post-processing experimental data from hardware, we include effects due to the parasitic controlled phase as shown below. The value \\(\\phi = 0.138\\) was the approximate value of the parasitic controlled phase at the time when the experimental results in the paper were collected. \"\"\"Post-process the experimental data for all qubit layouts.\"\"\" bundle = fermi_hubbard.InstanceBundle( experiments,numerics_transform=publication.parasitic_cphase_compensation(0.138) ) bundle.cache_exact_numerics() We can now visualize these results using the same plotting functions from above. Here we show the standard deviation of results in the plots. \"\"\"Plot the charge spin density.\"\"\" fermi_hubbard.plot_quantity(bundle, \"charge_spin_density\", show_std_error=True); \"\"\"Plot the charge spin spreading.\"\"\" fermi_hubbard.plot_quantity(bundle, \"charge_spin_spreading\", show_std_error=True); If Google's QCS was used, these experimental results can be compared to previous experiments executed on simulators. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-12-15 UTC.",
    "url": "https://quantumai.google/cirq/experiments/fermi_hubbard/experiment_example",
    "source": "cirq",
    "doc_type": "example",
    "metadata": {
      "word_count": 2200,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:07.643657"
  },
  {
    "id": "cirq_-5965903665338755490_0",
    "title": "Fourier Checking Problem \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Fourier Checking Problem View on QuantumAI Run in Google Colab View source on GitHub Download notebook # Initial setup to install Cirq and set up dependencies for the tutorial. try: import cirq except: print(\"installing cirq...\") !pip install --quiet cirq print(\"installed cirq.\") import cirq from typing import Sequence import numpy as np import matplotlib.pyplot as plt import pandas as pd # Sets a seed for deterministic results. Uncomment for random results each run. np.random.seed(2021) np.set_printoptions(precision=3, suppress=True, linewidth=200) Introduction In past decades, there is ample evidence suggesting that quantum computers can be exponentially more powerful in solving certain computational tasks than their classical couterparts. The black-box or query model, such as Grover\u2019s search, Deutsch-Jozsa\u2019s algorithm, etc., offers a concrete setting to show such exponential speedups. Normally, one provides \"black-box access\" to a function \\(f\\), meaning that the quantum algorithm can apply a unitary transformation that maps basis states of the form \\(|x, y \\rangle\\) to to basis states of the form \\(|x, y \\oplus f(x)\\rangle \\) or \\(|x\\rangle\\) to \\((-1)^{f(x)} |x\\rangle\\) if \\(f\\) is Boolean. Then, a natural question is asked: What is the maximal possible separation between quantum and classical query complexities? For example, could there be a function of \\(N\\) bits with a quantum query complexity of 1, but a classical randomized query complexity of \\(\\Omega(\\sqrt{N})\\) or \\(\\Omega(N)\\)? Specifically, Buhrman et al. from 2002 asked whether there is any property of \\(N-\\)bit strings that exhibits a \u201cmaximal\u201d separation: that is, one that requires \\(\\Omega(N)\\) queries to test classically, but only O (1) quantumly. Fourier Checking is a problem that provides a separation between quantum and classical computers -- \\(O(1)\\) VS \\(\\tilde{\\Omega}(\\sqrt{N})\\), which can be proved as optimal. Currently, it only has theoretical importance - but, as it falls into the category of small quantum algorithms, it can be used to demonstrate query complexity and oracle synthesis in Cirq. Goal of this notebook is to introduce: What is Forrelation and the Fourier Checking problem and why we are interested in it? What is bounded-error quantum polynomial time (BQP) and why does the Fourier Checking problem belong to it? How to implement the Fourier Checking algorithm and an oracle function in Cirq? We won't include the formal proofs and argument. However, we do give sketches of the derivation for intuition and encourage the reader to check the corresponding lemmas and theorems in the original paper. Preliminary Before we present the Fourier Checking problem, three preliminary concepts, 1) BPP and BQP 2) Fourier Transform over \\(Z_2^n\\) and 3) Forrelation, are introduced first. Bounded-error Probabilistic Polynomial time (BPP) In computational complexity theory, bounded-error probabilistic polynomial time (BPP) is the class of decision problems solvable by a probabilistic Turing machine in polynomial time with an error probability bounded away from 1/3 for all instances: Anwser Provided Correct Anwser Yes No Yes \\(\\geq\\) 2/3 \\(\\leq\\) 1/3 No \\(\\leq\\) 1/3 \\(\\geq\\) 2/3 The choice of 1/3 in the definition is arbitrary. It can be any constant between 0 and \u200b1/2 (exclusive) and the set BPP will be unchanged. To understand this better, let's consider a simple example. Problem: Supposing we have a boolean function \\(f: \\{0, 1\\}^n \\rightarrow\\{-1, 1\\}\\). The function is drawn either from distribution \\(\\mathcal{B}\\) or \\(\\mathcal{C}\\). Under the distribution \\(\\mathcal{B}\\), the function \\(f\\) is balanced, i.e., \\(\\sum_{x} f(x) = 0\\). Under the distribution \\(\\mathcal{C}\\), the function \\(f\\) is constant, i.e., function is always equal to \\(+1\\) or \\(-1\\). The problem is to accept the function if it is drawn from \\(\\mathcal{B}\\) or reject it otherwise. For example, consider the case that \\(n=2\\). There are only four possible functions listed in following table x f_0(x) f_1(x) f_2(x) f_3(x) 0 +1 -1 +1 -1 1 -1 +1 +1 -1 Clearly, \\(f_0\\) and \\(f_1\\) belongs to \\(\\mathcal{B}\\) and \\(f_2\\) and \\(f_3\\) belongs to \\(\\mathcal{C}\\). Deterministic Algorithm: We evaluate the outputs of function of \\(2^{n-1}+1\\) different inputs. If the results contain both \\(+1\\) and \\(-1\\) value, the function must be drawn from distribution \\(\\mathcal{B}\\). Otherwise, it must come from \\(\\mathcal{C}\\). Remembering that the function is guaranteed to be either balanced or constant, not somewhere in between. So above algorithm is guaranteed to be always correct. However, the query complexity is \\(O(N)\\), denoting \\(N=2^n\\). Here we are interested in the query complexity instead of computation complexity. Namely, how many times we have to evaluate \\(f\\) -- which you can imagine being a very costly function. If the bounded-error probability is acceptable for solving the problem, we can achieve better algorithm in terms of query complexity. Randomized Algorithm: Randomly select \\(K\\) different inputs and evaluate the corresponding outputs. If both \\(+1\\) and \\(-1\\) are observed, we accept it. Otherwise, it reject it. The complexity of algorithm depends on the choice of \\(K\\). For this problem, selecting fixed number is sufficient, i.e. \\(O(1)\\) query complexity. It is worth to remark that \\(O(1)\\) means no matter the fixed number is independent of the input size of function \\(N\\). Consider the \\(K=2\\) case, it is not hard to establish the following confusion matrix regardless of \\(N\\): Randomized Algorithm (K=2): Accept Reject Drawn from \\(\\mathcal{B}\\) 1/2 1/2 Drawn from \\(\\mathcal{C}\\) 0 1 This is not sufficient to solve it. However, if we select \\(K>2\\) entries, the probability of correctness will boost. Let's use the code to exam it. def gen_balanced_function(N: int) -> np.ndarray: \"\"\"Generates a balanced function for N bits. Creates a function \ud835\udc53:{0,1}^N \u2192 {\u22121,1} where f(x)=-1 for half of the inputs and f(x)=1 for the other half. Returns: the function as represented by a 1-d numpy array of size N \"\"\" half_size = N // 2 f = np.ones(N) flip_loc = np.random.permutation(N)[:half_size] f[flip_loc] = -1 return f def gen_constant_function(N: int) -> np.ndarray: \"\"\"Generates a constant function for N bits. Creates a function \ud835\udc53:{0,1}^\ud835\udc5b \u2192 {\u22121,1} where f(x)=c for all inputs. c is randomly chosen as either -1 or 1, but, once chosen, is constant for all values of x. Returns: the function as represented by a 1-d numpy array of size N \"\"\" flip = np.random.random() > 0.5 f = np.ones(N) if flip else -1 * np.ones(N) return f def choose_random_function() -> tuple[str, np.ndarray]: \"\"\"Randomly choose a function from constant or balanced distributions. Returns: a tuple of the distribution (\"B\" or \"C\") and the function as an array. \"\"\" if np.random.rand() > 0.5: f = gen_balanced_function(N) dist = \"B\" else: f = gen_constant_function(N) dist = \"C\" return dist, f def randomized_alg(f: np.ndarray, sample_size: int) -> str: \"\"\"Samples the function f from `sample_size` different inputs. Queries the function f a number of times equal to sample_size. If all the inputs are the same, then guess that the function is constant. If any inputs are different, then guess the function is balanced. Args: f: the function to sample sample_size: number of times to sample the function f Returns: a string representing the type of function, either \"balanced\" or \"constant\" \"\"\" N = len(f) sample_index = np.random.choice(N, size=sample_size) if len(set(f[sample_index])) == 2: return \"balanced\" return \"constant\" N = 128 # size of the problem, n=7, N=2^7=128 samples_size_per_function = 3 number_of_functions_to_try = 1000 res = pd.DataFrame() for _ in range(number_of_functions_to_try): dist, f = choose_random_function() decision = randomized_alg(f, samples_size_per_function) res = pd.concat( [res, pd.DataFrame({\"Distribution\": [dist], \"Decision\": [decision], \"Count\": [1]})], ignore_index=True, ) confusion = res.pivot_table(index=\"Distribution\", columns=\"Decision\", values=\"Count\", aggfunc=\"sum\") # Translate the counts into percentage confusion.div(confusion.sum(axis=1), axis=0).apply(lambda x: round(x, 4) * 100) Recall that the B in BPP means bounded-error. Actually, you can achieve arbitary small error rate under the same query complexity order. Say, you set an acceptable error rate \\(\\epsilon\\). Then the key is that we can run the algorithm multiple times. Repeat it as many times as you want until the error rate is lower than \\(\\epsilon\\). It is crucial to note that the error rate for this particular problem does not depend on the size of the input but only on the size of the sample and the reptitation. For this reason, in order to get to a bounded probability error, it is sufficient to just adjust the sample size and/or repetitions to a given constant - which means that the \"query complexity\" of the algorithm will stay \\(O(1)\\). For example, let's run previous algorithms 3 times and make the final decision based on the majority of the decision of each term. You should verify that the probability of error indeed decreased and independent of \\(N\\). N = 128 samples_size_per_function = 3 repetitions_of_randomized_alg = 3 number_of_functions_to_try = 1000 res = pd.DataFrame() for _ in range(number_of_functions_to_try): dist, f = choose_random_function() constant_minus_blanaced_count = 0 for _ in range(repetitions_of_randomized_alg): decision = randomized_alg(f, samples_size_per_function) constant_minus_blanaced_count += 1 if decision == \"constant\" else -1 final_decision = \"constant\" if constant_minus_blanaced_count > 0 else \"balanced\" res = pd.concat( [res, pd.DataFrame({\"Distribution\": [dist], \"Decision\": [final_decision], \"Count\": [1]})], ignore_index=True, ) confusion = res.pivot_table(index=\"Distribution\", columns=\"Decision\", values=\"Count\", aggfunc=\"sum\") # Translate the counts into percentage confusion.div(confusion.sum(axis=1), axis=0).apply(lambda x: round(x, 4) * 100) If you try the algorithm with more repetitions, you will observe the error rate decreases rapidly. You can also try different values of \\(K, N, \\) and/or repetitions to see how the confusion matrix changes according. After you understand the concept of BPP, it is easy to understand bounded-error quantum polynomial time (BQP) now. BQP is the class of decision problems solvable by a quantum computer in polynomial time, with an error probability of at most 1/3 for all instances. It is the quantum analogue to the complexity class BPP. Actually, with a quantum computer, the previous problem can be solved using theDeutsch\u2013Jozsa algorithm. This algorithm utilizes a single query and is guaranteed to be correct always. The Fourier Checking problem that will be introduced later belongs to BQP as well. Fourier Transform over \\(\\mathbb{Z}^n_2\\) In this colab, we are interested in the boolean function of the form \\(f : \\{0, 1\\}^n \\rightarrow\\{-1, 1\\}\\). In this case, the Fourier transform of \\(f\\) over \\(\\mathbb{Z}^n_2\\) is defined as \\[ \\hat{f}(y) := \\frac{1}{\\sqrt{N} } \\sum_{x\\in\\{0,1\\}^n} (-1)^{x \\cdot y} f (x). \\] where \\(x \\cdot y\\) means the bit-wise inner product between \\(x\\) and \\(y\\). Note this is not the standard discrete Fourier transform definition over \\(\\mathbb{Z}_N\\). According to the Parseval's identity, we have \\[ \\sum_{x\\in\\{0,1\\}^n} f(x)^2 = \\sum_{y\\in\\{0,1\\}^n} \\hat{f}(y)^2 = N . \\] def bitwise_dot(x: int, y: int) -> int: \"\"\"Compute the dot product of two integers bitwise.\"\"\" i = x & y n = bin(i).count(\"1\") return int(n % 2) def fourier_transform_over_z2(v: np.ndarray) -> np.ndarray: \"\"\"Fourier transform function over z_2^n group. Args: v: an array with 2**n elements. Returns: vs: a numpy array with same length as input. \"\"\" N = len(v) assert bin(N).count(\"1\") == 1, \"v must be a 2**n long vector\" v_hat = np.array([0.0] * N) for y in range(N): for x in range(N): v_hat[y] += ((-1) ** bitwise_dot(x, y)) * v[x] return v_hat / np.sqrt(N) Let's have some examples in \\(\\mathbb{Z}^2_2\\). You should verify that both functions have same energy 4(as defined by Parseval's identity above). f = np.array([1, -1, 1, -1]) f_hat = fourier_transform_over_z2(f) print(f\"f: {list(f)} f_hat: {list(f_hat)}\") f = np.array([1, 1, 1, -1]) f_hat = fourier_transform_over_z2(f) print(f\"f: {list(f)} f_hat: {list(f_hat)}\") f = np.array([1, -1, -1, 1]) f_hat = fourier_transform_over_z2(f) print(f\"f: {list(f)} f_hat: {list(f_hat)}\") f: [np.int64(1), np.int64(-1), np.int64(1), np.int64(-1)] f_hat: [np.float64(0.0), np.float64(2.0), np.float64(0.0), np.float64(0.0)] f: [np.int64(1), np.int64(1), np.int64(1), np.int64(-1)] f_hat: [np.float64(1.0), np.float64(1.0), np.float64(1.0), np.float64(-1.0)] f: [np.int64(1), np.int64(-1), np.int64(-1), np.int64(1)] f_hat: [np.float64(0.0), np.float64(0.0), np.float64(0.0), np.float64(2.0)] Forrelation The concept of forrelation is the key concept in the Fourier checking problem, which is a combination of the words \"Fourier Transform\" and \"Correlation\". Recall the classical correlation between two vectors \\(u\\) and \\(v\\) is defined as \\[ {\\rm correlation}(u,v) = \\frac{ \\langle u, v \\rangle }{\\|u\\| \\|v\\|}. \\] Then, the forrelation between two vectors \\(u\\) and \\(v\\) is just the correlation between \\(u\\) and the Fourier trasformed of \\(v\\) -- denoted as \\(\\widehat{v}\\): \\begin{align} {\\rm forrelation}(u, v) =& \\frac{\\langle u, \\widehat{v} \\rangle }{|u| |\\widehat{v}|},\\ =& \\frac{ \\langle u, \\widehat{v} \\rangle }{|u| |v|}. \\end{align} where the second equality is due to the Parseval's identity. Since in this tutorial we are interesed in Boolean function, we replace the arbitrary vector \\(u\\) and \\(v\\) by the output of Boolean function \\(f\\) and \\(g\\). Now we can further simplify the above definition: \\[ \\begin{align} {\\rm forrelation}(f, g) =& \\frac{\\langle f, \\widehat{g} \\rangle }{\\|f\\| \\|g\\|}\\\\ =& \\frac{1}{N} \\langle f, \\widehat{g}\\rangle \\\\ =& \\frac{1}{N} \\sum_{x \\in \\{0,1\\}^n}f(x)\\widehat{g}(x)\\\\ =& \\frac{1}{N^{3/2} } \\sum_{x, y \\in \\{0,1\\}^n}f(x)(-1)^{x \\cdot y}g(y) \\end{align} \\] def get_correlation(f: np.ndarray, g: np.ndarray) -> np.ndarray: \"\"\"Returns the classical correlation between two 1-d numpy arrays.\"\"\" return f.dot(g) / np.linalg.norm(f) / np.linalg.norm(g) def get_forrelation(f: np.ndarray, g: np.ndarray) -> np.ndarray: \"\"\"Returns the forrelation over Z^2 between two 1-d numpy arrays.\"\"\" g_hat = fourier_transform_over_z2(g) return f.dot(g_hat) / np.linalg.norm(f) / np.linalg.norm(g) # let's see some examples to gain some insights of forrelation f = np.array([1, -1, 1, -1]) g = np.array([1, -1, 1, -1]) print(f\"Correlation: {get_correlation(f,g)} Forrelation: {get_forrelation(f,g)}\") f = np.array([1, 1, 1, -1]) g = np.array([-1, -1, -1, 1]) print(f\"Correlation: {get_correlation(f,g)} Forrelation: {get_forrelation(f,g)}\") f = np.array([1, -1, -1, 1]) g = np.array([1, 1, 1, 1]) print(f\"Correlation: {get_correlation(f,g)} Forrelation: {get_forrelation(f,g)}\") Correlation: 1.0 Forrelation: -0.5 Correlation: -1.0 Forrelation: -1.0 Correlation: 0.0 Forrelation: 0.5 Fourier Checking Problem Now we are prepared to discuss the Fourier Checking problem. Here we are given oracle access to two Boolean functions \\(f,g : \\{0, 1\\}^n \\rightarrow\\{-1, 1\\}\\). We are promised that one of the following two cases is true: \\(\\langle f, g \\rangle\\) was drawn from the uniform distribution \\(\\mathcal{U}\\). \\(\\langle f, g \\rangle\\) was drawn from the forrelated distribution \\(\\mathcal{F}\\) (Will be explained in more details later). The problem is a decision problem that accepts the \\(\\langle f, g \\rangle\\) if it was drawn from \\(\\mathcal{F}\\) and rejects \\(\\langle f, g \\rangle\\) if it was drawn from \\(\\mathcal{U}\\). Note: Since \\(\\mathcal{F}\\) and \\(\\mathcal{U}\\) overlap slightly, we can only hope to succeed with overwhelming probability over the choice of \\(\\langle f, g \\rangle\\) , not for every \\(\\langle f, g \\rangle\\) pair.* Generate functions \\(f\\) and \\(g\\) from distribution \\(\\mathcal U\\) and \\(\\mathcal F\\) The forrelated distribution \\(\\mathcal{F}\\) is generated as followings. First choose a random real vector \\(v=(v_x)_{x\\in\\{0, 1\\}^n} \\in \\mathbb{R}^N\\), by drawing each entry independently from Gaussian distribution with zero-mean and variance 1. Then set \\(f(x) := {\\rm sgn}(v_x)\\) and \\(g(x) := {\\rm sgn}(\\widehat{v}_x)\\), where \\(\\widehat{v}_x\\) the Fourier Transform of \\(v\\) is \\[ \\widehat{v}_y := \\frac{1}{\\sqrt{N} } \\sum_{x\\in\\{0,1\\}^n} (-1)^{x\\cdot y}v_x, \\] and \\[ {\\rm sgn}(\\alpha) := \\left\\{ \\begin{aligned} 1 \\;\\;\\; &{\\rm if}\\; \\alpha \\geq 0 \\\\ -1 \\;\\;\\;&{\\rm if}\\; \\alpha < 0 \\end{aligned}\\right. \\] Notice, \\(f\\) and \\(g\\) individually are still uniformly random, but they are no longer independent. Now \\(f\\) is forrelated with \\(g\\). For simplicity, we only consider the PROMISE FOURIER CHECKING problem. Under this situation, we are promised that the quatity: \\begin{align} p(f,g) := \\left[{\\rm forrelation}(f, g)\\right]^2 = \\frac{1}{N^3} \\left(\\sum_{x, y \\in {0,1}^n}f(x)(-1)^{x \\cdot y}g(y)\\right)^2 \\end{align} is either at least 0.05 or at most 0.01. def draw_two_distribution_from_f_set(N: int) -> tuple[np.ndarray, np.ndarray, float, float]: \"\"\"Samples two distributions from the 'F' set above. Uses a while loop to guarantee a forrelated pair \"as promised\". Returns: A tuple that contains the two distributions, and the correlation/forrelation. \"\"\" sgn = lambda x: 1 if x >= 0 else -1 forrelation = 0.2 while (abs(forrelation) ** 2 < 0.05) and (abs(forrelation) ** 2 > 0.01): vs = np.array([np.random.normal() for _ in range(N)]) vs_hat = fourier_transform_over_z2(vs) fs = np.array([sgn(v) for v in vs]) gs = np.array([sgn(v_hat) for v_hat in vs_hat]) forrelation = get_forrelation(fs, gs) correlation = get_correlation(fs, gs) return fs, gs, forrelation, correlation def draw_two_distribution_from_u_set(N: int) -> tuple[np.ndarray, np.ndarray, float, float]: \"\"\"Samples two distributions from the 'U' set above. Uses a while loop to guarantee a forrelated pair \"as promised\". Returns: A tuple that contains the two distributions, and the correlation/forrelation. \"\"\" sgn = lambda x: 1 if x >= 0 else -1 forrelation = 0.2 while (abs(forrelation) ** 2 < 0.05) and (abs(forrelation) ** 2 > 0.01): vs = np.array([np.random.normal() for _ in range(N)]) fs = np.array([sgn(v) for v in vs]) us = np.array([np.random.normal() for _ in range(N)]) gs = np.array([sgn(u) for u in us]) forrelation = get_forrelation(fs, gs) correlation = get_correlation(fs, gs) return fs, gs, forrelation, correlation n = 6 N = 2**n fs, gs, forrelation, correlation = draw_two_distribution_from_f_set(N) print('Correlation and forrelation from F set') print(f\"fs: {list(fs)}\") print(f\"gs: {list(gs)}\") print(f'Correlation: {correlation} Forrelation: {forrelation}') plt.figure(figsize=(15, 5)) plt.stem(fs) plt.stem(gs, linefmt='--r', markerfmt='ro') plt.title(f\"Two distributions from F set\") print('') print('Correlation and forrelation from U set') fs, gs, forrelation, correlation = draw_two_distribution_from_u_set(N) print(f\"fs: {list(fs)}\") print(f\"gs: {list(gs)}\") print(f'Correlation: {correlation} Forrelation: {forrelation}') plt.figure(figsize=(15, 5)) plt.stem(fs) plt.stem(gs, linefmt='--r', markerfmt='ro') _ = plt.title(f\"Two distributions from U set\") Correlation and forrelation from F set fs: [np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1)] gs: [np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1)] Correlation: 0.1875 Forrelation: 0.703125 Correlation and forrelation from U set fs: [np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1)] gs: [np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(-1), np.int64(1), np.int64(1), np.int64(1), np.int64(1)] Correlation: 0.0 Forrelation: -0.015625 Typically, \\(\\mathcal{U}\\) and \\(\\mathcal{F}\\) is not obviously different from each other even after we plot the whole functions information together. However, it is not hard to show that Fourier Checking is in BQP: basically, one can prepare a uniform superposition over all \\(x\\in\\{0,1\\}^n\\), then query \\(f\\), apply a quantum Fourier transform, query \\(g\\), and check whether one has recovered something close to the uniform superposition. On the other hand, being forrelated seems like an extremely \u201cglobal\u201d property of \\(f\\) and \\(g\\): one that would not be apparent from querying any small number of \\(f\\) and \\(g\\) values, regardless of the outcomes of those queries. Quantum Algorithm for Fourier Checking Now, we present the quantum algorithm for Fourier Checking, which is quite simple actually. It can achieve the constant error probability with \\(O(1)\\) query complexity. Algorithm Description: First, we prepare a uniform superposition over all \\(x \\in \\{0, 1\\}^n\\). Then query \\(f\\) in superposition, to create the state \\[ \\frac{1}{\\sqrt{N} } \\sum_{x \\in \\{0, 1\\}^n} f(x) |x\\rangle \\] Applying Hadmard gates to all \\(n\\) qubits, to create the state \\[ \\frac{1}{N} \\sum_{x,y \\in \\{0, 1\\}^n} f(x) (-1)^{x\\cdot y} |y\\rangle \\] Then query \\(g\\) in superposition, to create the state \\[ \\frac{1}{N} \\sum_{x,y \\in \\{0, 1\\}^n} f(x) (-1)^{x\\cdot y}g(y) |y\\rangle \\] Then apply Hadmard gates to all \\(n\\) qubits again, to create the state \\[ \\frac{1}{N^{3/2} } \\sum_{x,y \\in \\{0, 1\\}^n} f(x) (-1)^{x\\cdot y} g(y) (-1)^{y \\cdot z}|z\\rangle \\] Finally, measure in the computational basis, and \"accept\" if and only if the outcome \\(|0\\rangle^{\\otimes n}\\)is observed. If needed, repeat the whole algorithm \\(O(1)\\) times to boost the success probability. It is clear that the probability of observation \\(|0\\rangle^{\\otimes n}\\) equals the quantity: \\begin{align} p(f,g) := \\frac{1}{N^3} \\left(\\sum_{x, y \\in {0,1}^n}f(x)(-1)^{x \\cdot y}g(y)\\right)^2 \\end{align} It is shown in the paper that \\[ \\begin{align} {\\rm Pr}_{\\langle f, g \\rangle \\sim \\mathcal{U} } [p(f,g) \\geq 0.01] \\leq& \\; \\frac{100}{N} \\\\ {\\rm Pr}_{\\langle f, g \\rangle \\sim \\mathcal{F} } [p(f,g) \\geq 0.05] \\geq&\\;\\frac{1}{50} \\\\ \\end{align} \\] This implies that the probability of the forrelation square between two functions drawing from uniform distribution \\(\\mathcal{U}\\) having larger than 0.01 will decaying quickly when we have more number of qubits. Hence, the Promise Fourier Checking problem can be solved through simply accepting when \\(p(f,g) \\geq 0.05\\) and rejecting when \\(p(f,g) \\leq 0.01\\) with constant error probability, using \\(O(1)\\) queries to \\(f\\) and \\(g\\). Implementation in Cirq Above algorithm is simple and straightforward to implement. It only involves with Hadmard gates and function oracles. Implementation of oracles based on truth table in Cirq is just simple diagnal gates. To see that, let's use a oracle defined over \\(\\mathbb{Z}_2^2\\) as example: \\[ \\begin{align} \\sum_{x\\in \\{0, 1\\}^2} f(x)|x\\rangle =&\\frac{1}{2}\\Big(f(0,0)|00\\rangle + f(0,1)|01\\rangle+f(1,0)|10\\rangle + f(1,1) |11\\rangle\\Big)\\\\ =&\\;\\;\\left[ \\begin{array}{cccc} f(0,0) & & & \\\\ & f(1,0) & & \\\\ & & f(1,0) & \\\\ & & & f(1,1) \\\\ \\end{array} \\right] \\left[ \\begin{array}{c} 1/2\\\\ 1/2\\\\ 1/2\\\\ 1/2 \\end{array} \\right] \\end{align} \\] It is crucial to note that the output of \\(f\\) is either 1 or -1, so the diagonal matrix is unitary. def oracle(fs: np.ndarray, qubits: Sequence[cirq.Qid]) -> cirq.Operation: \"\"\"Construct a sample oracle using a function as above. This will create an operation with a unitary matrix that is diagonal and whose entries correspond to the values of the input function 'fs'. \"\"\" return cirq.MatrixGate(np.diag(fs).astype(complex))(*qubits) def fourier_checking_algorithm(qubits, fs, gs): \"\"\"Returns the circuit for Fourier Checking algorithm given an input.\"\"\" yield cirq.parallel_gate_op(cirq.H, *qubits) yield oracle(fs, qubits) yield cirq.parallel_gate_op(cirq.H, *qubits) yield oracle(gs, qubits) yield cirq.parallel_gate_op(cirq.H, *qubits) yield cirq.measure(*qubits) qubits = cirq.LineQubit.range(n) fs, gs, forrelation, correlation = draw_two_distribution_from_f_set(N) circuit = cirq.Circuit(fourier_checking_algorithm(qubits, fs, gs)) print(circuit) \u250c \u2510 \u250c \u2510 \u2502 1.+0.j 0.+0.j 0.+0.j ... 0.+0.j 0.+0.j 0.+0.j\u2502 \u2502 1.+0.j 0.+0.j 0.+0.j ... 0.+0.j 0.+0.j 0.+0.j\u2502 \u2502 0.+0.j 1.+0.j 0.+0.j ... 0.+0.j 0.+0.j 0.+0.j\u2502 \u2502 0.+0.j -1.+0.j 0.+0.j ... 0.+0.j 0.+0.j 0.+0.j\u2502 \u2502 0.+0.j 0.+0.j -1.+0.j ... 0.+0.j 0.+0.j 0.+0.j\u2502 \u2502 0.+0.j 0.+0.j -1.+0.j ... 0.+0.j 0.+0.j 0.+0.j\u2502 0: \u2500\u2500\u2500H\u2500\u2500\u2500\u2502 ... \u2502\u2500\u2500\u2500H\u2500\u2500\u2500\u2502 ... \u2502\u2500\u2500\u2500H\u2500\u2500\u2500M\u2500\u2500\u2500 \u2502 0.+0.j 0.+0.j 0.+0.j ... 1.+0.j 0.+0.j 0.+0.j\u2502 \u2502 0.+0.j 0.+0.j 0.+0.j ... -1.+0.j 0.+0.j 0.+0.j\u2502 \u2502 \u2502 0.+0.j 0.+0.j 0.+0.j ... 0.+0.j 1.+0.j 0.+0.j\u2502 \u2502 0.+0.j 0.+0.j 0.+0.j ... 0.+0.j 1.+0.j 0.+0.j\u2502 \u2502 \u2502 0.+0.j 0.+0.j 0.+0.j ... 0.+0.j 0.+0.j -1.+0.j\u2502 \u2502 0.+0.j 0.+0.j 0.+0.j ... 0.+0.j 0.+0.j 1.+0.j\u2502 \u2502 \u2514 \u2518 \u2514 \u2518 \u2502 \u2502 \u2502 \u2502 1: \u2500\u2500\u2500H\u2500\u2500\u2500#2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500#2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M\u2500\u2500\u2500 \u2502 \u2502 \u2502 2: \u2500\u2500\u2500H\u2500\u2500\u2500#3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500#3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M\u2500\u2500\u2500 \u2502 \u2502 \u2502 3: \u2500\u2500\u2500H\u2500\u2500\u2500#4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500#4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M\u2500\u2500\u2500 \u2502 \u2502 \u2502 4: \u2500\u2500\u2500H\u2500\u2500\u2500#5\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500#5\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M\u2500\u2500\u2500 \u2502 \u2502 \u2502 5: \u2500\u2500\u2500H\u2500\u2500\u2500#6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500#6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M\u2500\u2500\u2500 We derived that the square forrelation between \\(f\\) and \\(g\\) is the same as the state of final state in circuit so we can use Cirq to check it. Just remember the final state is never able to be obtained in reality. In simulation, it is completely doable through final_state_vector or the dirac_notation of each moment step: assert np.isclose( circuit.final_state_vector(ignore_terminal_measurements=True, dtype=np.complex64)[0], forrelation, ) s = cirq.Simulator() for step in s.simulate_moment_steps(circuit): print(step.dirac_notation()) print(\"|0> state probability to observe: \", np.abs(step.state_vector(copy=True)[0]) ** 2) 0.12|000000\u27e9 + 0.12|000001\u27e9 + 0.12|000010\u27e9 + 0.12|000011\u27e9 + 0.12|000100\u27e9 + 0.12|000101\u27e9 + 0.12|000110\u27e9 + 0.12|000111\u27e9 + 0.12|001000\u27e9 + 0.12|001001\u27e9 + 0.12|001010\u27e9 + 0.12|001011\u27e9 + 0.12|001100\u27e9 + 0.12|001101\u27e9 + 0.12|001110\u27e9 + 0.12|001111\u27e9 + 0.12|010000\u27e9 + 0.12|010001\u27e9 + 0.12|010010\u27e9 + 0.12|010011\u27e9 + 0.12|010100\u27e9 + 0.12|010101\u27e9 + 0.12|010110\u27e9 + 0.12|010111\u27e9 + 0.12|011000\u27e9 + 0.12|011001\u27e9 + 0.12|011010\u27e9 + 0.12|011011\u27e9 + 0.12|011100\u27e9 + 0.12|011101\u27e9 + 0.12|011110\u27e9 + 0.12|011111\u27e9 + 0.12|100000\u27e9 + 0.12|100001\u27e9 + 0.12|100010\u27e9 + 0.12|100011\u27e9 + 0.12|100100\u27e9 + 0.12|100101\u27e9 + 0.12|100110\u27e9 + 0.12|100111\u27e9 + 0.12|101000\u27e9 + 0.12|101001\u27e9 + 0.12|101010\u27e9 + 0.12|101011\u27e9 + 0.12|101100\u27e9 + 0.12|101101\u27e9 + 0.12|101110\u27e9 + 0.12|101111\u27e9 + 0.12|110000\u27e9 + 0.12|110001\u27e9 + 0.12|110010\u27e9 + 0.12|110011\u27e9 + 0.12|110100\u27e9 + 0.12|110101\u27e9 + 0.12|110110\u27e9 + 0.12|110111\u27e9 + 0.12|111000\u27e9 + 0.12|111001\u27e9 + 0.12|111010\u27e9 + 0.12|111011\u27e9 + 0.12|111100\u27e9 + 0.12|111101\u27e9 + 0.12|111110\u27e9 + 0.12|111111\u27e9 |0> state probability to observe: 0.015625 0.12|000000\u27e9 + 0.12|000001\u27e9 - 0.12|000010\u27e9 - 0.12|000011\u27e9 - 0.12|000100\u27e9 - 0.12|000101\u27e9 + 0.12|000110\u27e9 + 0.12|000111\u27e9 - 0.12|001000\u27e9 + 0.12|001001\u27e9 - 0.12|001010\u27e9 + 0.12|001011\u27e9 - 0.12|001100\u27e9 - 0.12|001101\u27e9 - 0.12|001110\u27e9 - 0.12|001111\u27e9 - 0.12|010000\u27e9 + 0.12|010001\u27e9 - 0.12|010010\u27e9 - 0.12|010011\u27e9 - 0.12|010100\u27e9 + 0.12|010101\u27e9 - 0.12|010110\u27e9 + 0.12|010111\u27e9 + 0.12|011000\u27e9 + 0.12|011001\u27e9 + 0.12|011010\u27e9 + 0.12|011011\u27e9 - 0.12|011100\u27e9 - 0.12|011101\u27e9 + 0.12|011110\u27e9 + 0.12|011111\u27e9 - 0.12|100000\u27e9 - 0.12|100001\u27e9 + 0.12|100010\u27e9 + 0.12|100011\u27e9 - 0.12|100100\u27e9 + 0.12|100101\u27e9 + 0.12|100110\u27e9 + 0.12|100111\u27e9 - 0.12|101000\u27e9 + 0.12|101001\u27e9 - 0.12|101010\u27e9 + 0.12|101011\u27e9 + 0.12|101100\u27e9 - 0.12|101101\u27e9 - 0.12|101110\u27e9 - 0.12|101111\u27e9 + 0.12|110000\u27e9 + 0.12|110001\u27e9 + 0.12|110010\u27e9 + 0.12|110011\u27e9 - 0.12|110100\u27e9 - 0.12|110101\u27e9 - 0.12|110110\u27e9 + 0.12|110111\u27e9 + 0.12|111000\u27e9 + 0.12|111001\u27e9 + 0.12|111010\u27e9 - 0.12|111011\u27e9 + 0.12|111100\u27e9 + 0.12|111101\u27e9 + 0.12|111110\u27e9 - 0.12|111111\u27e9 |0> state probability to observe: 0.015625 0.06|000000\u27e9 - 0.19|000001\u27e9 - 0.06|000010\u27e9 - 0.06|000011\u27e9 + 0.19|000100\u27e9 - 0.06|000101\u27e9 + 0.19|000110\u27e9 - 0.06|000111\u27e9 - 0.12|001001\u27e9 - 0.12|001010\u27e9 - 0.12|001100\u27e9 + 0.25|001101\u27e9 + 0.12|001110\u27e9 - 0.19|010000\u27e9 - 0.06|010001\u27e9 - 0.06|010010\u27e9 + 0.06|010011\u27e9 - 0.06|010100\u27e9 - 0.19|010101\u27e9 - 0.06|010110\u27e9 + 0.06|010111\u27e9 + 0.25|011000\u27e9 + 0.25|011001\u27e9 - 0.12|011010\u27e9 - 0.12|011011\u27e9 - 0.12|011100\u27e9 + 0.12|011101\u27e9 + 0.12|011110\u27e9 + 0.12|011111\u27e9 - 0.12|100000\u27e9 - 0.12|100001\u27e9 + 0.25|100110\u27e9 - 0.06|101000\u27e9 + 0.06|101001\u27e9 + 0.31|101010\u27e9 - 0.06|101011\u27e9 - 0.19|101100\u27e9 - 0.06|101101\u27e9 + 0.06|101110\u27e9 - 0.06|101111\u27e9 + 0.12|110001\u27e9 + 0.12|110010\u27e9 + 0.12|110100\u27e9 + 0.12|110110\u27e9 + 0.06|111000\u27e9 + 0.06|111001\u27e9 - 0.06|111010\u27e9 + 0.19|111011\u27e9 + 0.19|111100\u27e9 - 0.06|111101\u27e9 + 0.19|111110\u27e9 - 0.06|111111\u27e9 |0> state probability to observe: 0.00390625 0.06|000000\u27e9 + 0.19|000001\u27e9 + 0.06|000010\u27e9 + 0.06|000011\u27e9 + 0.19|000100\u27e9 + 0.06|000101\u27e9 + 0.19|000110\u27e9 + 0.06|000111\u27e9 - 0.12|001001\u27e9 + 0.12|001010\u27e9 + 0.12|001100\u27e9 + 0.25|001101\u27e9 + 0.12|001110\u27e9 + 0.19|010000\u27e9 + 0.06|010001\u27e9 + 0.06|010010\u27e9 + 0.06|010011\u27e9 + 0.06|010100\u27e9 + 0.19|010101\u27e9 - 0.06|010110\u27e9 + 0.06|010111\u27e9 + 0.25|011000\u27e9 + 0.25|011001\u27e9 + 0.12|011010\u27e9 + 0.12|011011\u27e9 + 0.12|011100\u27e9 + 0.12|011101\u27e9 - 0.12|011110\u27e9 + 0.12|011111\u27e9 + 0.12|100000\u27e9 + 0.12|100001\u27e9 + 0.25|100110\u27e9 - 0.06|101000\u27e9 + 0.06|101001\u27e9 + 0.31|101010\u27e9 + 0.06|101011\u27e9 + 0.19|101100\u27e9 - 0.06|101101\u27e9 + 0.06|101110\u27e9 + 0.06|101111\u27e9 + 0.12|110001\u27e9 + 0.12|110010\u27e9 + 0.12|110100\u27e9 + 0.12|110110\u27e9 - 0.06|111000\u27e9 + 0.06|111001\u27e9 + 0.06|111010\u27e9 + 0.19|111011\u27e9 + 0.19|111100\u27e9 + 0.06|111101\u27e9 + 0.19|111110\u27e9 - 0.06|111111\u27e9 |0> state probability to observe: 0.00390625 0.66|000000\u27e9 + 0.12|000001\u27e9 + 0.06|000010\u27e9 - 0.09|000011\u27e9 - 0.09|000101\u27e9 - 0.09|000110\u27e9 - 0.06|000111\u27e9 - 0.03|001000\u27e9 + 0.06|001010\u27e9 - 0.03|001011\u27e9 - 0.03|001101\u27e9 + 0.22|001110\u27e9 + 0.06|001111\u27e9 - 0.03|010000\u27e9 + 0.12|010001\u27e9 - 0.12|010010\u27e9 - 0.09|010011\u27e9 - 0.12|010100\u27e9 - 0.03|010101\u27e9 + 0.03|010110\u27e9 + 0.09|011000\u27e9 - 0.06|011001\u27e9 + 0.06|011010\u27e9 + 0.03|011011\u27e9 + 0.06|011100\u27e9 - 0.16|011101\u27e9 + 0.16|011110\u27e9 + 0.06|011111\u27e9 + 0.09|100000\u27e9 - 0.12|100001\u27e9 + 0.19|100010\u27e9 + 0.09|100011\u27e9 + 0.22|100101\u27e9 - 0.03|100110\u27e9 + 0.06|100111\u27e9 + 0.03|101000\u27e9 - 0.06|101010\u27e9 + 0.03|101011\u27e9 - 0.09|101101\u27e9 - 0.09|101110\u27e9 - 0.06|101111\u27e9 - 0.03|110000\u27e9 + 0.06|110001\u27e9 - 0.06|110010\u27e9 - 0.09|110011\u27e9 - 0.19|110100\u27e9 - 0.16|110101\u27e9 - 0.09|110110\u27e9 + 0.06|110111\u27e9 + 0.09|111000\u27e9 + 0.03|111011\u27e9 + 0.12|111100\u27e9 - 0.03|111101\u27e9 + 0.03|111110\u27e9 - 0.25|111111\u27e9 |0> state probability to observe: 0.43066406 -1|110101\u27e9 |0> state probability to observe: 0.0 final_state = circuit.final_state_vector(ignore_terminal_measurements=True, dtype=np.complex64) plt.fill_between(np.arange(len(final_state)), np.abs(final_state) ** 2) plt.xlabel(\"State of qubits\") plt.ylabel(\"Probability\") plt.show() In reality, we can measure the state of qubits only. Each measurement will only produce one state. In order to estimate the probability, we can do 100 repetitions and use the frequency of the 0 state as the approximation of its probability. repetitions = 100 obs = s.run(circuit, repetitions=repetitions) qubits_name = ','.join(str(q) for q in qubits) times_zero_was_measured = len(obs.data[obs.data[qubits_name] == 0]) print( f\"times zero state was measured from {repetitions} measurements:\" + f\"{times_zero_was_measured} - {float(times_zero_was_measured/repetitions)*100}%\" ) if float(times_zero_was_measured / repetitions) > 0.05: print(\"fs and gs is forrelated!\") times zero state was measured from 100 measurements:40 - 40.0% fs and gs is forrelated! Last, we can randomly draw the functions from either \\(\\mathcal{U}\\) or \\(\\mathcal{F}\\) set to evaluate the confusion matrix of the Fourier Checking algorithm. With the confusion matrix, you should be confident that quantum algorithm instead can solve the Fourier Checking in \\(O(1)\\) time -- even though we need to measure 100 or 1000 times to evaluate the probability, it is irrelevant to the number of states or qubits. res = pd.DataFrame() repetitions = 100 num_rounds = 1000 for _ in range(num_rounds): if np.random.rand() > 0.5: fs, gs, _, _ = draw_two_distribution_from_f_set(N) source = \"F set\" else: fs, gs, _, _ = draw_two_distribution_from_u_set(N) source = \"U set\" circuit = cirq.Circuit(fourier_checking_algorithm(qubits, fs, gs)) obs = s.run(circuit, repetitions=repetitions) times_zero_was_measured = len(obs.data[obs.data[qubits_name] == 0]) decision = \"accept\" if times_zero_was_measured / repetitions > 0.05 else \"reject\" res = pd.concat( [res, pd.DataFrame({\"Source\": [source], \"Decision\": [decision], \"Count\": [1]})], ignore_index=True, ) confusion = res.pivot_table(index=\"Source\", columns=\"Decision\", values=\"Count\", aggfunc=\"sum\") # Translate the counts into percentage confusion.div(confusion.sum(axis=1), axis=0).apply(lambda x: round(x, 4) * 100) Query Complexity of Quantum Algorithm Versus the Classical one After we present the quantum algorithm, it is time to look back to classical algorithm for comparison. It is not hard to give a classical algorithm that solves Fourier Checking using \\(O(\\sqrt{N}) = O(2^{n/2})\\) queries, which is similar as we did in the BPP section. For some \\(K=\\Theta(\\sqrt{N})\\), first choose sets \\(X=\\{x_1,\\ldots, x_K\\}\\) and \\(Y = \\{y_1, \\ldots, y_K\\}\\) of \\(n-\\)bit strings uniformly at random. Then query \\(f(x_i)\\) and \\(g(y_i)\\) for all \\(i \\in [K]\\). Finally, compute \\[ Z := \\sum_{i,j=1}^K f(x_i) (-1)^{x_i\\cdot y_j} g(y_j) \\] accept if \\(|Z|\\) is greater than some cutoff \\(cK\\), and reject otherwise. For suitable \\(K\\) and \\(c\\), one can show that this algorithm accepts a forrelated \\(\\langle f, g \\rangle\\) pair with probability at least \\(2/3\\). Comparing this with \\(O(1)\\) complexity in quantum query, we can see an exponential speedup by using quantum computer. Further reading The Forrelation problem was originally introduced in [1]. Later, a \\(k\\)-fold Forrelation problem was introduced in [2], which considered the forrelation between \\(k\\) oracle functions. In that paper, it also improved the proof about the separation of forrelation problem from \\(\\Omega\\left(\\sqrt[4]{N}\\right)\\) to \\(\\tilde{\\Omega}\\left(\\sqrt{N}\\right)\\), which can not be further improved. Thus, resolving an open question of Buhrman et al., there is NO partial Boolean function whose quantum query complexity is constant and whose randomized query complexity is linear. [1] Scott Aaronson. BQP and the Polynomial Hierarchy. STOC \u201910, page 141\u2013150, New York, NY, USA, 2010. arXiv [2] Scott Aaronson and Andris Ambainis. Forrelation: A problem that optimally separates quantum from classical computing. SIAM J. Comput., 47(3):982\u20131038, 2018. arXiv Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-05-30 UTC.",
    "url": "https://quantumai.google/cirq/experiments/fourier_checking",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 5035,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:10.689916"
  },
  {
    "id": "cirq_-8843451306539121822_0",
    "title": "Data collection idioms \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Data collection idioms Running meaningful experiments on quantum hardware requires the structured collection of experimental data and flexible analysis pipelines to draw conclusions from raw data. This documentation describes a collection of idioms to reference when developing experimental pipelines. Honed via real experience, studies in this project use these ideas, and we encourage users to adopt these conventions in their own experiments. We introduce the concepts by way of example. Design philosophy In the first tutorial, we run a simple readout-like experiment in two steps: Data Collection Analysis In the future, we can explore documenting more complicated set-ups like Separate problem generation step More complicated dependencies between tasks Multiple analysis routines for one data-collection Computationally intensive analysis and more! Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/guide/data_collection_idioms",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 175,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:13.698279"
  },
  {
    "id": "cirq_5164777264801464674_0",
    "title": "QAOA Tasks \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments QAOA Tasks View on QuantumAI Run in Google Colab View source on GitHub Download notebook Setup Install the ReCirq package: try: import recirq except ImportError: !pip install git+https://github.com/quantumlib/ReCirq And import ReCirq: import recirq Problem generation First, we generate and save all of the random instances of the problem. This is not computationally intensive but very important to do first so we have a fixed set of random instances. from recirq.qaoa.experiments.problem_generation_tasks import \\ SKProblemGenerationTask, HardwareGridProblemGenerationTask, ThreeRegularProblemGenerationTask, \\ generate_3_regular_problem, generate_sk_problem, generate_hardware_grid_problem pgen_dataset_id = '2020-03-tutorial' hardware_grid_problem_tasks = [ HardwareGridProblemGenerationTask( dataset_id=pgen_dataset_id, device_name='Sycamore23', instance_i=i, n_qubits=n ) for i in range(5) for n in range(2, 8 + 1, 2) ] recirq.display_markdown_docstring(HardwareGridProblemGenerationTask) HardwareGridProblemGenerationTask Generate 'Hardware Grid' problems for a named device. This is a subgraph of the device's hardware topology with random +-1 weights on edges. See Also generate_hardware_grid_problem Attributes dataset_id: A unique identifier for this dataset. device_name: The device to generate problems for. instance_i: Generate random instances indexed by this number. n_qubits: Generate an n-qubit instance. sk_problem_tasks = [ SKProblemGenerationTask( dataset_id=pgen_dataset_id, instance_i=i, n_qubits=n ) for i in range(5) for n in range(3, 7 + 1, 2) ] recirq.display_markdown_docstring(SKProblemGenerationTask) SKProblemGenerationTask Generate a Sherrington-Kirkpatrick problem. This is a complete (fully-connected) graph with random +-1 weights on edges. See Also generate_sk_problem Attributes dataset_id: A unique identifier for this dataset. instance_i: Generate random instances indexed by this number. n_qubits: Generate an n-qubit instance. three_regular_problem_tasks = [ ThreeRegularProblemGenerationTask( dataset_id=pgen_dataset_id, instance_i=i, n_qubits=n ) for i in range(5) for n in range(3, 8 + 1) if 3 * n % 2 == 0 ] Run the tasks for task in hardware_grid_problem_tasks: generate_hardware_grid_problem(task) for task in sk_problem_tasks: generate_sk_problem(task) for task in three_regular_problem_tasks: generate_3_regular_problem(task) Angle precomputation from recirq.qaoa.experiments.angle_precomputation_tasks import \\ AnglePrecomputationTask, precompute_angles apre_dataset_id = '2020-03-tutorial' precompute_tasks = [ AnglePrecomputationTask( dataset_id=apre_dataset_id, generation_task=gen_task, p=p) for gen_task in recirq.roundrobin( hardware_grid_problem_tasks, sk_problem_tasks, three_regular_problem_tasks, ) for p in range(1, 3 + 1) ] recirq.display_markdown_docstring(AnglePrecomputationTask) AnglePrecomputationTask Pre-compute optimized angles classically for a given problem. See Also precompute_angles Attributes dataset_id: A unique identifier for this dataset. generation_task: The input task which specifies the problem. p: QAOA depth hyperparameter p. The number of parameters is 2*p. for task in precompute_tasks: precompute_angles(task) Precomputed angle data collection from recirq.qaoa.experiments.precomputed_execution_tasks import \\ PrecomputedDataCollectionTask, collect_data dcol_dataset_id = '2020-03-tutorial' data_collection_tasks = [ PrecomputedDataCollectionTask( dataset_id=dcol_dataset_id, precomputation_task=pre_task, device_name='Syc23-simulator', n_shots=50_000, structured=True, ) for pre_task in precompute_tasks ] recirq.display_markdown_docstring(PrecomputedDataCollectionTask) PrecomputedDataCollectionTask PrecomputedDataCollectionTask(dataset_id: str, precomputation_task: recirq.qaoa.experiments.angle_precomputation_tasks.AnglePrecomputationTask, device_name: str, n_shots: int, structured: bool = False, echoed: bool = False) await recirq.execute_in_queue(collect_data, data_collection_tasks, num_workers=2) Landscape data collection from recirq.qaoa.experiments.p1_landscape_tasks import \\ P1LandscapeDataCollectionTask, \\ get_data_collection_tasks_on_a_grid, \\ collect_either_landscape_or_cal recirq.display_markdown_docstring(P1LandscapeDataCollectionTask) P1LandscapeDataCollectionTask Collect data for a p=1 landscape This task does exactly one (beta, gamma) point. You will have to run many of these tasks to get a full landscape See Also collect_p1_landscape_data Attributes dataset_id: A unique identifier for this dataset. generation_task: The task specifying the problem to collect data for device_name: The device to run on n_shots: The number of shots to take gamma: The problem unitary parameter gamma beta: The driver unitary parameter beta line_placement_strategy: Only used for SK model problems. Options include 'brute_force', 'random', 'greedy', 'anneal', 'mst', and 'mixed'. hardware_grid_problem_task = HardwareGridProblemGenerationTask( dataset_id=pgen_dataset_id, device_name='Sycamore23', instance_i=0, n_qubits=4 ) data_collection_tasks = get_data_collection_tasks_on_a_grid( pgen_task=hardware_grid_problem_task, dataset_id=dcol_dataset_id, gamma_res=11, beta_res=11, device_name='Syc23-simulator', epoch=\"grid\") await recirq.execute_in_queue(collect_either_landscape_or_cal, data_collection_tasks, num_workers=2) sk_problem_task = SKProblemGenerationTask( dataset_id=pgen_dataset_id, instance_i=0, n_qubits=3, ) data_collection_tasks = get_data_collection_tasks_on_a_grid( pgen_task=sk_problem_task, dataset_id=dcol_dataset_id, gamma_res=11, beta_res=11, device_name='Syc23-simulator', epoch=\"sk\") await recirq.execute_in_queue(collect_either_landscape_or_cal, data_collection_tasks, num_workers=2) three_regular_problem_task = ThreeRegularProblemGenerationTask( dataset_id=pgen_dataset_id, instance_i=0, n_qubits=4 ) data_collection_tasks = get_data_collection_tasks_on_a_grid( pgen_task=three_regular_problem_task, dataset_id=dcol_dataset_id, device_name='Syc23-simulator', gamma_res=11, beta_res=11, epoch=\"tr\") await recirq.execute_in_queue(collect_either_landscape_or_cal, data_collection_tasks, num_workers=2) Optimization Data Collection from recirq.qaoa.experiments.optimization_tasks import \\ OptimizationAlgorithm, \\ OptimizationTask, \\ collect_optimization_data recirq.display_markdown_docstring(OptimizationTask) optimization_algorithm = OptimizationAlgorithm( method='MGD', n_shots=25000, options={ 'max_iterations': 10, 'rate': 0.3, 'sample_radius': 0.1, 'n_sample_points_ratio': 1.0, 'rate_decay_exponent': 0.4, 'stability_constant': 250, 'sample_radius_decay_exponent': 0.08, }) hardware_grid_optimization_task = OptimizationTask( dataset_id=dcol_dataset_id, generation_task=hardware_grid_problem_task, device_name='Syc23-simulator', p=1, algorithm=optimization_algorithm, x0=[0.3, 0.2]) collect_optimization_data(hardware_grid_optimization_task) optimization_algorithm = OptimizationAlgorithm( method='MGD', n_shots=25000, options={ 'max_iterations': 10, 'rate': 0.3, 'sample_radius': 0.1, 'n_sample_points_ratio': 1.0, 'rate_decay_exponent': 0.3, 'stability_constant': 200, 'sample_radius_decay_exponent': 0.08, }) sk_optimization_task = OptimizationTask( dataset_id=dcol_dataset_id, generation_task=sk_problem_task, device_name='Syc23-simulator', p=1, algorithm=optimization_algorithm, x0=[0.3, 0.2]) collect_optimization_data(sk_optimization_task) optimization_algorithm = OptimizationAlgorithm( method='MGD', n_shots=25000, options={ 'max_iterations': 10, 'rate': 0.2, 'sample_radius': 0.1, 'n_sample_points_ratio': 1.0, 'rate_decay_exponent': 0.4, 'stability_constant': 250, 'sample_radius_decay_exponent': 0.08, }) three_regular_optimization_task = OptimizationTask( dataset_id=dcol_dataset_id, generation_task=three_regular_problem_task, device_name='Syc23-simulator', p=1, algorithm=optimization_algorithm, x0=[0.3, 0.2]) collect_optimization_data(three_regular_optimization_task) Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qaoa/tasks",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 728,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:16.671073"
  },
  {
    "id": "cirq_-2278805400749168533_0",
    "title": "Textbook algorithms in Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Textbook algorithms in Cirq View on QuantumAI Run in Google Colab View source on GitHub Download notebook In this notebook we'll run through some Cirq implementations of some of the standard algorithms that one encounters in an introductory quantum computing course. In particular, we will discuss the quantum teleportation algorithm, quantum Fourier transform, phase estimation algorithm, and Grover's algorithm. The discussion here is expanded from examples found in the Cirq examples directory. try: import cirq except ImportError: print(\"installing cirq...\") !pip install cirq --quiet import cirq print(\"installed cirq.\") import random import matplotlib.pyplot as plt import numpy as np Quantum teleportation Quantum teleportation is a process by which a quantum state can be transmitted by sending only two classical bits of information. This is accomplished by pre-sharing an entangled state between the sender (Alice) and the receiver (Bob). This entangled state allows the receiver (Bob) of the two classical bits of information to possess a qubit with the same state as the one held by the sender (Alice). In the cell below, we define a function which implements the circuit for quantum teleportation. This function inputs a gate which prepares the message qubit in some state to transmit from Alice to Bob. For more background on quantum teleportation or to see the mathematics of why it works, check out the original paper or the Wikipedia page. def make_quantum_teleportation_circuit(gate): \"\"\"Returns a circuit for quantum teleportation. This circuit 'teleports' a random qubit state prepared by the input gate from Alice to Bob. \"\"\" circuit = cirq.Circuit() # Get the three qubits involved in the teleportation protocol. msg = cirq.NamedQubit(\"Message\") alice = cirq.NamedQubit(\"Alice\") bob = cirq.NamedQubit(\"Bob\") # The input gate prepares the message to send. circuit.append(gate(msg)) # Create a Bell state shared between Alice and Bob. circuit.append([cirq.H(alice), cirq.CNOT(alice, bob)]) # Bell measurement of the Message and Alice's entangled qubit. circuit.append([cirq.CNOT(msg, alice), cirq.H(msg), cirq.measure(msg, alice)]) # Uses the two classical bits from the Bell measurement to recover the # original quantum message on Bob's entangled qubit. circuit.append([cirq.CNOT(alice, bob), cirq.CZ(msg, bob)]) return circuit Now, we define a gate to prepare the message qubit in some state, then visualize the teleportation circuit. \"\"\"Visualize the teleportation circuit.\"\"\" # Gate to put the message qubit in some state to send. gate = cirq.X**0.25 # Create the teleportation circuit. circuit = make_quantum_teleportation_circuit(gate) print(\"Teleportation circuit:\\n\") print(circuit) Teleportation circuit: Alice: \u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 Bob: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500X\u2500\u2500\u2500@\u2500\u2500\u2500 \u2502 \u2502 \u2502 Message: \u2500\u2500\u2500X^0.25\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500H\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500 As discussed, at the end of the circuit, Bob's qubit will be the state of the message qubit. We can verify this by simulating the circuit. First, we check what the state of the message qubit is given the above gate. \"\"\"Display the Bloch vector of the message qubit.\"\"\" message = cirq.Circuit(gate.on(cirq.NamedQubit(\"Message\"))).final_state_vector() message_bloch_vector = cirq.bloch_vector_from_state_vector(message, index=0) print(\"Bloch vector of message qubit:\") print(np.round(message_bloch_vector, 3)) Bloch vector of message qubit: [ 0. -0.707 0.707] Now we simulate the entire teleportation circuit and check what the final state of Bob's qubit is. \"\"\"Simulate the teleportation circuit and get the final state of Bob's qubit.\"\"\" # Get a simulator. sim = cirq.Simulator() # Simulate the teleportation circuit. result = sim.simulate(circuit) # Get the Bloch vector of Bob's qubit. bobs_bloch_vector = cirq.bloch_vector_from_state_vector(result.final_state_vector, index=1) print(\"Bloch vector of Bob's qubit:\") print(np.round(bobs_bloch_vector, 3)) # Verify they are the same state! np.testing.assert_allclose(bobs_bloch_vector, message_bloch_vector, atol=1e-6) Bloch vector of Bob's qubit: [ 0. -0.707 0.707] As we can see, the final state of Bob's qubit is the same as the initial state of the message qubit! One can change the gate above and re-run the protocol. The final state of Bob's qubit will always be the initial state of the message qubit. Quantum Fourier transform This section provides an overview of the quantum Fourier transform which we use in the next section for the phase estimation algorithm. Overview of the quantum Fourier transform We'll start out by reminding ourselves what the quantum Fourier transform does, and how it should be constructed. Suppose we have an \\(n\\)-qubit state \\(|x\\rangle\\) where \\(x\\) is an integer in the range \\(0\\) to \\(2^{n}-1\\). (That is, \\(|x\\rangle\\) is a computational basis state.) The quantum Fourier transform (QFT) performs the following operation: \\[ \\text{QFT}|x\\rangle = \\frac{1}{2^{n/2} } \\sum_{y=0}^{2^n-1} e^{2\\pi i y x/2^n} |y\\rangle. \\] Note: The QFT maps from the computational basis to the frequency basis. Though it may not be obvious at first glance, the QFT is actually a unitary transformation. As a matrix, the QFT is given by \\[ \\text{QFT} = \\begin{bmatrix} 1 & 1 & 1& \\cdots &1 \\\\ 1 & \\omega & \\omega^2& \\cdots &\\omega^{2^n-1} \\\\ 1 & \\omega^2 & \\omega^4& \\cdots &\\omega^{2(2^n-1)}\\\\ \\vdots &\\vdots &\\vdots &\\ddots &\\vdots \\\\ 1 &\\omega^{2^n-1} &\\omega^{2(2^n-1)} &\\cdots &\\omega^{(2^n-1)(2^n-1)}, \\end{bmatrix} \\] where \\(\\omega = e^{2\\pi i /2^n}\\). If you believe that the QFT is unitary, then you'll also notice from the matrix form that its inverse is given by a similar expression but with complex-conjugated coefficients: \\[ \\text{QFT}^{-1}|x\\rangle = \\frac{1}{2^{n/2} } \\sum_{y=0}^{2^n-1} e^{-2\\pi i y x/2^n} |y\\rangle. \\] The construction of the QFT as a circuit follows a simple recursive form, though fully justifying it will take us too far from the main goal of this notebook. We really only need to know what the circuit looks like, and for that we can look at the following diagram: Here, \\(x_j\\) represents the \\(j\\)th bit of the input \\(x\\). The most significant bit is \\(x_1\\) and the least significant bit is \\(x_n\\) so that \\[ x = \\sum_{j=0}^{n-1} x_{j+1}2^j. \\] As usual, \\(H\\) is the Hadamard gate. The Controlled-\\(R_j\\) gates are phase gates similar to the Controlled-\\(Z\\) gate. In fact, for us it will be useful to just think of them as fractional powers of Controlled-\\(Z\\) gates: \\[ CR_j = CZ^{\\large 1/2^{j-1} } \\] Finally, on the far right of the above diagram we have the output representing the bits of \\(y\\). The only difference between the left and right side is that the output bits are in reversed order: the most significant bit of \\(y\\) is on the bottom and the least significant bit of \\(y\\) is on the top. One can reverse this by including Swap gates at the end of the circuit. Quantum Fourier transform as a circuit Let's define a generator which produces the QFT circuit. It should accept a list of qubits as input and yields the gates to construct the QFT in the right order. A useful observation is that the QFT circuit \"repeats\" smaller versions of itself as you move from left to right across the diagram. def make_qft(qubits): \"\"\"Generator for the QFT on a list of qubits. For four qubits, the answer is: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 0: \u2500\u2500\u2500H\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 1: \u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.5\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.25\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500@^0.5\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 3: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^(1/8)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.25\u2500\u2500\u2500\u2500\u2500@^0.5\u2500\u2500\u2500H\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \"\"\" # Your code here! Solution def make_qft(qubits): \"\"\"Generator for the QFT on a list of qubits.\"\"\" qreg = list(qubits) while len(qreg) > 0: q_head = qreg.pop(0) yield cirq.H(q_head) for i, qubit in enumerate(qreg): yield (cirq.CZ ** (1 / 2 ** (i + 1)))(qubit, q_head) We can check the solution agrees with the above diagram by printing it out for a small number of qubits. \"\"\"Visually check the QFT circuit.\"\"\" qubits = cirq.LineQubit.range(4) qft = cirq.Circuit(make_qft(qubits)) print(qft) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 0: \u2500\u2500\u2500H\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 1: \u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.5\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.25\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500@^0.5\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 3: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^(1/8)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^0.25\u2500\u2500\u2500\u2500\u2500@^0.5\u2500\u2500\u2500H\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Quantum Fourier transform as an operation The QFT is such a common subroutine that it is actually a pre-defined gate/operation in Cirq. One can use cirq.QuantumFourierTransformGate to get the gate or the helper function cirq.qft with a sequence of qubits to get the operation. \"\"\"Use the built-in QFT in Cirq.\"\"\" qft_operation = cirq.qft(*qubits, without_reverse=True) qft_cirq = cirq.Circuit(qft_operation) print(qft_cirq) 0: \u2500\u2500\u2500qft[norev]\u2500\u2500\u2500 \u2502 1: \u2500\u2500\u2500#2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 2: \u2500\u2500\u2500#3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 3: \u2500\u2500\u2500#4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The function cirq.qft has the optional argument without_reverse which specifies whether or not to reverse the order of the bits at the end of the circuit. We can confirm the make_qft function we defined performs the same transformation as the built-in cirq.qft with the following test. \"\"\"Check equality of the 'manual' and 'built-in' QFTs.\"\"\" np.testing.assert_allclose(cirq.unitary(qft), cirq.unitary(qft_cirq)) Inverse quantum Fourier transform as a circuit As mentioned, the only difference between the QFT and inverse QFT is the sign of the exponent of the controlled rotations. Using the make_qft function as a guide, complete the make_qft_inverse function below. def make_qft_inverse(qubits): \"\"\"Generator for the inverse QFT on a list of qubits. For four qubits, the answer is: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 0: \u2500\u2500\u2500H\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u00d7\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 1: \u2500\u2500\u2500\u2500\u2500\u2500\u2500@^-0.5\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u00d7\u2500\u2500\u2500\u253c\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^-0.25\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^-0.5\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u00d7\u2500\u2500\u2500\u253c\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 3: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^(-1/8)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^-0.25\u2500\u2500\u2500\u2500\u2500@^-0.5\u2500\u2500\u2500H\u2500\u2500\u2500\u00d7\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \"\"\" # Your code here! Solution def make_qft_inverse(qubits): \"\"\"Generator for the inverse QFT on a list of qubits.\"\"\" qreg = list(qubits)[::-1] while len(qreg) > 0: q_head = qreg.pop(0) yield cirq.H(q_head) for i, qubit in enumerate(qreg): yield (cirq.CZ ** (-1 / 2 ** (i + 1)))(qubit, q_head) We can check the solution agrees with the above diagram by printing it out for a small number of qubits. \"\"\"Visually check the inverse QFT circuit.\"\"\" qubits = cirq.LineQubit.range(4) iqft = cirq.Circuit(make_qft_inverse(qubits)) print(iqft) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 0: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500 \u2502 \u2502 \u2502 1: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500@^-0.5\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^-0.5\u2500\u2500\u2500\u2500\u2500@^-0.25\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 3: \u2500\u2500\u2500H\u2500\u2500\u2500@^-0.5\u2500\u2500\u2500\u2500@^-0.25\u2500\u2500\u2500\u2500\u2500\u2500@^(-1/8)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Inverse quantum Fourier transform as an operation The function cirq.qft can be used with the optional argument inverse=True to return an inverse QFT operation as shown below. \"\"\"Use the built-in inverse QFT in Cirq.\"\"\" iqft_operation = cirq.qft(*qubits, inverse=True, without_reverse=True) iqft_cirq = cirq.Circuit(iqft_operation) print(iqft_cirq) 0: \u2500\u2500\u2500qft[norev]^-1\u2500\u2500\u2500 \u2502 1: \u2500\u2500\u2500#2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 2: \u2500\u2500\u2500#3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 3: \u2500\u2500\u2500#4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 As above, we can check the make_qft_inverse function we defined performs the same transformation as the built-in Cirq function. \"\"\"Check equality of the 'manual' and 'built-in' inverse QFTs.\"\"\" np.testing.assert_allclose(cirq.unitary(iqft), cirq.unitary(iqft_cirq)) Phase estimation As an application of our quantum Fourier transform circuit, we'll implement the phase estimation algorithm. The phase estimation algorithm estimates the eigenvalues of a unitary operator and uses the inverse QFT as a subroutine. The total circuit that we are going to implement is shown below. Suppose we have a unitary operator \\(U\\) with eigenvector \\(|\\psi\\rangle\\) and eigenvalue \\(\\exp(2\\pi i \\theta)\\). (Every eigenvalue of a unitary can be written this way.) Our objective is to get an \\(n\\)-bit approximation to \\(\\theta\\). The first step is to construct the state \\[ |\\Phi\\rangle = \\frac{1}{2^{n/2} }\\sum_{y=0}^{2^{n-1} } e^{2\\pi i y \\theta}|y\\rangle. \\] This looks very similar to the output of the QFT applied to the state \\(|2^n\\theta\\rangle\\), except for the fact that \\(2^n\\theta\\) may not be an integer. If \\(2^n\\theta\\) were an integer, then we would apply the inverse QFT and measure the qubits to read off the binary representation of \\(2^n\\theta\\). Even if \\(2^n\\theta\\) is not an integer, we can still perform the same procedure and the result will be a sequence of bits that, with high probability, gives an \\(n\\)-bit approximation to \\(\\theta\\). We just have to repeat the procedure a few times to be sure of the answer. Since we've already constructed the inverse QFT, all we really have to do is figure out how to construct the state \\(|\\Phi\\rangle\\). This is accomplished by the first part of the circuit pictured above. We begin by applying \\(H^{\\otimes n}\\) to the state \\(|0\\rangle\\), creating an equal superposition over all basis states: \\[ H^{\\otimes n} |0\\rangle = \\frac{1}{2^{n/2} }\\sum_{y=0}^{2^n-1}|y\\rangle. \\] Now we need to insert the correct phase coefficients. This is done by a sequence of Controlled-\\(U^k\\) operations, where the qubits of \\(y\\) are the controls and the \\(U^k\\) operations act on \\(|\\psi \\rangle\\). Let's try to implement this part of the procedure in Cirq, and then put it together with the inverse QFT from above. For the gate \\(U\\) we'll pick the single-qubit operation \\[ U = Z^{2\\theta} = \\begin{bmatrix} 1 & 0 \\\\ 0 & e^{2\\pi i \\theta } \\end{bmatrix} \\] for \\(\\theta \\in [0,1)\\). This is just for simplicity and ease of testing. You are invited to write an implementation that accepts an arbitrary \\(U\\). \"\"\"Set up the unitary and number of bits to use in phase estimation.\"\"\" # Value of \u03b8 which appears in the definition of the unitary U above. # Try different values. theta = 0.234 # Define the unitary U. U = cirq.Z ** (2 * theta) # Accuracy of the estimate for theta. Try different values. n_bits = 3 Now we can build the first part of the circuit (up until the inverse QFT) for phase estimation. \"\"\"Build the first part of the circuit for phase estimation.\"\"\" # Get qubits for the phase estimation circuit. qubits = cirq.LineQubit.range(n_bits) u_bit = cirq.NamedQubit('u') # Build the first part of the phase estimation circuit. phase_estimator = cirq.Circuit(cirq.H.on_each(*qubits)) for i, bit in enumerate(qubits): phase_estimator.append(cirq.ControlledGate(U).on(bit, u_bit) ** (2 ** (n_bits - i - 1))) print(phase_estimator) 0: \u2500\u2500\u2500H\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 1: \u2500\u2500\u2500H\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 2: \u2500\u2500\u2500H\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 u: \u2500\u2500\u2500\u2500\u2500\u2500\u2500Z^-0.128\u2500\u2500\u2500Z^0.936\u2500\u2500\u2500Z^0.468\u2500\u2500\u2500 The next step is to perform the inverse QFT on the estimation qubits and measure them. \"\"\"Build the last part of the circuit (inverse QFT) for phase estimation.\"\"\" # Do the inverse QFT. phase_estimator.append(make_qft_inverse(qubits[::-1])) # Add measurements to the end of the circuit phase_estimator.append(cirq.measure(*qubits, key='m')) print(phase_estimator) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 0: \u2500\u2500\u2500H\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M('m')\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 1: \u2500\u2500\u2500H\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^-0.5\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 \u2502 2: \u2500\u2500\u2500H\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^-0.25\u2500\u2500\u2500\u2500\u2500@^-0.5\u2500\u2500\u2500H\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 u: \u2500\u2500\u2500\u2500\u2500\u2500\u2500Z^-0.128\u2500\u2500\u2500Z^0.936\u2500\u2500\u2500Z^0.468\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 The initial state for u_bit is the \\(|0\\rangle\\) state, but the phase for this state is trivial with the operator we chose. Inserting a Pauli \\(X\\) operator at the beginning of the circuit changes this to the \\(|1\\rangle\\) state, which has the nontrivial \\(\\theta\\) phase. \"\"\"Set the input state of the eigenvalue register.\"\"\" # Add gate to change initial state to |1>. phase_estimator.insert(0, cirq.X(u_bit)) print(phase_estimator) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 0: \u2500\u2500\u2500H\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M('m')\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 1: \u2500\u2500\u2500H\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^-0.5\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 \u2502 2: \u2500\u2500\u2500H\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@^-0.25\u2500\u2500\u2500\u2500\u2500@^-0.5\u2500\u2500\u2500H\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 u: \u2500\u2500\u2500X\u2500\u2500\u2500Z^-0.128\u2500\u2500\u2500Z^0.936\u2500\u2500\u2500Z^0.468\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Now we can instantiate a simulator and make measurements of the estimation qubits. Let the values of these measured qubits be \\(a_j \\in \\{0, 1\\}\\). Then our \\(n\\)-bit approximation for \\(\\theta\\) is given by \\[ \\theta \\approx \\sum_{j=0}^n a_j2^{-j}. \\] We'll perform this conversion from bit values to \\(\\theta\\)-values and then print the results. \"\"\"Simulate the circuit and convert from measured bit values to estimated \u03b8 values.\"\"\" # Simulate the circuit. sim = cirq.Simulator() result = sim.run(phase_estimator, repetitions=10) # Convert from output bitstrings to estimate \u03b8 values. theta_estimates = np.sum(2 ** np.arange(n_bits) * result.measurements['m'], axis=1) / 2**n_bits print(theta_estimates) [0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25] When n_bits is small, we don't get a very accurate estimate. To test the accuracy of the estimate vs. n_bits, let's pack all this up into a single function that lets us specify \\(\\theta\\), the number of bits of accuracy we want in our approximation, and the number of repetitions of the algorithm to perform. For future purposes, let's also include an argument for the gate which acts on u_bit at the start of the circuit to prepare the eigenstate. Exercise: Define a function for phase estimation You could just copy/paste from the previous cells, but it might be a useful exercise to write the whole thing from scratch without peeking. def phase_estimation(theta, n_bits, n_reps=10, prepare_eigenstate_gate=cirq.X): \"\"\"Runs the phase estimate algorithm for unitary U=Z^{2\u03b8} with n_bits qubits.\"\"\" # Define qubit registers. qubits = cirq.LineQubit.range(n_bits) u_bit = cirq.NamedQubit('u') # Define the unitary U. U = cirq.Z ** (2 * theta) # Your code here! # ... # Gate to choose the initial state for the u_bit. Placing X here chooses the |1> state. phase_estimator.insert(0, prepare_eigenstate_gate.on(u_bit)) # You code here! # theta_estimates = ... return theta_estimates Solution Here is a solution that just consists of what we did in previous cells all put together. def phase_estimation(theta, n_bits, n_reps=10, prepare_eigenstate_gate=cirq.X): # Define qubit registers. qubits = cirq.LineQubit.range(n_bits) u_bit = cirq.NamedQubit('u') # Define the unitary U. U = cirq.Z ** (2 * theta) # Start with Hadamards on every qubit. phase_estimator = cirq.Circuit(cirq.H.on_each(*qubits)) # Do the controlled powers of the unitary U. for i, bit in enumerate(qubits): phase_estimator.append(cirq.ControlledGate(U).on(bit, u_bit) ** (2 ** (n_bits - 1 - i))) # Do the inverse QFT. phase_estimator.append(make_qft_inverse(qubits[::-1])) # Add measurements. phase_estimator.append(cirq.measure(*qubits, key='m')) # Gate to choose the initial state for the u_bit. Placing X here chooses the |1> state. phase_estimator.insert(0, prepare_eigenstate_gate.on(u_bit)) # Code to simulate measurements sim = cirq.Simulator() result = sim.run(phase_estimator, repetitions=n_reps) # Convert measurements into estimates of theta theta_estimates = np.sum(2 ** np.arange(n_bits) * result.measurements['m'], axis=1) / 2**n_bits return theta_estimates Now we can easily examine the accuracy of the estimate vs n_bits. We do so for a variety of values for n_bits in the following cell. \"\"\"Analyze convergence vs n_bits.\"\"\" # Set the value of theta. Try different values. theta = 0.123456 max_nvals = 16 nvals = np.arange(1, max_nvals, step=1) # Get the estimates at each value of n. estimates = [] for n in nvals: estimate = phase_estimation(theta=theta, n_bits=n, n_reps=1)[0] estimates.append(estimate) And now we make a plot of the \\(\\theta\\) estimates vs. the number of bits. \"\"\"Plot the results.\"\"\" plt.style.use(\"seaborn-v0_8-whitegrid\") plt.plot(nvals, estimates, \"--o\", label=\"Phase estimation\") plt.axhline(theta, label=\"True value\", color=\"black\") plt.legend() plt.xlabel(\"Number of bits\") plt.ylabel(r\"$\\theta$\"); Phase Estimation Without an Eigenstate What if the input to the circuit was not an eigenstate of \\(U\\) at all? We can always decompose such a state in the eigenbasis of \\(U\\) as \\[ \\sum_j \\alpha_j|u_j\\rangle \\] where \\(U |u_j\\rangle = e^{2 \\pi i \\theta_j} |u_j\\rangle\\). Then each time we run the circuit we will get an \\(n\\)-bit estimate of one of the \\(\\theta_j\\) chosen at random, and the probability of choosing a particular \\(\\theta_j\\) is given by \\(|\\alpha_j|^2\\). One simple test of this is to modify our above code to pass the state \\[ |+\\rangle = \\frac{|0\\rangle + |1\\rangle}{\\sqrt{2} } \\] into the phase estimator for \\(Z^{2\\theta}\\). The state \\(|0\\rangle\\) has eigenvalue \\(1\\) while the state \\(|1\\rangle\\) has eigenvalue \\(e^{2\\pi i \\theta_j}\\). We can do this with the prepare_eigenstate_gate argument to the phase_estimation_function, as shown below. \"\"\"Run phase estimation without starting in an eigenstate.\"\"\" # Value of theta. theta = 0.123456 # Number of qubits. n = 4 # Run phase estimation starting in the state H|0\u27e9 = |+\u27e9. res = phase_estimation(theta=theta, n_bits=n, n_reps=10, prepare_eigenstate_gate=cirq.H) print(res) [0. 0. 0. 0.125 0.125 0. 0.125 0.125 0.125 0. ] Notice that roughly half of the measurements yielded the estimate \\(0\\) (which corresponds to the eigenvalue \\(1\\)) and roughly half yield the estimate of theta. This is expected because the initial state \\(|+\\rangle\\) is an equal superposition of the two eigenstates of \\(U = Z^{2 \\theta}\\). Often we won't be able to prepare an exact eigenstate of the operator \\(U\\) we are interested in, so it's very useful to know about this feature of phase estimation. This is crucial for understanding Shor's algorithm, for instance. Exercise: Quantum Fourier transform with unreversed output As mentioned, the cirq.qft function has an argument without_reverse for whether or not to reverse the output bits. Add a similar argument to our make_qft function which does the same thing. You may want to consider using SWAP gates. Exercise: Phase estimation with arbitrary \\(U\\) Try to implement the phase estimation algorithm in a way that an arbitrary gate \\(U\\) can be supplied and tested. After you've done that, you can test the algorithm on some of your favorite two- or three-qubit gates. Exercise: QFT and phase estimation with adjacency constraints Often on a real machine we can't execute two-qubit gates between qubits that are not right next to each other. You'll have noticed that the circuits we defined above involves connections between many different pairs of qubits, which will likely not all be near each other when we try to run the circuit on an actual chip. See if you can modify the examples we went through above in such a way that Cirq validates them for use on the Sycamore chip. Grover's algorithm Consider bitstrings of length \\(n\\) and let \\(x' \\in \\{0, 1\\}^{n}\\) be a \"marked\" bitstring we wish to find. Grover's algorithm takes a black-box oracle implementing a function \\(f : \\{0, 1\\}^n \\rightarrow \\{0, 1\\}\\) defined by \\[ f(x) = 1\\text{ if } x = x',~~~~ f(x) = 0 \\text{ if } x \\neq x' \\] to find such a bitstring \\(x'\\). Grover's algorithm uses \\(O(\\sqrt{N}\\)) operations and \\(O(N\\, \\log N\\)) gates and succeeds with probability \\(p \\geq 2/3\\). Below, we walk through a simple implementation of Grover's algorithm described in this reference. This implementation only supports \\(n = 2\\) (for which one application of the Grover iteration is enough). First we define our qubit registers. We use \\(n = 2\\) bits in one register and an additional ancilla qubit for phase kickback. \"\"\"Get qubits to use in the circuit for Grover's algorithm.\"\"\" # Number of qubits n. nqubits = 2 # Get qubit registers. qubits = cirq.LineQubit.range(nqubits) ancilla = cirq.NamedQubit(\"Ancilla\") We now define a generator to yield the operations for the oracle. As discussed in the above reference, the oracle can be implemented by a Toffoli gate if all the bits in \\(x'\\) are \\(1\\). If some bits are \\(0\\), we do an \"open control\" (control on the \\(|0\\rangle\\) state) for these bits. This can be accomplished by flipping every \\(0\\) bit with \\(X\\) gates, performing a Tofolli, then undoing the \\(X\\) gates. def make_oracle(qubits, ancilla, xprime): \"\"\"Implements the function {f(x) = 1 if x == x', f(x) = 0 if x != x'}.\"\"\" # For x' = (1, 1), the oracle is just a Toffoli gate. # For a general x', we negate the zero bits and implement a Toffoli. # Negate zero bits, if necessary. yield (cirq.X(q) for (q, bit) in zip(qubits, xprime) if not bit) # Do the Toffoli. yield (cirq.TOFFOLI(qubits[0], qubits[1], ancilla)) # Negate zero bits, if necessary. yield (cirq.X(q) for (q, bit) in zip(qubits, xprime) if not bit) Now that we have a function to implement the oracle, we can construct a function to implement one round of Grover's iteration. def grover_iteration(qubits, ancilla, oracle): \"\"\"Performs one round of the Grover iteration.\"\"\" circuit = cirq.Circuit() # Create an equal superposition over input qubits. circuit.append(cirq.H.on_each(*qubits)) # Put the output qubit in the |-\u27e9 state. circuit.append([cirq.X(ancilla), cirq.H(ancilla)]) # Query the oracle. circuit.append(oracle) # Construct Grover operator. circuit.append(cirq.H.on_each(*qubits)) circuit.append(cirq.X.on_each(*qubits)) circuit.append(cirq.H.on(qubits[1])) circuit.append(cirq.CNOT(qubits[0], qubits[1])) circuit.append(cirq.H.on(qubits[1])) circuit.append(cirq.X.on_each(*qubits)) circuit.append(cirq.H.on_each(*qubits)) # Measure the input register. circuit.append(cirq.measure(*qubits, key=\"result\")) return circuit We now select the bitstring \\(x'\\) at random. \"\"\"Select a 'marked' bitstring x' at random.\"\"\" xprime = [random.randint(0, 1) for _ in range(nqubits)] print(f\"Marked bitstring: {xprime}\") Marked bitstring: [1, 0] And now create the circuit for Grover's algorithm. \"\"\"Create the circuit for Grover's algorithm.\"\"\" # Make oracle (black box) oracle = make_oracle(qubits, ancilla, xprime) # Embed the oracle into a quantum circuit implementing Grover's algorithm. circuit = grover_iteration(qubits, ancilla, oracle) print(\"Circuit for Grover's algorithm:\") print(circuit) Circuit for Grover's algorithm: 0: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500H\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500X\u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u2500\u2500\u2500M('result')\u2500\u2500\u2500 \u2502 \u2502 \u2502 1: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500X\u2500\u2500\u2500@\u2500\u2500\u2500X\u2500\u2500\u2500H\u2500\u2500\u2500X\u2500\u2500\u2500H\u2500\u2500\u2500X\u2500\u2500\u2500H\u2500\u2500\u2500X\u2500\u2500\u2500H\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 Ancilla: \u2500\u2500\u2500X\u2500\u2500\u2500H\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 All that is left is to simulate the circuit and check if the sampled bitstring(s) match with the marked bitstring \\(x'\\). \"\"\"Simulate the circuit for Grover's algorithm and check the output.\"\"\" # Helper function. def bitstring(bits): return \"\".join(str(int(b)) for b in bits) # Sample from the circuit a couple times. simulator = cirq.Simulator() result = simulator.run(circuit, repetitions=10) # Look at the sampled bitstrings. frequencies = result.histogram(key=\"result\", fold_func=bitstring) print('Sampled results:\\n{}'.format(frequencies)) # Check if we actually found the secret value. most_common_bitstring = frequencies.most_common(1)[0][0] print(\"\\nMost common bitstring: {}\".format(most_common_bitstring)) print(\"Found a match? {}\".format(most_common_bitstring == bitstring(xprime))) Sampled results: Counter({'10': 10}) Most common bitstring: 10 Found a match? True We see that we indeed found the marked bitstring \\(x'\\). One can rerun these cells to select a new bitstring \\(x'\\) and check that Grover's algorithm can again find it. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-05-30 UTC.",
    "url": "https://quantumai.google/cirq/experiments/textbook_algorithms",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 3958,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:21.045795"
  },
  {
    "id": "cirq_-6035140724058716813_0",
    "title": "Transform a circuit \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Transform Circuit Transformers The Transformer class and contract to represent some process that changes a supplied circuit. Custom Transformers Write your own Transformer with decorators, primitives and decompositions. Routing as a Transformer Qubit Routing utilities for easily executing circuits on hardware. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-04-09 UTC.",
    "url": "https://quantumai.google/cirq/transform",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 96,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:25.113883"
  },
  {
    "id": "cirq_1061468104283939959_0",
    "title": "Landscape analysis \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Landscape analysis View on QuantumAI Run in Google Colab View source on GitHub Download notebook Setup Install the ReCirq package: try: import recirq except ImportError: !pip install git+https://github.com/quantumlib/ReCirq Now import Cirq, ReCirq and the module dependencies: import recirq import cirq import numpy as np import pandas as pd from datetime import datetime Load the raw data Go through each record, load in supporting objects, flatten everything into records, and put into a massive dataframe. from recirq.qaoa.experiments.p1_landscape_tasks import \\ DEFAULT_BASE_DIR, DEFAULT_PROBLEM_GENERATION_BASE_DIR, DEFAULT_PRECOMPUTATION_BASE_DIR, \\ ReadoutCalibrationTask records = [] ro_records = [] for record in recirq.iterload_records(dataset_id=\"2020-03-tutorial\", base_dir=DEFAULT_BASE_DIR): record['timestamp'] = datetime.fromisoformat(record['timestamp']) dc_task = record['task'] if isinstance(dc_task, ReadoutCalibrationTask): ro_records.append(record) continue pgen_task = dc_task.generation_task problem = recirq.load(pgen_task, base_dir=DEFAULT_PROBLEM_GENERATION_BASE_DIR)['problem'] record['problem'] = problem.graph record['problem_type'] = problem.__class__.__name__ record['bitstrings'] = record['bitstrings'].bits recirq.flatten_dataclass_into_record(record, 'task') recirq.flatten_dataclass_into_record(record, 'generation_task') records.append(record) # Associate each data collection task with its nearest readout calibration for record in sorted(records, key=lambda x: x['timestamp']): record['ro'] = min(ro_records, key=lambda x: abs((x['timestamp']-record['timestamp']).total_seconds())) df_raw = pd.DataFrame(records) df_raw.head() Narrow down to relevant data Drop unnecessary metadata and use bitstrings to compute the expected value of the energy. In general, it's better to save the raw data and lots of metadata so we can use it if it becomes necessary in the future. from recirq.qaoa.simulation import hamiltonian_objectives def compute_energies(row): permutation = [] qubit_map = {} final_qubit_index = {q: i for i, q in enumerate(row['final_qubits'])} for i, q in enumerate(row['qubits']): fi = final_qubit_index[q] permutation.append(fi) qubit_map[i] = q return hamiltonian_objectives(row['bitstrings'], row['problem'], permutation, row['ro']['calibration'], qubit_map) # Start cleaning up the raw data df = df_raw.copy() df = df.drop(['line_placement_strategy', 'generation_task.dataset_id', 'generation_task.device_name'], axis=1) # Compute energies df['energies'] = df.apply(compute_energies, axis=1) df = df.drop(['bitstrings', 'problem', 'ro', 'qubits', 'final_qubits'], axis=1) df['energy'] = df.apply(lambda row: np.mean(row['energies']), axis=1) # We won't do anything with raw energies right now df = df.drop('energies', axis=1) # Do timing somewhere else df = df.drop([col for col in df.columns if col.endswith('_time')], axis=1) df Compute theoretical landscape Use a simulator to compute the noiseless landscape. This can get quite expensive, so it would be better practice to factor this out into Tasks in their own right: https://github.com/quantumlib/ReCirq/issues/21 def get_problem_graph(problem_type, n=None, instance_i=0): if n is None: if problem_type == 'HardwareGridProblem': n = 4 elif problem_type == 'SKProblem': n = 3 elif problem_type == 'ThreeRegularProblem': n = 4 else: raise ValueError(repr(problem_type)) r = df_raw[ (df_raw['problem_type']==problem_type)& (df_raw['n_qubits']==n)& (df_raw['instance_i']==instance_i) ]['problem'] return r.iloc[0] from recirq.qaoa.simulation import exact_qaoa_values_on_grid, lowest_and_highest_energy import itertools def compute_exact_values(problem_type, x_grid_num=23, y_grid_num=21): exact = exact_qaoa_values_on_grid( graph=get_problem_graph(problem_type), num_processors=12, x_grid_num=x_grid_num, y_grid_num=y_grid_num, ).T.reshape(-1) exact_gammas = np.linspace(0, np.pi/2, x_grid_num) exact_betas = np.linspace(-np.pi/4, np.pi/4, y_grid_num) exact_points = np.asarray(list(itertools.product(exact_gammas, exact_betas))) min_c, max_c = lowest_and_highest_energy(get_problem_graph(problem_type)) return exact_points, exact, min_c, max_c EXACT_VALS_CACHE = {k: compute_exact_values(k) for k in ['HardwareGridProblem', 'SKProblem', 'ThreeRegularProblem']} Plot %matplotlib inline from matplotlib import pyplot as plt import seaborn as sns sns.set_style('ticks') plt.rc('axes', labelsize=16, titlesize=16) plt.rc('xtick', labelsize=14) plt.rc('ytick', labelsize=14) plt.rc('legend', fontsize=14, title_fontsize=16) # Note: I ran into https://github.com/matplotlib/matplotlib/issues/15410 # if I imported matplotlib before using multiprocessing in `exact_qaoa_values_on_grid`, YMMV. import scipy.interpolate def plot_landscape(problem_type, res=200, method='nearest', cmap='PuOr'): dfb = df dfb = dfb[dfb['problem_type'] == problem_type] xx, yy = np.meshgrid(np.linspace(0, np.pi/2, res), np.linspace(-np.pi/4, np.pi/4, res)) exact_points, exact, min_c, max_c = EXACT_VALS_CACHE[problem_type] zz = scipy.interpolate.griddata( points=dfb[['gamma', 'beta']].values, values=dfb['energy'].values / min_c, xi=(xx, yy), method=method, ) fig, (axl, axr) = plt.subplots(1, 2, figsize=(5*2, 5), sharey=True) norm = plt.Normalize(max_c/min_c, min_c/min_c) cmap = 'RdBu' extent=(0, 4, -2, 2) axl.imshow(zz, extent=extent, origin='lower', cmap=cmap, norm=norm, interpolation='none') axl.set_xlabel(r'$\\gamma\\ /\\ (\\pi/8)$') axl.set_ylabel(r'$\\beta\\ /\\ (\\pi/8)$') axl.set_title('Experiment') zz_exact = scipy.interpolate.griddata( points=exact_points, values=(exact/min_c), xi=(xx, yy), method=method, ) g = axr.imshow(zz_exact, extent=extent, origin='lower', cmap=cmap, norm=norm, interpolation='none') axr.set_xlabel(r'$\\gamma\\ /\\ (\\pi/8)$') axr.set_title('Theory') fig.colorbar(g, ax=[axl, axr], shrink=0.8) Hardware grid plot_landscape('HardwareGridProblem') SK model plot_landscape('SKProblem') 3 regular MaxCut plot_landscape('ThreeRegularProblem') Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qaoa/landscape_analysis",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 637,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:27.927598"
  },
  {
    "id": "cirq_7230010137813715071_0",
    "title": "Visualizing Dynamics of Charges and Strings in (2+1)D Lattice Gauge Theories \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Visualizing Dynamics of Charges and Strings in (2+1)D Lattice Gauge Theories Motivation and background This ReCirq tutorial is based on experiments done on Google's quantum processor, the results of which can be found on arXiv. Gauge theories are a fundamental way to describe nature. From the quantum description of electromagnetic phenomena (dubbed quantum electrodynamics) to the theories that explain the fundamental particles explored at the Large Hadron Collider in Switzerland, gauge theories are ubiquitous throughout physics. While studies of gauge theories began analytically (pen and paper), soon the continuous theories were discretized and physicists began studying \"lattice gauge theories,\" which are advantageous for numerical simulations. However, certain lattice gauge theories have proven intractable for classical computers because of the exponential cost to simulate larger systems. This provides a unique opportunity for today's emerging quantum computers to simulate results beyond the capabilities of classical processors. Along those lines, researchers have used superconducting qubits, arrays of neutral atoms, and trapped ions to simulate one dimensional lattice gauge theories. These experiments have shown the ability for quantum processors to capture the expected behavior in small, spatially limited systems. In our work, we extend the state-of-the-art by pushing the quantum simulation of gauge theories to two spatial dimensions. Specifically, we study the dynamics of a 2D grid of superconducting qubits under a Trotterized time evolution described by a \\(\\mathbb{Z}_2\\) lattice gauge theory with Hamiltonian: \\[\\mathcal{H}=-J_E\\sum_{v}\\hspace{-0.6mm}A_v -J_M\\sum_{p} \\hspace{-0.6mm}B_p-h_E\\sum_{\\text{links} }\\hspace{-0.6mm}Z_l-\\lambda\\sum_{\\text{links} }\\hspace{-0.6mm}X_l\\] \\[A_v=\\prod_{i \\in v} Z_i\\] \\[B_p=\\prod_{i \\in p} X_i.\\] As depicted in the schematic below, the \\(A_v\\) operators correspond to electric \"charges\" that can exist on a vertex \\(v\\). The \\(B_p\\) operators correspond to magnetic excitations, that are defined on the dual lattice of plaquettes, indexed by \\(p\\). The \\(h_E\\) term represents the energy associated with the \"electric field\", while \\(\\lambda\\) controls the coupling between electric charges. After first preparing a low energy state, we excite the system by pair-creating charges connected by a string of gauge flux. Based on the value of \\(h_E\\), the theory will be in a confined or a deconfined regime. We see this transition by tracking the Hamiltonian evolution of charges and the average separation of an initialized pair. Then we turn to exploring the dynamics of a string of gauge flux connecting two charges that are \"pinned\" to the boundary of the grid. The string displays behavior that shows the transition from a deconfined, to a weakly and finally to a strongly confined regime as \\(h_E\\) is increased. Finally, by initiating a string across the grid, but then measuring the pair-creation of additional charges, we observe evidence of string breaking in the confined regime as the coupling parameter, \\(\\lambda\\), is tuned. Before we jump in, let's import all the packages we will need for this tutorial: import cirq from matplotlib.colors import LinearSegmentedColormap#, ListedColormap import matplotlib.pyplot as plt import matplotlib from matplotlib import ticker import numpy as np from matplotlib import colormaps import qsimcirq from scipy.optimize import minimize_scalar import sympy import recirq.lattice_gauge.lattice_gauge_experiment as lgt import recirq.lattice_gauge.settings as settings from recirq.lattice_gauge.lattice_gauge_grid import LGTGrid import recirq.toric_code.toric_code_plotter as tc_plot import recirq.toric_code.toric_code_plaquettes as tc_plaq import recirq.toric_code.toric_code_rectangle as tcr Prepare a low energy initial state: WALA We start by preparing a low-energy state, on top of which we will pair-create charges. Our approach is to use a \"Weight Adjustable Loop Ansatz\" (WALA), which is equivalent to the mean-field ground state of the dual Ising model when \\(\\lambda = 0\\). The ansatz only has one tunable parameter, \\(\\theta\\). Since an expression for the mean-field Ising model is known exactly, the variational parameters for the WALA initial state can be efficiently classically calculated for any system size. In the limit of \\(h_E \\rightarrow 0\\), the WALA reduces to the ground state of the toric code, previously explored in ReCirq. As shown below, we choose a system size that has a 4x3 grid of charge sites, which corresponds to 17 gauge qubits. Note that in the experiment on quantum hardware, we use an additional 18 ancilla qubits to facilitate the Trotterization on the square grid of qubits with nearest-neighbor connectivity. However, to perform a Cirq simulation of these circuits, I will use a modified Trotter evolution that is not limited by the device connectivity and only uses the minimal number of physical qubits, at the cost of more gate layers. We start by initializing a grid object that serves to keep track of the qubits. Lx = 4 Ly = 3 grid = LGTGrid(origin_qubit = cirq.GridQubit(0,0),orientation_vector = (1,1), rows = Lx-1, cols = Ly-1, flip_rowcol = False) This is visualized below where the grey diamonds correspond to the gauge qubits and the possible sites for charge excitations are shown in blue: code = tcr.ToricCodeRectangle(origin_qubit=cirq.GridQubit(0,0), row_vector=(1,1), rows=grid.cols, cols=grid.rows) fig, ax = plt.subplots() tc_plot.ToricCodePlotter(z_cmap = settings.charge_cmap, x_cmap = matplotlib.colormaps['binary']).plot_expectation_values(tc_plaq.ToricCodePlaquettes( code, x_plaquettes = np.zeros((code.rows,code.cols))-1, z_plaquettes = np.zeros((code.rows+1,code.cols+1))+1 ),patch_kwargs={'linewidth':0.025},ax = ax) lgt.plot_qubit_polarization_values( ax = ax, grid = LGTGrid(origin_qubit = cirq.GridQubit(0,0),orientation_vector = (1,1), rows = grid.cols, cols = grid.rows, flip_rowcol = False), qubit_polarization_data=np.zeros(17), ancilla_states_data=np.zeros(18), plot_physical_qubits=True, plot_ancillas = False, qubit_colormap=matplotlib.colormaps['binary'] ) plt.show() Next, we populate a dictionary with the optimal WALA angle, \\(\\theta\\), for each \\(h_E\\): he_list = np.around(np.linspace(0,3,31),2) angles = {} for he in he_list: fun = lambda theta: lgt.mean_field_energy(theta, Lx=Lx+1, Ly=Ly+1, he=he) res = minimize_scalar(fun, bracket=(0, np.pi/2)) angles[np.around(he,2)]= res.x and then use those angles to define the circuits to create the WALA state: cirq.Circuit.from_moments(*lgt.variational_ground_state_minimal_qubits(grid,sympy.Symbol('theta'))) Adding measurements in the Z and X bases, we populate lists of circuits for many values of \\(h_E\\) to simulate the energy of the WALA state and compare this to the energy of the trivial product state where all qubits are in the \\(\\ket{0}\\) state. wala_circuits_z=[] wala_circuits_x=[] for he in he_list: wala_circuits_z.append(cirq.Circuit.from_moments(*lgt.variational_ground_state_minimal_qubits(grid,angles[he]))+cirq.measure(*sorted(grid.physical_qubits), key=\"measure_all\")) wala_circuits_x.append(cirq.Circuit.from_moments(*lgt.variational_ground_state_minimal_qubits(grid,angles[he]))+cirq.H.on_each(grid.physical_qubits)+cirq.measure(*sorted(grid.physical_qubits), key=\"measure_all\")) polarized_circuit_z = cirq.Circuit.from_moments(cirq.Moment(cirq.measure(*sorted(grid.physical_qubits), key=\"measure_all\"))) polarized_circuit_x = cirq.Circuit.from_moments(cirq.Moment(cirq.H.on_each(grid.physical_qubits)),cirq.Moment(cirq.measure(*sorted(grid.physical_qubits), key=\"measure_all\"))) Let's simulate these circuits using qsim. Since we're simulating a few 10s of circuits with 17 qubits, this should take less that 1 second. simulator = qsimcirq.QSimSimulator() results_wala_z = simulator.run_batch(wala_circuits_z,repetitions=settings.reps) results_wala_x = simulator.run_batch(wala_circuits_x,repetitions=settings.reps) results_polarized_z = simulator.run(polarized_circuit_z,repetitions = settings.reps) results_polarized_x = simulator.run(polarized_circuit_x,repetitions = settings.reps) results_wala_combined = {} for idx,he in enumerate(he_list): results_wala_combined[('basis_z',f'he_{np.around(he,2)}')] = results_wala_z[idx][0] results_wala_combined[('basis_x',f'he_{np.around(he,2)}')] = results_wala_x[idx][0] results_polarized = {} results_polarized['basis_z'] = results_polarized_z results_polarized['basis_x'] = results_polarized_x Now, we can take these measurements, which correspond to the initial states with different values of \\(h_E\\), and calculate the energy based on the Hamiltonian, \\(\\mathcal{H}\\): wala_energies_dict = {} toric_code_energies_dict = {} polarized_energies_dict = {} for idx, he in enumerate(he_list): energy = lgt.energy_from_measurements( grid=grid, hamiltonian_coefs = {'Je':1,'Jm':1,'he':he,'lambda':0.25}, z_basis_results = results_wala_combined[('basis_z',f'he_{np.around(he,2)}')].measurements['measure_all'], x_basis_results = results_wala_combined[('basis_x',f'he_{np.around(he,2)}')].measurements['measure_all'] ) wala_energies_dict[he] = energy energy = lgt.energy_from_measurements( grid=grid, hamiltonian_coefs = {'Je':1,'Jm':1,'he':he,'lambda':0.25}, z_basis_results = results_wala_combined[('basis_z',f'he_{0.0}')].measurements['measure_all'], x_basis_results = results_wala_combined[('basis_x',f'he_{0.0}')].measurements['measure_all'] ) toric_code_energies_dict[he] = energy energy = lgt.energy_from_measurements( grid=grid, hamiltonian_coefs = {'Je':1,'Jm':1,'he':he,'lambda':0.25}, z_basis_results = results_polarized['basis_z'].measurements['measure_all'], x_basis_results = results_polarized['basis_x'].measurements['measure_all'] ) polarized_energies_dict[he] = energy Plot the energies! fig,ax = plt.subplots() ax.plot(wala_energies_dict.keys(),np.array(list(wala_energies_dict.values()))/((settings.number_of_gauge_qubits+1)/2), marker = \"o\", color = settings.WALA_INITIAL, label='WALA') ax.plot(toric_code_energies_dict.keys(),np.array(list(toric_code_energies_dict.values()))/((settings.number_of_gauge_qubits+1)/2), marker = \"o\", color = settings.TORIC_INITIAL, label='toric code') ax.plot(polarized_energies_dict.keys(),np.array(list(polarized_energies_dict.values()))/((settings.number_of_gauge_qubits+1)/2),marker='o', color= settings.POLARIZED_INITIAL, label = 'polarized') ax.set_xlabel(\"$h_E$\") ax.set_ylabel(\"Energy error per unit cell\") ax.set_xbound(-0.05,1.05) ax.set_ybound(-3.5,-1.25) ax.legend() plt.show() We can see that the WALA state yields an energy as low or lower than the two limiting cases of the toric code and polarized states across the entire range of \\(h_E\\). The next step is to pair-create charge excitations on top of the WALA state with X gates and measure the Trotterized dynamics. Dynamics of Charges By applying a single X gate on qubit cirq.GridQubit(2,1), we excite two charges next to each other in the center of the grid. By then simulating their Hamiltonian evolution, the dynamics reveal a fingerprint of the confinement. We choose \\(h_E\\) values between 0 (fully deconfined) and 2.0 (strongly confined) to simulate the dynamics. \\(J_E = J_M = 1\\) and \\(\\lambda = 0.25\\) are held constant. For the Trotterized simulation, we find that at time step of \\(dt=0.3\\) does not accumulate significant trotter error over the simulated 10 trotter steps. A circuit with a single Trotter step now looks like: excitation = cirq.Moment(cirq.X.on(cirq.GridQubit(2,1))) cirq.Circuit.from_moments( *lgt.variational_ground_state_minimal_qubits(grid,sympy.Symbol('theta')), excitation, *lgt.trotter_step_minimal_qubits(grid,sympy.Symbol('dt'),sympy.Symbol('lambda'),sympy.Symbol('he')), cirq.Moment(cirq.measure(*sorted(grid.physical_qubits), key=\"measure_all\")) ) Let's populate a list of circuits to simulate: he_list = [0,0.3,0.6,0.8,2.0] dt = 0.3 coupling = 0.25 trotter_steps = np.arange(10) excitation = cirq.Moment(cirq.X.on(cirq.GridQubit(2,1))) time_evolution_circuits = [] for he in he_list: for step in trotter_steps: time_evolution_circuits.append(cirq.Circuit.from_moments( *lgt.variational_ground_state_minimal_qubits(grid,angles[he]), excitation, *lgt.trotter_step_minimal_qubits(grid,dt,coupling,he)*step, cirq.Moment(cirq.measure(*sorted(grid.physical_qubits), key=\"measure_all\")) )) and run the simulations. Now that we're simulating deeper circuits for many Trotter steps, this may take a few seconds. results_charge_dynamics = simulator.run_batch(time_evolution_circuits,repetitions=settings.reps) Now we will calculate the charge operator for each vertex, \\(v\\). Then, by post-selecting on bitstrings that only have two charge excitations (\\(A_v = -1\\) on two vertices and \\(+1\\) for all others), we calculate the average distances between charges for each set of parameter values and number of trotter steps. counter = 0 trotter_steps = np.arange(10) occupations = {} separations = {} separations_sdom = {} for he in he_list: separations[he] = [] separations_sdom[he] = [] for step in trotter_steps: occupations[(he,step)] = [] res = results_charge_dynamics[counter][0].measurements['measure_all'] charge_occupations = lgt.plaquette_bitstrings(res,grid) charge_excitation_number = np.sum(charge_occupations,axis = 1) post_selected_charge_occupations = charge_occupations[np.nonzero(charge_excitation_number==2)[0],:] charge_separation = lgt.excitation_sep_plaquette_input( post_selected_charge_occupations, grid.rows+1, grid.cols+1 ) occupations[(he,step)] = np.mean(charge_occupations, axis = 0) separations[he].append(np.mean(charge_separation)) separations_sdom[he].append(np.nanstd(charge_separation)/np.sqrt(len(charge_separation))) counter += 1 To start to explore this data, we will plot heatmaps of \\(\\langle A_v \\rangle\\) for each charge site for the deconfined (\\(h_E = 0\\)) and the confined (\\(h_E = 2.0\\)) cases for times \\(t \\in \\{0, 1.5,2.7\\}\\). Notice that the charges tend to separate much faster in the deconfined regime. for he in [0,2.0]: for step in [0,5,9]: tc_plot.ToricCodePlotter(z_cmap = settings.charge_cmap, x_cmap = matplotlib.colormaps['binary']).plot_expectation_values(tc_plaq.ToricCodePlaquettes( code, x_plaquettes = np.zeros((grid.cols,grid.rows))-1, z_plaquettes = {(p%(grid.cols+1),p//(grid.cols + 1),):lgt.bitstring_to_expectation_value(occupations[(he,step)][p]) for p in range((grid.rows+1)*(grid.cols+1))} )) title_text = rf'$ \\langle A_v \\rangle $ with $h_E =$ {he}, time = {np.around(dt * step,3)}' plt.title(title_text) f,ax = plt.subplots() ax.set_aspect(0.1) norm = matplotlib.colors.Normalize(vmin=-1, vmax=1) matplotlib.colorbar.ColorbarBase( ax, cmap=settings.charge_cmap_r, norm=norm, orientation='horizontal' ) ax.set_xticks([-1,-2/3,1],labels=['+1','+2/3','-1']) ax.set_xticks([],minor=True) ax.tick_params(right=False,labelright=False) ax.set_title(r'$ \\langle A_v \\rangle $') plt.show() Next we can plot how the separation between charges evolves for many different values of \\(h_E\\) (\\(h_E \\in \\{0,0.3,0.6,0.8,2.0\\}\\)). These results show a clear transition from deconfined to confined dynamics as \\(h_E\\) is increased. fig, ax = plt.subplots() for idx, he in enumerate(he_list): ax.errorbar(x = np.arange(len(separations[he]))*dt, y = separations[he],yerr = separations_sdom[he],marker='o',color = settings.blues_color_list[idx]) ax.set_xlabel('Time') ax.set_ylabel('Charge separation (Manhattan metric)') plt.show() fig,ax = plt.subplots() ax.set_aspect(0.1) bounds = [-0.05]+[np.mean(he_list[i:i+2]) for i in range(len(he_list)-1)]+[1.7] norm = matplotlib.colors.BoundaryNorm(bounds, settings.blues_cmap_r.N) matplotlib.colorbar.ColorbarBase( ax, cmap=settings.blues_cmap_r, norm=norm, orientation='horizontal' ) ax.set_xticks([np.mean(bounds[i:i+2]) for i in range(len(bounds)-1)],he_list) ax.set_xticks([],minor=True) ax.tick_params(top=True,bottom=False,labeltop=True,labelbottom=False) ax.set_title(r'$h_E$') plt.show() String Fluctations Next we want to focus on the string of gauge flux connecting the charges. We can initialize that string by choosing the X-string we use to excite on top of the WALA state. In the present case, we excite [cirq.GridQubit(-2,1), cirq.GridQubit(0,1), cirq.GridQubit(1,2), cirq.GridQubit(2,3), cirq.GridQubit(3,2), cirq.GridQubit(4,1), cirq.GridQubit(6,1)], which stretches across the entire grid as show in the schematic: This excitation initializes two charges on the extra charge sites to the left and right, connected to the rest of the system by two additional qubits. By not applying the local field terms (\\(h_E Z_l\\) and \\(\\lambda X_l\\)) to these qubits, we can keep the charges on their initial sites and monitor the behavior of the string with pinned ends. We will monitor the string dynamics by measuring the two-point correlator \\(\\mathcal{S}_{ZZ}(t)\\) defined as: \\[\\mathcal{S}_{ZZ}(t)=\\Re[\\langle Z(t) Z(0) \\rangle] \\times \\langle Z(0) \\rangle.\\] Inspired by the implementation of these circuits on the quantum hardware, we utilize an auxiliary qubit to measure the two-time correlator \\(\\Re[\\langle Z(t) Z(0) \\rangle]\\) for each qubit. Then we measure \\(\\langle Z(0) \\rangle\\) to get the second term in the product. Let's make the list of circuits to simulate: he_list = [0.1,0.6,1.4] dt = 0.3 coupling = 0.25 trotter_steps = [0,2,4,9] auxillary_qubit = cirq.NamedQubit('a') string_excitation_indices = [(-2,1),(0,1),(1,2),(2,3),(3,2),(4,1),(6,1)] string_excitation_qubits = [cirq.GridQubit(idx1,idx2) for idx1,idx2 in string_excitation_indices] time_evolution_circuits = [] for target_qubit in grid.physical_qubits: for he in he_list: for step in trotter_steps: time_evolution_circuits.append(cirq.Circuit.from_moments( cirq.H.on(auxillary_qubit), *lgt.variational_ground_state_minimal_qubits(grid,angles[he]), cirq.Moment(cirq.X.on_each(string_excitation_qubits)), cirq.CZ(auxillary_qubit,target_qubit), *lgt.trotter_step_minimal_qubits(grid,dt,coupling,he,extra_z_plaquette_indices=[(0,1),(3,1)])*step, cirq.H.on(auxillary_qubit), cirq.Moment(cirq.measure(auxillary_qubit,target_qubit, key=\"measure_all\")) )) initial_state_circuits = [] for he in he_list: initial_state_circuits.append(cirq.Circuit.from_moments( *lgt.variational_ground_state_minimal_qubits(grid,angles[he]), cirq.Moment(cirq.X.on_each(string_excitation_qubits)), cirq.Moment(cirq.measure(*sorted(grid.physical_qubits), key=\"measure_all\")) )) We have now expanded to 20 qubits and our observable requires the dynamics to be run separately for every gauge qubit. This means the simulations are a bit more expensive and may take up to one minute. Enjoy a short break while qsim does its work! results_string_dynamics = simulator.run_batch(time_evolution_circuits,repetitions=settings.reps) results_string_initial = simulator.run_batch(initial_state_circuits,repetitions=settings.reps) We can now take those bitstrings and assemble \\(\\mathcal{S}_{ZZ}\\). zz = {} counter = 0 for idx,target_qubit in enumerate(grid.physical_qubits): for he in he_list: for step in trotter_steps: if idx == 0: zz[(he,step)] = [] bitstrings = results_string_dynamics[counter][0].measurements['measure_all'] zz[(he,step)].append(np.mean(np.sum(bitstrings,axis=1)%2)) counter+=1 z0 = {} z0_sdom = {} for idx,he in enumerate(he_list): bitstrings = results_string_initial[idx][0].measurements['measure_all'] z0[he] = np.mean(bitstrings,axis=0) z0_sdom[he] = np.std(bitstrings,axis=0)/np.sqrt(np.shape(bitstrings)[0]) Using these measurements, let's calculate \\(\\mathcal{S}_{ZZ}(t)\\) and plot it as heatmaps: szz = {} map = np.array([5,10,15,2,7,12,17,4,9,14,1,6,11,16,3,8,13,])-1 for he in he_list: for step in trotter_steps: szz[(he,step)] = lgt.bitstring_to_expectation_value(np.array(zz[(he,step)]))*lgt.bitstring_to_expectation_value(np.array(z0[he])) lgt.plot_qubit_polarization_values( grid = LGTGrid(origin_qubit = cirq.GridQubit(0,0),orientation_vector = (1,1), rows = grid.cols, cols = grid.rows, flip_rowcol = False), qubit_polarization_data=[szz[(he,step)][i] for i in map], ancilla_states_data=np.zeros(18), plot_physical_qubits=True, plot_ancillas = False, qubit_colormap=settings.cmap_green ) title_text = r'$S_{ZZ}$ for gauge qubits. '+ f'$h_E =$ {he}, time = {np.around(dt * step,3)}' plt.title(title_text) plt.ylim(grid.cols, -1) plt.show() f,ax = plt.subplots() ax.set_aspect(0.1) norm = matplotlib.colors.Normalize(vmin=-1, vmax=1) matplotlib.colorbar.ColorbarBase( ax, cmap=settings.cmap_green, norm=norm, orientation='horizontal' ) ax.set_xticks([-1,0,1],labels=['+1','0','-1']) ax.set_xticks([],minor=True) ax.tick_params(right=False,labelright=False) ax.set_title(r'$S_{ZZ}(t)$') plt.show() We see the coherent dynamics of the string in the confined phase (\\(h_E = 1.4\\)). In this case, the string mainly stays on the top qubits where it can undergo \"breathing\" type quantum vibrations without changing it's length on the lattice. However, in a more weakly confined regime (\\(h_E = 0.6\\)), the string evidently explores more modes of oscillation and is able to \"flop\" down to the bottom qubits. For \\(h_E=0.1\\), there is no clear string excitation, even at the initial time. This is consistent with the deconfined phase. To clearly quantitatively see these behaviors, we simulate a denser time sampling for just the top (Q1) and bottom (Q2) qubits in the center, as indicated below. So let's construct the circuit as before but with more time steps and only simulate \\(\\mathcal{S}_{ZZ}(t)\\) for these two qubits. he_list = [0.1,0.6,1.4] trotter_steps = np.arange(10) target_list = [grid.physical_qubits[9],grid.physical_qubits[7]] time_evolution_circuits = [] for target_qubit in target_list: for he in he_list: for step in trotter_steps: time_evolution_circuits.append(cirq.Circuit.from_moments( cirq.H.on(auxillary_qubit), *lgt.variational_ground_state_minimal_qubits(grid,angles[he]), cirq.Moment(cirq.X.on_each(string_excitation_qubits)), cirq.CZ(auxillary_qubit,target_qubit), *lgt.trotter_step_minimal_qubits(grid,dt,coupling,he,extra_z_plaquette_indices=[(0,1),(3,1)])*step, cirq.H.on(auxillary_qubit), cirq.Moment(cirq.measure(auxillary_qubit,target_qubit, key=\"measure_all\")) )) Now let's simulate it and calculate \\(\\mathcal{S}_{ZZ}(t)\\)! (This should take <1 minute) results_string_dynamics = simulator.run_batch(time_evolution_circuits,repetitions=settings.reps) zz_fine = {} zz_fine_sdom = {} for target in target_list: for he in he_list: zz_fine[(target,he)] = [] zz_fine_sdom[(target,he)] = [] counter = 0 for idx, target in enumerate(target_list): for he in he_list: for step in trotter_steps: bitstrings = results_string_dynamics[counter][0].measurements['measure_all'] zz_fine[(target,he)].append(np.mean(np.sum(bitstrings,axis=1)%2)) zz_fine_sdom[(target,he)].append(np.std(np.sum(bitstrings,axis=1)%2)/np.sqrt(np.shape(bitstrings)[0])) counter+=1 markers = ['o','s'] for idx2, target in enumerate(target_list): fig, ax = plt.subplots() for idx,he in enumerate(he_list): res = lgt.bitstring_to_expectation_value(np.array(zz_fine[(target,he)])) * lgt.bitstring_to_expectation_value(z0[he][grid.physical_qubits.index(target)]) ax.errorbar(x = np.arange(len(res))*dt,y = res, yerr = 2*np.sqrt(np.array(zz_fine_sdom[(target,he)])**2 + np.array(z0_sdom[he][9])**2),color = settings.blues_color_list[2*idx],marker = markers[idx2]) ax.set_xlabel(\"Time\") ax.set_ylabel(r\"$S_{ZZ}$\") ax.set_title(r\"$S_{ZZ}(t)$ \"+f\"for qubit Q{idx2+1} as a function of time\") ax.set_ylim(-1.1,1.1) plt.show() fig,ax = plt.subplots() ax.set_aspect(0.1) bounds = [-0.05]+[np.mean(he_list[i:i+2]) for i in range(len(he_list)-1)]+[1.7] norm = matplotlib.colors.BoundaryNorm(bounds, settings.blues_cmap_r.N) matplotlib.colorbar.ColorbarBase( ax, cmap=settings.blues_cmap_r, norm=norm, orientation='horizontal' ) ax.set_xticks([np.mean(bounds[i:i+2]) for i in range(len(bounds)-1)],he_list) ax.set_xticks([],minor=True) ax.tick_params(top=True,bottom=False,labeltop=True,labelbottom=False) ax.set_title(r'$h_E$') plt.show() String Breaking Lastly, we want to examine the effects of string breaking by looking at the pair creation of charges that occur when the string breaks. To pinpoint the effects of the string on pair creation, we choose the most confining scenario (\\(h_E = 1.4\\)) and compare the dynamics of evolving two initials states: (1) just the WALA initial state and (2) the WALA state with the same string excitation that we used to study the string dynamics above. By comparing the effect that \\(\\lambda\\), the string breaking parameter, has in these two experiments, we can identify the interplay between string-breaking and pair creation. Let's define the circuits for both initial states: he = 1.4 coupling_list = [0,0.25,0.5] dt = 0.3 trotter_steps = np.arange(10) string_excitation_indices = [(-2,1),(0,1),(1,2),(2,3),(3,2),(4,1),(6,1)] string_excitation_qubits = [cirq.GridQubit(idx1,idx2) for idx1,idx2 in string_excitation_indices] excited_evolution_circuits = [] for coupling in coupling_list: for step in trotter_steps: excited_evolution_circuits.append(cirq.Circuit.from_moments( *lgt.variational_ground_state_minimal_qubits(grid,angles[he]), cirq.Moment(cirq.X.on_each(string_excitation_qubits)), *lgt.trotter_step_minimal_qubits(grid,dt,coupling,he,extra_z_plaquette_indices=[(0,1),(3,1)])*step, cirq.Moment(cirq.measure(grid.physical_qubits, key=\"measure_all\")) )) wala_evolution_circuits = [] for coupling in coupling_list: for step in trotter_steps: wala_evolution_circuits.append(cirq.Circuit.from_moments( *lgt.variational_ground_state_minimal_qubits(grid,angles[he]), *lgt.trotter_step_minimal_qubits(grid,dt,coupling,he,extra_z_plaquette_indices=[(0,1),(3,1)])*step, cirq.Moment(cirq.measure(grid.physical_qubits, key=\"measure_all\")) )) And simulate the results: results_excited_evolution = simulator.run_batch(excited_evolution_circuits,repetitions=settings.reps) results_wala_evolution = simulator.run_batch(wala_evolution_circuits,repetitions=settings.reps) Now we can calculate the probability that a charge is pair-created at each site as these two initial states evolve in time: counter = 0 trotter_steps = np.arange(10) occupations_excited = {} for coupling in coupling_list: for step in trotter_steps: res_excited = results_excited_evolution[counter][0].measurements['measure_all'] occupations_excited[(coupling,step)] = lgt.plaquette_bitstrings(res_excited,grid,particle_locs=[(0,1),(3,1)]) counter += 1 counter = 0 occupations_wala = {} for coupling in coupling_list: for step in trotter_steps: res_wala = results_wala_evolution[counter][0].measurements['measure_all'] occupations_wala[(coupling,step)] = lgt.plaquette_bitstrings(res_wala,grid) counter += 1 By substracting the expectation value of \\(A_v\\) of the two initials states, we can directly see the effects of the string, which is mostly located on the top qubits. The results, plotted below, show that charges are pair-created when \\(\\lambda \\neq 0\\), but predominantly on the middle and top rows of charge sites where the string is located, with enhanced pair creation as \\(\\lambda\\) increases. code = tcr.ToricCodeRectangle(origin_qubit=cirq.GridQubit(0,0), row_vector=(1,1), rows=grid.cols, cols=grid.rows) for coupling in coupling_list: tc_plot.ToricCodePlotter(z_cmap = settings.diff_cmap, x_cmap = matplotlib.colormaps['binary']).plot_expectation_values(tc_plaq.ToricCodePlaquettes( code, x_plaquettes = np.zeros((2,3))-1, z_plaquettes = {(grid.cols - p%(grid.cols+1),p//(grid.cols + 1)):lgt.bitstring_to_expectation_value(np.mean(occupations_excited[(coupling,9)],axis=0)[p])-lgt.bitstring_to_expectation_value(np.mean(occupations_wala[(coupling,9)],axis=0)[p]) for p in range((grid.rows+1)*(grid.cols+1))} )) title_text = r'$\\langle A_v \\rangle_{\\mathrm{string} } - \\langle A_v \\rangle_{\\mathrm{vac} } $ with $\\lambda = $' + f\"{coupling}\" plt.title(title_text) plt.show() f,ax = plt.subplots() ax.set_aspect(0.1) norm = matplotlib.colors.Normalize(vmin=-1, vmax=1) matplotlib.colorbar.ColorbarBase( ax, cmap=settings.diff_cmap_r, norm=norm, orientation='horizontal' ) ax.set_xticks([-1,0,1],labels=['+1','0','-1']) ax.set_xticks([],minor=True) ax.tick_params(right=False,labelright=False) ax.set_title(r'$S_{ZZ}(t)$') plt.show() To show this quantitatively, we plot the probability of observing a charge as a function of time when \\(\\lambda \\in \\{0,0.25,0.5\\}\\) for three different charge sites: (1) \\(A_{\\mathrm{vac} }\\) on the top/bottom of WALA initial state (black) (2) \\(A_1\\) on the top of the initial state with a string excitation (yellow) (3) \\(A_3\\) on the bottom of the initial state with the string excitation (mint) coupling = 0 marker_dict = {0:'P',0.25:'X',0.5:'p'} for coupling in coupling_list: fig, ax = plt.subplots() mark = marker_dict[coupling] ms = 12 res = [np.mean(occupations_wala[(coupling,p)],axis=0)[5] for p in range(len(trotter_steps))] sdom = [np.std(occupations_wala[(coupling,p)],axis=0)[5]/np.sqrt(np.shape(occupations_wala[(coupling,p)])[0]) for p in range(len(trotter_steps))] ax.errorbar(x = np.arange(len(res))* dt, y = res,yerr = sdom, color = settings.BREAKING_VAC, marker = mark, markersize = ms, label = \"$A_{\\mathrm{vac} }$\") res = [np.mean(occupations_excited[(coupling,p)],axis=0)[5] for p in range(len(trotter_steps))] sdom = [np.std(occupations_excited[(coupling,p)],axis=0)[5]/np.sqrt(np.shape(occupations_excited[(coupling,p)])[0]) for p in range(len(trotter_steps))] ax.errorbar(x = np.arange(len(res))* dt, y = res,yerr = sdom, color = settings.BREAKING_TOP, marker = mark, markersize = ms, label = \"$A_1$\") res = [np.mean(occupations_excited[(coupling,p)],axis=0)[3] for p in range(len(trotter_steps))] sdom = [np.std(occupations_excited[(coupling,p)],axis=0)[3]/np.sqrt(np.shape(occupations_excited[(coupling,p)])[0]) for p in range(len(trotter_steps))] ax.errorbar(x = np.arange(len(res))* dt, y = res,yerr = sdom, color = settings.BREAKING_BOTTOM, marker = mark, markersize = ms, label = \"$A_2$\") ax.set_xlabel('Time') ax.set_ylabel(r'$P(A_v)$') ax.set_title(f'Probability of charge excitation with $\\lambda = {coupling}$') ax.set_ylim(-0.02,0.45) ax.legend() plt.show() Finally, we want to explore the dependence on the confinement parameter, \\(h_E\\). We naively expect a resonance in pair creation near \\(h_E = 2,\\) when the energy \"cost\" of creating two charges is equal to the energy \"gained\" by shorting the gauge string by one link. We will compare the probability of finding a charge on site \\(A_1\\) at time \\(t=2\\), once the probability of pair creation has saturated. Let's define the circuits: he_list = np.around(np.arange(1,3.1,0.4),2) coupling_list = [0,0.25,0.5] dt = 0.2 trotter_steps = [10] string_excitation_indices = [(-2,1),(0,1),(1,2),(2,3),(3,2),(4,1),(6,1)] string_excitation_qubits = [cirq.GridQubit(idx1,idx2) for idx1,idx2 in string_excitation_indices] resonance_circuits = [] for coupling in coupling_list: for he in he_list: for step in trotter_steps: resonance_circuits.append(cirq.Circuit.from_moments( *lgt.variational_ground_state_minimal_qubits(grid,angles[he]), cirq.Moment(cirq.X.on_each(string_excitation_qubits)), *lgt.trotter_step_minimal_qubits(grid,dt,coupling,he,extra_z_plaquette_indices=[(0,1),(3,1)])*step, cirq.Moment(cirq.measure(grid.physical_qubits, key=\"measure_all\")) )) and simulate them: results_resonance = simulator.run_batch(resonance_circuits,repetitions=settings.reps) counter = 0 occupations_resonance = {} occupations_resonance_sdom = {} for coupling in coupling_list: for he in he_list: for step in trotter_steps: res = results_resonance[counter][0].measurements['measure_all'] occupations_resonance[(coupling,he,step)] = lgt.plaquette_bitstrings(res,grid,particle_locs=[(0,1),(3,1)]) counter += 1 Now when looking at the plotted results, we see that indeed there is a resonance-like feature near \\(h_E = 2\\). marker_dict = {0:'P',0.25:'X',0.5:'p'} fig, ax = plt.subplots() for coupling in coupling_list: res = [np.mean(occupations_resonance[(coupling,he,10)],axis=0)[5] for he in he_list] sdom = [np.std(occupations_resonance[(coupling,he,10)],axis=0)[5]/np.sqrt(np.shape(occupations_resonance[(coupling,he,10)])[0]) for he in he_list] ax.errorbar(x = he_list, y = res, yerr = sdom, markersize = 12, color = settings.BREAKING_TOP,marker = marker_dict[coupling], label = f\"$\\lambda = {coupling}$\") ax.set_xlabel(r'$h_E$') ax.set_ylabel(r'$P(A_v)$') ax.legend() plt.show() Congratulations, you've made it to the end of this tutorial! To explore the details of the formulation of this experiment and the results from the quantum processor, please refer to the paper and its supplement. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-05-23 UTC.",
    "url": "https://quantumai.google/cirq/experiments/lattice_gauge/lattice_gauge",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 3360,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:35.386070"
  },
  {
    "id": "cirq_1362314840685918088_0",
    "title": "Kardar-Parisi-Zhang Dynamics in the Heisenberg Spin Chain \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Kardar-Parisi-Zhang Dynamics in the Heisenberg Spin Chain View on QuantumAI Run in Google Colab View source on GitHub Download notebook Before beginning, we will import the necessary modules into the notebook. try: import recirq except ImportError: !pip install --quiet git+https://github.com/quantumlib/ReCirq import recirq try: import qsimcirq except ImportError: !pip install qsimcirq --quiet import qsimcirq import cirq import matplotlib.pyplot as plt from matplotlib import ticker import numpy as np import recirq.kpz.experiment as kpz plt.rcParams['figure.dpi'] = 144 Motivation and Background Based on strong numerical evidence, it has been conjectured that the late-time dynamics of the 1D Heisenberg spin chain are described by the Kardar-Parisi-Zhang universality class. Experiments, for example using cold atoms, have provided further evidence for this conjecture. In our work, we test this conjecture using 46 superconducting qubits, comparing the probability distribution of the transferred magnetization against predictions for the KPZ height function. We find that, while the mean and variance are consistent with KPZ, higher moments appear inconsistent. For further background, motivation, and explanation, please either read the paper or watch the talk. Simulating the 1D Floquet XXZ model using ReCirq We are interested in the class of initial states given by Eq. 3 of the paper, \\[\\rho(t=0) \\propto (e^{2\\mu S^z})^{\\otimes N_Q/2}\\, \\otimes \\,( e ^{-2\\mu S^z}) ^{\\otimes N_Q/2},\\] where \\(N_Q\\) is the number of qubits, \\(S^z\\) is the \\(z\\) component of the spin, and \\(\\mu\\) is a parameter that acts like a chemical potential between the two sides of the chain, interpolating between a pure domain wall at \\(\\mu=\\infty\\) and an infinite temperature state at \\(\\mu=0\\). We implement this initial state by sampling pure states, namely bitstring product states, where each qubit on the left side of the chain is prepared in \\(|1\\rangle\\) with probability \\(p = (e^\\mu)/(e^\\mu + e^{-\\mu})\\), otherwise \\(|0\\rangle\\), and each qubit on the right is prepared in \\(|0\\rangle\\) with the same probability, \\(p\\), otherwise \\(|1\\rangle\\). Next, we apply \\(t\\) Floquet cycles of fSim gates, where a cycle is depicted in Figure 1 of our paper and consists of both an even layer and an odd layer. Finally, we measure all of the qubits and count how many excitations have crossed the center. Twice this quantity is the transferred magnetization, \\(\\mathcal{M}\\). To set up this experiment for a particular number of cycles, we create a KPZExperiment. This has five required input parameters, num_cycles, mu, num_init_states, theta, and phi. The conjecture that the late-time dynamics of this model are described by the Kardar-Parisi-Zhang (KPZ) universality class applies at the isotropic point (i.e. the XXX or Heisenberg model), which corresponds to \\(\\phi = 2\\theta\\). Further, the conjecture applies at small \\(\\mu\\), although the order of limits between \\(\\mu \\to 0\\) and \\(t\\to\\infty\\) is something that we explore in the paper. In Figure 3 of the paper, we pick \\((\\theta, \\phi) = (0.4\\pi, 0.8\\pi)\\). To initialize a KPZExperiment with these angles, \\(\\mu=0.5\\) and 1000 initial states, for cycle 2, we run num_cycles = 2 mu = 0.5 num_init_states = 1000 theta = np.pi*0.4 phi = np.pi*0.8 expt = kpz.KPZExperiment(num_cycles, mu, num_init_states, theta, phi) By default, this uses 2*num_cycles qubits, which is the minimum number of qubits needed for the transferred magnetization to be independent of system size (in the experiment we use 46 qubits and go to cycle 23). The KPZExperiment comes with the num_init_states initial bitstrings prepared: expt.initial_states array([[1, 1, 1, 0], [1, 1, 0, 0], [0, 1, 0, 0], ..., [1, 1, 0, 1], [1, 1, 0, 0], [1, 1, 0, 0]]) It also prepares the circuits that we need to run. For example, the circuit corresponding to the first initial state is: expt.circuits[0] To run the experiment, we can either use KPZExperiment.run_experiment() or KPZExperiment.run_experiment_amplitudes(). In either case, we have to input a Cirq sampler. run_experiment() samples bitstrings, closer to what is done in the experiment, whereas run_experiment_amplitudes() uses amplitudes from a statevector simulation (and hence requires a cirq.SimulatesAmplitudes sampler). In the actual experiment, we apply a post-selection to mitigate against effects of \\(T_1\\); this is not done here because this tutorial uses noiseless simulations. For example, we can use qsimcirq.QSimSimulator to obtain: sampler = qsimcirq.QSimSimulator() reps = 6000 res_bitstrs = expt.run_experiment(sampler, reps) res_amplitudes = expt.run_experiment_amplitudes(sampler) 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:15<00:00, 62.84it/s] 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:01<00:00, 886.57it/s] The measured bitstrings are contained in res_bitstrings.bitstrs, which has shape (num_init_states, reps, num_qubits) res_bitstrs.bitstrs array([[[0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1], ..., [1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0]], [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], ..., [1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0]], [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], ..., [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]], ..., [[0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1], ..., [1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0]], [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], ..., [1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0]], [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], ..., [1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0]]]) As you can see, the number of excitations is conserved, as expected because fSim gates are number conserving. num_excitations = np.sum(res_bitstrs.bitstrs, axis=2) num_excitations_init = np.sum(expt.initial_states,1) expected_num_excitations = np.outer(num_excitations_init, np.ones(reps, dtype=int)) assert np.all( num_excitations == expected_num_excitations ) The transferred magnetization, \\(\\mathcal{M}\\) is computed by counting how many excitations are on the right side of the chain in the final state, contained in res_bitstrs.num_right_final (shape (num_init_states, reps)), and subtracting the number that were on the right initially, res_bitstrs.num_right_initial (shape (num_init_states,)), and then multiplying by 2. It is stored in res_bitstrs.transferred_magnetization (shape (num_init_states, reps)). We can plot a histogram of the transferred magnetization with: res_bitstrs.plot_histogram() <AxesSubplot: xlabel='Number of 1s that crossed center, \\\\(\\\\mathcal{M}/2\\\\)', ylabel='Probability'> The same histogram can be obtained without any error from finite reps by using res_amplitudes: res_amplitudes.plot_histogram() <AxesSubplot: xlabel='Number of 1s that crossed center, \\\\(\\\\mathcal{M}/2\\\\)', ylabel='Probability'> Finally, we are interested in the mean, variance, skewness, and kurtosis of this distribution. These are stored in res_amplitudes.mean, res_amplitudes.variance, res_amplitudes.skewness, and res_amplitudes.kurtosis, and similarly for res_bitstrs. These quantities all have statistical uncertainty because we are sampling initial states. The statistical uncertainties can be computed with the jackknife_mean(), jackknife_variance(), jackknife_skew(), and jackknife_kurtosis() methods of either res_amplitudes or res_bitstrs. In particular, we have print(f'mean = {res_amplitudes.mean:.2f} \u00b1 {res_amplitudes.jackknife_mean():.2f}') print(f'variance = {res_amplitudes.variance:.1f} \u00b1 {res_amplitudes.jackknife_variance():.1f}') print(f'skewness = {res_amplitudes.skewness:.2f} \u00b1 {res_amplitudes.jackknife_skew():.2f}') print(f'kurtosis = {res_amplitudes.kurtosis:.1f} \u00b1 {res_amplitudes.jackknife_kurtosis():.1f}') mean = 1.56 \u00b1 0.04 variance = 2.7 \u00b1 0.1 skewness = -0.26 \u00b1 0.05 kurtosis = -0.3 \u00b1 0.1 For the paper, we ran exact density matrix simulations up to cycle 8, which give, for this choice of \\(t=2\\), \\(\\mu=0.5\\), and \\((\\theta, \\phi) = (0.4\\pi, 0.8\\pi)\\), mean = 1.526 variance = 2.82 skewness = -0.287 kurtosis = -0.309 consistent with what we find by sampling initial states. To test the conjecture that the late-time dynamics of this model are consistent with Kardar-Parisi-Zhang predictions, we care about how these moments of the transferred magnetization change over time. Here we compute these quantities up to cycle 9 (18 qubits). Note that the following cell takes at least about 10 minutes to run. mean = [] d_mean = [] variance = [] d_variance = [] skewness = [] d_skewness = [] kurtosis = [] d_kurtosis = [] t = np.arange(1, 10) for t_i in t: print('Starting t = {}'.format(t_i)) expt = kpz.KPZExperiment(t_i, mu, num_init_states, theta, phi) res = expt.run_experiment_amplitudes(sampler) mean.append(res.mean) d_mean.append(res.jackknife_mean()) variance.append(res.variance) d_variance.append(res.jackknife_variance()) skewness.append(res.skewness) d_skewness.append(res.jackknife_skew()) kurtosis.append(res.kurtosis) d_kurtosis.append(res.jackknife_kurtosis()) Starting t = 1 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:00<00:00, 1697.41it/s] Starting t = 2 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:01<00:00, 872.17it/s] Starting t = 3 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:01<00:00, 524.91it/s] Starting t = 4 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:02<00:00, 339.41it/s] Starting t = 5 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:04<00:00, 227.44it/s] Starting t = 6 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:06<00:00, 164.92it/s] Starting t = 7 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:08<00:00, 113.14it/s] Starting t = 8 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:15<00:00, 62.85it/s] Starting t = 9 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:44<00:00, 22.51it/s] Note that runtime is increasing exponentially \\(t\\). The runtime, beyond \\(t=13\\) or so, can be improved using GPUs if you have access to them, either using qsim's built-in GPU backend, or NVIDIA's cuQuantum, the latter of which allows you to pool the resources of multiple GPUs. For instructions on picking hardware, see this page, and for a tutorial on setting up the GPU backends, see this page. For the paper, we perform simulations to cycle 18 using 8 NVIDIA A100 GPUs. Now, let's plot the observed moments of the transferred magnetization: fig, ax = plt.subplots(2,2, figsize=(6,5), dpi=200, facecolor='white', sharex='col') ax[0,0].errorbar(t, mean, d_mean) ax[1,0].errorbar(t, variance, d_variance) ax[0,1].errorbar(t, skewness, d_skewness, zorder=100) ax[1,1].errorbar(t, kurtosis, d_kurtosis, zorder=100) ax[0,0].set_ylabel('Mean, $\\\\langle \\\\mathcal{M} \\\\rangle$') ax[1,0].set_ylabel('Variance, $\\\\sigma^2$') ax[0,1].set_ylabel('Skewness, $\\\\mathcal{S}$') ax[1,1].set_ylabel('Kurtosis, $\\\\mathcal{Q}$') ax[1,0].set_xlabel('Cycle number, $t$') ax[1,1].set_xlabel('Cycle number, $t$') for _ in ax[:,0]: _.set_xscale('log') _.set_yscale('log') _.xaxis.set_major_formatter(ticker.FormatStrFormatter(\"%.2g\")) _.yaxis.set_major_formatter(ticker.FormatStrFormatter(\"%.2g\")) _.yaxis.set_minor_formatter(ticker.FormatStrFormatter(\"%.2g\")) t_ref = np.array([5,9]) ax[0,0].plot(t_ref, t_ref**(2/3), 'k') ax[0,0].text(7,3.3, '$t^{2/3}$',) ax[1,0].plot(t_ref, 1.9*t_ref**(2/3), 'k') ax[1,0].text(7,6, '$t^{2/3}$',) ## TW GUE predictions: ax[0,1].axhline(0.224, linestyle='--', color='k') ax[0,1].text(np.mean(t),0.224, 'TW GUE', backgroundcolor='white', va='center', ha='left') ax[1,1].axhline(0.093, linestyle='--', color='k') ax[1,1].text(np.mean(t),0.093, 'TW GUE', backgroundcolor='white', va='center', ha='left') ax[0,1].set_ylim(ax[0,1].get_ylim()[0], 0.3) ax[1,1].set_ylim(ax[1,1].get_ylim()[0], 0.2) for _ in ax.flatten(): _.tick_params(direction='in', top=True, right=True, which='both') plt.tight_layout() Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-02-16 UTC.",
    "url": "https://quantumai.google/cirq/experiments/kpz/kpz",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 1569,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:40.335503"
  },
  {
    "id": "cirq_-2673971307766084209_0",
    "title": "Data collection \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Data collection View on QuantumAI Run in Google Colab View source on GitHub Download notebook Following a set of idioms and using common utilities when running NISQy quantum experiments is advantageous to: Avoid duplication of effort for common tasks like data saving and loading Enable easy data sharing Reduce cognitive load of onboarding onto a new experiment. The 'science' part is isolated from an idiomatic 'infrastructure' part. Idioms and conventions are more flexible than a strict framework. You don't need to do everything exactly. This notebook shows how to design the infrastructure to support a simple experiment. Setup Install the ReCirq package: try: import recirq except ImportError: !pip install --quiet git+https://github.com/quantumlib/ReCirq Now import Cirq, ReCirq and the module dependencies: import os import numpy as np import sympy import cirq import recirq Tasks We organize our experiments around the concept of \"tasks\". A task is a unit of work which consists of loading in input data, doing data processing or data collection, and saving results. Dividing your pipeline into tasks can be more of an art than a science. However, some rules of thumb can be observed: A task should be at least 30 seconds worth of work but less than ten minutes worth of work. Finer division of tasks can make your pipelines more composable, more resistant to failure, easier to restart from failure, and easier to parallelize. Coarser division of tasks can amortize the cost of input and output data serialization and deserialization. A task should be completely determined by a small-to-medium collection of primitive data type parameters. In fact, these parameters will represent instances of tasks and will act as \"keys\" in a database or on the filesystem. Practically, a task consists of a TasknameTask (use your own name!) dataclass and a function which takes an instance of such a class as its argument, does the requisite data processing, and saves its results. Here, we define the ReadoutScanTask class with members that tell us exactly what data we want to collect. @recirq.json_serializable_dataclass(namespace='recirq.readout_scan', registry=recirq.Registry, frozen=True) class ReadoutScanTask: \"\"\"Scan over Ry(theta) angles from -pi/2 to 3pi/2 tracing out a sinusoid which is primarily affected by readout error. See Also: :py:func:`run_readout_scan` Attributes: dataset_id: A unique identifier for this dataset. device_name: The device to run on, by name. n_shots: The number of repetitions for each theta value. qubit: The qubit to benchmark. resolution_factor: We select the number of points in the linspace so that the special points: (-1/2, 0, 1/2, 1, 3/2) * pi are always included. The total number of theta evaluations is resolution_factor * 4 + 1. \"\"\" dataset_id: str device_name: str n_shots: int qubit: cirq.GridQubit resolution_factor: int @property def fn(self): n_shots = _abbrev_n_shots(n_shots=self.n_shots) qubit = _abbrev_grid_qubit(self.qubit) return (f'{self.dataset_id}/' f'{self.device_name}/' f'q-{qubit}/' f'ry_scan_{self.resolution_factor}_{n_shots}') # Define the following helper functions to make nicer `fn` keys # for the tasks: def _abbrev_n_shots(n_shots: int) -> str: \"\"\"Shorter n_shots component of a filename\"\"\" if n_shots % 1000 == 0: return f'{n_shots // 1000}k' return str(n_shots) def _abbrev_grid_qubit(qubit: cirq.GridQubit) -> str: \"\"\"Formatted grid_qubit component of a filename\"\"\" return f'{qubit.row}_{qubit.col}' There are some things worth noting with this TasknameTask class. We use the utility annotation @json_serializable_dataclass, which wraps the vanilla @dataclass annotation, except it permits saving and loading instances of ReadoutScanTask using Cirq's JSON serialization facilities. We give it an appropriate namespace to distinguish between top-level cirq objects. Data members are all primitive or near-primitive data types: str, int, GridQubit. This sets us up well to use ReadoutScanTask in a variety of contexts where it may be tricky to use too-abstract data types. First, these simple members allow us to map from a task object to a unique /-delimited string appropriate for use as a filename or a unique key. Second, these parameters are immediately suitable to serve as columns in a pd.DataFrame or a database table. There is a property named fn which provides a mapping from ReadoutScanTask instances to strings suitable for use as filenames. In fact, we will use this to save per-task data. Note that every dataclass member variable is used in the construction of fn. We also define some utility methods to make more human-readable strings. There must be a 1:1 mapping from task attributes to filenames. In general it is easy to go from a Task object to a filename. It should be possible to go the other way, although filenames prioritize readability over parsability; so in general this relationship won\u2019t be used. We begin with a dataset_id field. Remember, instances of ReadoutScanTask must completely capture a task. We may want to run the same qubit for the same number of shots on the same device on two different days, so we include dataset_id to capture the notion of time and/or the state of the universe for tasks. Each family of tasks should include dataset_id as its first parameter. Namespacing A collection of tasks can be grouped into an \"experiment\" with a particular name. This defines a folder ~/cirq-results/[experiment_name]/ under which data will be stored. If you were storing data in a database, this might be the table name. The second level of namespacing comes from tasks' dataset_id field which groups together an immutable collection of results taken at roughly the same time. By convention, you can define the following global variables in your experiment scripts: EXPERIMENT_NAME = 'readout-scan' DEFAULT_BASE_DIR = os.path.expanduser(f'~/cirq-results/{EXPERIMENT_NAME}') All of the I/O functions take a base_dir parameter to support full control over where things are saved / loaded. Your script will use DEFAULT_BASE_DIR. Typically, data collection (i.e. the code in this notebook) would be in a script so you can run it headless for a long time. Typically, analysis is done in one or more notebooks because of their ability to display rich output. By saving data correctly, your analysis and plotting code can run fast and interactively. Running a Task Each task is comprised not only of the Task object, but also a function that executes the task. For example, here we define the process by which we collect data. There should only be one required argument: task whose type is the class defined to completely specify the parameters of a task. Why define a separate class instead of just using normal function arguments? Remember this class has a fn property that gives a unique string for parameters. If there were more arguments to this function, there would be inputs not specified in fn and the data output path could be ambiguous. By putting the arguments in a class, they can easily be serialized as metadata alongside the output of the task. The behavior of the function must be completely determined by its inputs. This is why we put a dataset_id field in each task that's usually something resembling a timestamp. It captures the 'state of the world' as an input. It's recommended that you add a check to the beginning of each task function to check if the output file already exists. If it does and the output is completely determined by its inputs, then we can deduce that the task is already done. This can save time for expensive classical pre-computations or it can be used to re-start a collection of tasks where only some of them had completed. In general, you have freedom to implement your own logic in these functions, especially between the beginning (which is code for loading in input data) and the end (which is always a call to recirq.save()). Don't go crazy. If there's too much logic in your task execution function, consider factoring out useful functionality into the main library. def run_readout_scan(task: ReadoutScanTask, base_dir=None): \"\"\"Execute a :py:class:`ReadoutScanTask` task.\"\"\" if base_dir is None: base_dir = DEFAULT_BASE_DIR if recirq.exists(task, base_dir=base_dir): print(f\"{task} already exists. Skipping.\") return # Create a simple circuit theta = sympy.Symbol('theta') circuit = cirq.Circuit([ cirq.ry(theta).on(task.qubit), cirq.measure(task.qubit, key='z') ]) # Use utilities to map sampler names to Sampler objects sampler = recirq.get_sampler_by_name(device_name=task.device_name) # Use a sweep over theta values. # Set up limits so we include (-1/2, 0, 1/2, 1, 3/2) * pi # The total number of points is resolution_factor * 4 + 1 n_special_points: int = 5 resolution_factor = task.resolution_factor theta_sweep = cirq.Linspace(theta, -np.pi / 2, 3 * np.pi / 2, resolution_factor * (n_special_points - 1) + 1) thetas = np.asarray([v for ((k, v),) in theta_sweep.param_tuples()]) flat_circuit, flat_sweep = cirq.flatten_with_sweep(circuit, theta_sweep) # Run the jobs print(f\"Collecting data for {task.qubit}\", flush=True) results = sampler.run_sweep(program=flat_circuit, params=flat_sweep, repetitions=task.n_shots) # Save the results recirq.save(task=task, data={ 'thetas': thetas, 'all_bitstrings': [ recirq.BitArray(np.asarray(r.measurements['z'])) for r in results] }, base_dir=base_dir) The driver script Typically, the above classes and functions will live in a Python module; something like recirq/readout_scan/tasks.py. You can then have one or more \"driver scripts\" which are actually executed. View the driver script as a configuration file that specifies exactly which parameters you want to run. You can see that below, we've formatted the construction of all the task objects to look like a configuration file. This is no accident! As noted in the docstring, the user can be expected to twiddle values defined in the script. Trying to factor this out into an ini file (or similar) is more effort than it's worth. # Put in a file named run-readout-scan.py import datetime import cirq_google as cg MAX_N_QUBITS = 5 def main(): \"\"\"Main driver script entry point. This function contains configuration options and you will likely need to edit it to suit your needs. Of particular note, please make sure `dataset_id` and `device_name` are set how you want them. You may also want to change the values in the list comprehension to set the qubits. \"\"\" # Uncomment below for an auto-generated unique dataset_id # dataset_id = datetime.datetime.now().isoformat(timespec='minutes') dataset_id = '2020-02-tutorial' data_collection_tasks = [ ReadoutScanTask( dataset_id=dataset_id, device_name='Syc23-simulator', n_shots=40_000, qubit=qubit, resolution_factor=6, ) for qubit in sorted(cg.Sycamore23.metadata.qubit_set)[:MAX_N_QUBITS] ] for dc_task in data_collection_tasks: run_readout_scan(dc_task) if __name__ == '__main__': main() ReadoutScanTask(dataset_id='2020-02-tutorial', device_name='Syc23-simulator', n_shots=40000, qubit=cirq.GridQubit(3, 2), resolution_factor=6) already exists. Skipping. ReadoutScanTask(dataset_id='2020-02-tutorial', device_name='Syc23-simulator', n_shots=40000, qubit=cirq.GridQubit(4, 1), resolution_factor=6) already exists. Skipping. ReadoutScanTask(dataset_id='2020-02-tutorial', device_name='Syc23-simulator', n_shots=40000, qubit=cirq.GridQubit(4, 2), resolution_factor=6) already exists. Skipping. ReadoutScanTask(dataset_id='2020-02-tutorial', device_name='Syc23-simulator', n_shots=40000, qubit=cirq.GridQubit(4, 3), resolution_factor=6) already exists. Skipping. ReadoutScanTask(dataset_id='2020-02-tutorial', device_name='Syc23-simulator', n_shots=40000, qubit=cirq.GridQubit(5, 0), resolution_factor=6) already exists. Skipping. Additionally, follow good Python convention by wrapping the entry point in a function (i.e. def main(): rather than putting it directly under if __name__ == '__main__'. The latter strategy puts all variables in the global scope (bad!). Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-12-15 UTC.",
    "url": "https://quantumai.google/cirq/experiments/guide/data_collection",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 1761,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:43.416117"
  },
  {
    "id": "cirq_443314356183123601_0",
    "title": "Precomputed analysis \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Precomputed analysis View on QuantumAI Run in Google Colab View source on GitHub Download notebook Use precomputed optimal angles to measure the expected value of \\(\\langle C \\rangle\\) across a variety of problem types, sizes, \\(p\\)-depth, and random instances. Setup Install the ReCirq package: try: import recirq except ImportError: !pip install git+https://github.com/quantumlib/ReCirq Now import Cirq, ReCirq and the module dependencies: import recirq import cirq import numpy as np import pandas as pd Load the raw data Go through each record, load in supporting objects, flatten everything into records, and put into a massive dataframe. from recirq.qaoa.experiments.precomputed_execution_tasks import \\ DEFAULT_BASE_DIR, DEFAULT_PROBLEM_GENERATION_BASE_DIR, DEFAULT_PRECOMPUTATION_BASE_DIR records = [] for record in recirq.iterload_records(dataset_id=\"2020-03-tutorial\", base_dir=DEFAULT_BASE_DIR): dc_task = record['task'] apre_task = dc_task.precomputation_task pgen_task = apre_task.generation_task problem = recirq.load(pgen_task, base_dir=DEFAULT_PROBLEM_GENERATION_BASE_DIR)['problem'] record['problem'] = problem.graph record['problem_type'] = problem.__class__.__name__ record['optimum'] = recirq.load(apre_task, base_dir=DEFAULT_PRECOMPUTATION_BASE_DIR)['optimum'] record['bitstrings'] = record['bitstrings'].bits recirq.flatten_dataclass_into_record(record, 'task') recirq.flatten_dataclass_into_record(record, 'precomputation_task') recirq.flatten_dataclass_into_record(record, 'generation_task') recirq.flatten_dataclass_into_record(record, 'optimum') records.append(record) df_raw = pd.DataFrame(records) df_raw['timestamp'] = pd.to_datetime(df_raw['timestamp']) df_raw.head() Narrow down to relevant data Drop unnecessary metadata and use bitstrings to compute the expected value of the energy. In general, it's better to save the raw data and lots of metadata so we can use it if it becomes necessary in the future. from recirq.qaoa.simulation import hamiltonian_objectives, hamiltonian_objective_avg_and_err import cirq_google as cg def compute_energy_w_err(row): permutation = [] for i, q in enumerate(row['qubits']): fi = row['final_qubits'].index(q) permutation.append(fi) energy, err = hamiltonian_objective_avg_and_err(row['bitstrings'], row['problem'], permutation) return pd.Series([energy, err], index=['energy', 'err']) # Start cleaning up the raw data df = df_raw.copy() # Don't need these columns for present analysis df = df.drop(['gammas', 'betas', 'circuit', 'violation_indices', 'precomputation_task.dataset_id', 'generation_task.dataset_id', 'generation_task.device_name'], axis=1) # p is specified twice (from a parameter and from optimum) assert (df['optimum.p'] == df['p']).all() df = df.drop('optimum.p', axis=1) # Compute energies df = df.join(df.apply(compute_energy_w_err, axis=1)) df = df.drop(['bitstrings', 'qubits', 'final_qubits', 'problem'], axis=1) # Normalize df['energy_ratio'] = df['energy'] / df['min_c'] df['err_ratio'] = df['err'] * np.abs(1/df['min_c']) df['f_val_ratio'] = df['f_val'] / df['min_c'] df Plots %matplotlib inline from matplotlib import pyplot as plt import seaborn as sns sns.set_style('ticks') plt.rc('axes', labelsize=16, titlesize=16) plt.rc('xtick', labelsize=14) plt.rc('ytick', labelsize=14) plt.rc('legend', fontsize=14, title_fontsize=16) # theme colors QBLUE = '#1967d2' QRED = '#ea4335ff' QGOLD = '#fbbc05ff' QGREEN = '#34a853ff' QGOLD2 = '#ffca28' QBLUE2 = '#1e88e5' C = r'\\langle C \\rangle' CMIN = r'C_\\mathrm{min}' COVERCMIN = f'${C}/{CMIN}$' def percentile(n): def percentile_(x): return np.nanpercentile(x, n) percentile_.__name__ = 'percentile_%s' % n return percentile_ Raw swarm plots of all data import numpy as np from matplotlib import pyplot as plt pretty_problem = { 'HardwareGridProblem': 'Hardware Grid', 'SKProblem': 'SK Model', 'ThreeRegularProblem': '3-Regular MaxCut' } for problem_type in ['HardwareGridProblem', 'SKProblem', 'ThreeRegularProblem']: df1 = df df1 = df1[df1['problem_type'] == problem_type] for p in sorted(df1['p'].unique()): dfb = df1 dfb = dfb[dfb['p'] == p] dfb = dfb.sort_values(by='n_qubits') plt.subplots(figsize=(7,5)) n_instances = dfb.groupby('n_qubits').count()['energy_ratio'].unique() if len(n_instances) == 1: n_instances = n_instances[0] label = f'{n_instances}' else: label = f'{min(n_instances)} - {max(n_instances)}' #sns.boxplot(dfb['n_qubits'], dfb['energy_ratio'], color=QBLUE, saturation=1) #sns.boxplot(dfb['n_qubits'], dfb['f_val_ratio'], color=QGREEN, saturation=1) sns.swarmplot(x=dfb['n_qubits'], y=dfb['energy_ratio'], color=QBLUE) sns.swarmplot(x=dfb['n_qubits'], y=dfb['f_val_ratio'], color=QGREEN) plt.axhline(1, color='grey', ls='-') plt.axhline(0, color='grey', ls='-') plt.title(f'{pretty_problem[problem_type]}, {label} instances, p={p}') plt.xlabel('# Qubits') plt.ylabel(COVERCMIN) plt.tight_layout() plt.show() Compare SK and hardware grid vs. n pretty_problem = { 'HardwareGridProblem': 'Hardware Grid', 'SKProblem': 'SK Model', 'ThreeRegularProblem': '3-Regular MaxCut' } df1 = df df1 = df1[ ((df1['problem_type'] == 'SKProblem') & (df1['p'] == 3)) | ((df1['problem_type'] == 'HardwareGridProblem') & (df1['p'] == 3)) ] df1 = df1.sort_values(by='n_qubits') MINQ = 3 df1 = df1[df1['n_qubits'] >= MINQ] plt.subplots(figsize=(8, 6)) plt.xlim((8, 23)) # SK dfb = df1 dfb = dfb[dfb['problem_type'] == 'SKProblem'] sns.swarmplot(x=dfb['n_qubits'], y=dfb['energy_ratio'], s=5, linewidth=0.5, edgecolor='k', color=QRED) sns.swarmplot(x=dfb['n_qubits'], y=dfb['f_val_ratio'], s=5, linewidth=0.5, edgecolor='k', color=QRED, marker='s') dfg = dfb.groupby('n_qubits').mean().reset_index() # -------- # Hardware dfb = df1 dfb = dfb[dfb['problem_type'] == 'HardwareGridProblem'] sns.swarmplot(x=dfb['n_qubits'], y=dfb['energy_ratio'], s=5, linewidth=0.5, edgecolor='k', color=QBLUE) sns.swarmplot(x=dfb['n_qubits'], y=dfb['f_val_ratio'], s=5, linewidth=0.5, edgecolor='k', color=QBLUE, marker='s') dfg = dfb.groupby('n_qubits').mean().reset_index() # ------- plt.axhline(1, color='grey', ls='-') plt.axhline(0, color='grey', ls='-') plt.xlabel('# Qubits') plt.ylabel(COVERCMIN) from matplotlib.patches import Patch from matplotlib.lines import Line2D from matplotlib.legend_handler import HandlerTuple lelements = [ Line2D([0], [0], color=QBLUE, marker='o', ms=7, ls='', ), Line2D([0], [0], color=QRED, marker='o', ms=7, ls='', ), Line2D([0], [0], color='k', marker='s', ms=7, ls='', markerfacecolor='none'), Line2D([0], [0], color='k', marker='o', ms=7, ls='', markerfacecolor='none'), ] plt.legend(lelements, ['Hardware Grid', 'SK Model', 'Noiseless', 'Experiment', ], loc='best', title=f'p = 3', handler_map={tuple: HandlerTuple(ndivide=None)}, framealpha=1.0) plt.tight_layout() plt.show() Hardware grid vs. p dfb = df dfb = dfb[dfb['problem_type'] == 'HardwareGridProblem'] dfb = dfb[['p', 'instance_i', 'n_qubits', 'energy_ratio', 'f_val_ratio']] P_LIMIT = max(dfb['p']) def max_over_p(group): i = group['energy_ratio'].idxmax() return group.loc[i][['energy_ratio', 'p']] def count_p(group): new = {} for i, c in enumerate(np.bincount(group['p'], minlength=P_LIMIT+1)): if i == 0: continue new[f'p{i}'] = c return pd.Series(new) dfgy = dfb.groupby(['n_qubits', 'instance_i']).apply(max_over_p).reset_index() dfgz = dfgy.groupby(['n_qubits']).apply(count_p).reset_index() # In the paper, we restrict to n > 10 # dfgz = dfgz[dfgz['n_qubits'] > 10] dfgz = dfgz.set_index('n_qubits').sum(axis=0) dfgz /= (dfgz.sum()) dfgz p1 0.25 p2 0.60 p3 0.15 dtype: float64 dfb = df dfb = dfb[dfb['problem_type'] == 'HardwareGridProblem'] dfb = dfb[['p', 'instance_i', 'n_qubits', 'energy_ratio', 'f_val_ratio']] # In the paper, we restrict to n > 10 # dfb = dfb[dfb['n_qubits'] > 10] dfg = dfb.groupby('p').agg(['median', percentile(25), percentile(75), 'mean', 'std']).reset_index() plt.subplots(figsize=(5.5,4)) plt.errorbar(x=dfg['p'], y=dfg['f_val_ratio', 'mean'], yerr=(dfg['f_val_ratio', 'std'], dfg['f_val_ratio', 'std']), fmt='o-', capsize=7, color=QGREEN, label='Noiseless' ) plt.errorbar(x=dfg['p'], y=dfg['energy_ratio', 'mean'], yerr=(dfg['energy_ratio', 'std'], dfg['energy_ratio', 'std']), fmt='o-', capsize=7, color=QBLUE, label='Experiment' ) plt.xlabel('p') plt.ylabel('Mean ' + COVERCMIN) plt.ylim((0, 1)) plt.text(0.05, 0.9, r'Hardware Grid', fontsize=16, transform=plt.gca().transAxes, ha='left', va='bottom') plt.legend(loc='center right') ax2 = plt.gca().twinx() # instantiate a second axes that shares the same x-axis dfgz_p = [int(s[1:]) for s in dfgz.index] dfgz_y = dfgz.values ax2.bar(dfgz_p, dfgz_y, color=QBLUE, width=0.9, lw=1, ec='k') ax2.tick_params(axis='y') ax2.set_ylim((0, 2)) ax2.set_yticks([0, 0.25, 0.50]) ax2.set_yticklabels(['0%', None, '50%']) ax2.set_ylabel('Fraction best' + ' ' * 41, fontsize=14) plt.tight_layout() Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qaoa/precomputed_analysis",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 940,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:46.269888"
  },
  {
    "id": "cirq_-2119152417211595631_0",
    "title": "Hartree-Fock on a superconducting qubit quantum processor \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Hartree-Fock on a superconducting qubit quantum processor This examples describes how to set up molecular data and perform the experiment in arXiv:2004.04174. The goal in providing this code is transparency and reproducibility. This is a living code base and various pieces may be integrated into OpenFermion over time. The HFVQE experiment seeks to error mitigate the basis rotation circuit primitive. This is achieved by post-selection, variational relaxation of the parameters, and purification. The tutorial demonstrates how to collect data and perform analysis such as extracting fidelity and performing optimization. Quickstart The quickstart tutorial provided with this module describes how to initialize and run a Hartree-Fock VQE calculation. It steps through estimating the 1-RDM given a set of parameters for the basis transformation unitary and then provides an example of variational relaxation of the parameters. Utilities for estimating all quantities described in arXiv:2004.04174 such as fidelities, fidelity witness values, absolute errors, and error bars are also provided. All software for running the experiment is in the recirq.hfvqe submodule. The molecular data used in the experiment can be found in the recirq.hfvqe.molecular_data directory. Molecular Data The paper describes the performance of VQE-HF for four hydrogen chain systems and diazene. We provide molecular data files and utilities for generating the hydrogen chain inputs using OpenFermion, Psi4, and OpenFermion-Psi4. The Diazene data can be found in the openfermion-cloud repository. A tutorial on how the data is generated can be found in this ipython notebook. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/hfvqe",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 296,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:47.731341"
  },
  {
    "id": "cirq_-8061705572720626286_0",
    "title": "Optimization Analysis \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Optimization Analysis View on QuantumAI Run in Google Colab View source on GitHub Download notebook Setup Install the ReCirq package: try: import recirq except ImportError: !pip install -q git+https://github.com/quantumlib/ReCirq sympy~=1.6 Load Data Go through each record, load in supporting objects, flatten everything into records, and put into a dataframe. from datetime import datetime import recirq import cirq import numpy as np import pandas as pd from recirq.qaoa.experiments.optimization_tasks import ( DEFAULT_BASE_DIR, DEFAULT_PROBLEM_GENERATION_BASE_DIR) records = [] for record in recirq.iterload_records(dataset_id=\"2020-03-tutorial\", base_dir=DEFAULT_BASE_DIR): task = record['task'] result = recirq.load(task, DEFAULT_BASE_DIR) pgen_task = task.generation_task problem = recirq.load(pgen_task, base_dir=DEFAULT_PROBLEM_GENERATION_BASE_DIR)['problem'] record['problem'] = problem.graph record['problem_type'] = problem.__class__.__name__ recirq.flatten_dataclass_into_record(record, 'task') records.append(record) df = pd.DataFrame(records) df['timestamp'] = pd.to_datetime(df['timestamp']) df.head() Plot %matplotlib inline from matplotlib import pyplot as plt import seaborn as sns sns.set_style('ticks') plt.rc('axes', labelsize=16, titlesize=16) plt.rc('xtick', labelsize=14) plt.rc('ytick', labelsize=14) plt.rc('legend', fontsize=14, title_fontsize=16) # Load landscape data from recirq.qaoa.experiments.p1_landscape_tasks import \\ DEFAULT_BASE_DIR, DEFAULT_PROBLEM_GENERATION_BASE_DIR, DEFAULT_PRECOMPUTATION_BASE_DIR, \\ ReadoutCalibrationTask records = [] ro_records = [] for record in recirq.iterload_records(dataset_id=\"2020-03-tutorial\", base_dir=DEFAULT_BASE_DIR): record['timestamp'] = datetime.fromisoformat(record['timestamp']) dc_task = record['task'] if isinstance(dc_task, ReadoutCalibrationTask): ro_records.append(record) continue pgen_task = dc_task.generation_task problem = recirq.load(pgen_task, base_dir=DEFAULT_PROBLEM_GENERATION_BASE_DIR)['problem'] record['problem'] = problem.graph record['problem_type'] = problem.__class__.__name__ record['bitstrings'] = record['bitstrings'].bits recirq.flatten_dataclass_into_record(record, 'task') recirq.flatten_dataclass_into_record(record, 'generation_task') records.append(record) # Associate each data collection task with its nearest readout calibration for record in sorted(records, key=lambda x: x['timestamp']): record['ro'] = min(ro_records, key=lambda x: abs((x['timestamp']-record['timestamp']).total_seconds())) df_raw = pd.DataFrame(records) df_raw.head() from recirq.qaoa.simulation import hamiltonian_objectives def compute_energies(row): permutation = [] qubit_map = {} final_qubit_index = {q: i for i, q in enumerate(row['final_qubits'])} for i, q in enumerate(row['qubits']): fi = final_qubit_index[q] permutation.append(fi) qubit_map[i] = q return hamiltonian_objectives(row['bitstrings'], row['problem'], permutation, row['ro']['calibration'], qubit_map) # Start cleaning up the raw data landscape_df = df_raw.copy() landscape_df = landscape_df.drop(['line_placement_strategy', 'generation_task.dataset_id', 'generation_task.device_name'], axis=1) # Compute energies landscape_df['energies'] = landscape_df.apply(compute_energies, axis=1) landscape_df = landscape_df.drop(['bitstrings', 'problem', 'ro', 'qubits', 'final_qubits'], axis=1) landscape_df['energy'] = landscape_df.apply(lambda row: np.mean(row['energies']), axis=1) # We won't do anything with raw energies right now landscape_df = landscape_df.drop('energies', axis=1) # Do timing somewhere else landscape_df = landscape_df.drop([col for col in landscape_df.columns if col.endswith('_time')], axis=1) import scipy.interpolate from recirq.qaoa.simulation import lowest_and_highest_energy def get_problem_graph(problem_type, n=None, instance_i=0): if n is None: if problem_type == 'HardwareGridProblem': n = 4 elif problem_type == 'SKProblem': n = 3 elif problem_type == 'ThreeRegularProblem': n = 4 else: raise ValueError(repr(problem_type)) r = df_raw[ (df_raw['problem_type']==problem_type)& (df_raw['n_qubits']==n)& (df_raw['instance_i']==instance_i) ]['problem'] return r.iloc[0] def plot_optimization_path_in_landscape(problem_type, res=200, method='nearest', cmap='PuOr'): optimization_data = df[df['problem_type'] == problem_type] landscape_data = landscape_df[landscape_df['problem_type'] == problem_type] xx, yy = np.meshgrid(np.linspace(0, np.pi/2, res), np.linspace(-np.pi/4, np.pi/4, res)) x_iters = optimization_data['x_iters'].values[0] min_c, max_c = lowest_and_highest_energy(get_problem_graph(problem_type)) zz = scipy.interpolate.griddata( points=landscape_data[['gamma', 'beta']].values, values=landscape_data['energy'].values / min_c, xi=(xx, yy), method=method, ) fig, ax = plt.subplots(1, 1, figsize=(5, 5)) norm = plt.Normalize(max_c/min_c, min_c/min_c) cmap = 'RdBu' extent=(0, 4, -2, 2) g = ax.imshow(zz, extent=extent, origin='lower', cmap=cmap, norm=norm, interpolation='none') xs, ys = zip(*x_iters) xs = np.array(xs) / (np.pi / 8) ys = np.array(ys) / (np.pi / 8) ax.plot(xs, ys, 'r-') ax.plot(xs[0], ys[0], 'rs')### Hardware Grid ax.plot(xs[1:-1], ys[1:-1], 'r.') ax.plot(xs[-1], ys[-1], 'ro') x, y = optimization_data['optimal_angles'].values[0] x /= (np.pi / 8) y /= (np.pi / 8) ax.plot(x, y, 'r*') ax.set_xlabel(r'$\\gamma\\ /\\ (\\pi/8)$') ax.set_ylabel(r'$\\beta\\ /\\ (\\pi/8)$') ax.set_title('Optimization path in landscape') fig.colorbar(g, ax=ax, shrink=0.8) def plot_function_values(problem_type): data = df[df['problem_type'] == problem_type] function_values = data['func_vals'].values[0] min_c, _ = lowest_and_highest_energy(get_problem_graph(problem_type)) function_values = np.array(function_values) / min_c x = range(len(function_values)) fig, ax = plt.subplots(1, 1, figsize=(5, 5)) ax.plot(x, function_values, 'o--') ax.set_xlabel('Optimization iteration') ax.set_ylabel(r'$E / E_{min}$') ax.set_title('Optimization function values') Hardware Grid plot_optimization_path_in_landscape('HardwareGridProblem') plot_function_values('HardwareGridProblem') SK Model plot_optimization_path_in_landscape('SKProblem') plot_function_values('SKProblem') 3 Regular MaxCut plot_optimization_path_in_landscape('ThreeRegularProblem') plot_function_values('ThreeRegularProblem') Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qaoa/optimization_analysis",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 609,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:49.473482"
  },
  {
    "id": "cirq_5858037865967346074_0",
    "title": "Simulation of spin and charge dynamics in the Fermi-Hubbard model \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Simulation of spin and charge dynamics in the Fermi-Hubbard model This module contains an implementation of code to simulate the dynamics of the one-dimensional Fermi-Hubbard model on Google's Quantum Computing Service. Overview The examples allow to analyze and reproduce the results published in arXiv:2010.07965 [quant-ph]: The experiment_example.ipynb notebook guides on how the code is structured, how to simulate the Fermi-Hubbard model and execute the experiment using Google's Quantum Computing Service. The publication_results.ipynb notebook guides through the analysis of results from the data set which was released together with the publication. The data set consists of four zip files and can be accessed at https://doi.org/10.5061/dryad.crjdfn32v. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-07-31 UTC.",
    "url": "https://quantumai.google/cirq/experiments/fermi_hubbard",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 160,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:58:53.601548"
  },
  {
    "id": "cirq_-2601845304809470298_0",
    "title": "Contribute \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Contribute Contribute This document is a summary of how to do various tasks that one might need to do as a developer of Cirq. Note that all commands assume a Debian environment, and all commands (except the initial repository cloning command) assume your current working directory is your local Cirq repository root directory. Cloning the repository The simplest way to get a local copy of Cirq that you can edit is by cloning Cirq's GitHub repository: git clone https://github.com/quantumlib/Cirq.git cd Cirq Recommended git setup The following command will set up large refactoring revisions to be ignored, when using git blame. git config blame.ignoreRevsFile .git-blame-ignore-revs Note that if you are using PyCharm, you might have to use the command Restart & Invalidate Caches to have the change be picked up. Forking the repository Fork the Cirq repo (Fork button in upper right corner of repo page). Forking creates a new GitHub repo at the location https://github.com/USERNAME/cirq where USERNAME is your GitHub id. Clone the fork you created to your local machine at the directory where you would like to store your local copy of the code, and cd into the newly created directory. git clone https://github.com/USERNAME/Cirq.git cd Cirq (Alternatively, you can clone the repository using the URL provided on your repo page under the green \"Clone or Download\" button) Add a remote called upstream to git. This remote will represent the main git repo for Cirq (as opposed to the clone, which you just created, which will be the origin remote). This remote can be used to merge changes from Cirq's main repository into your local development copy. git remote add upstream https://github.com/quantumlib/Cirq.git To verify the remote, run git remote -v. You should see both the origin and upstream remotes. Sync up your local git with the upstream remote: git fetch upstream You can check the branches that are on the upstream remote by running git ls-remote --heads upstream or git branch -r. Most importantly you should see upstream/main listed. Merge the upstream main into your local main so that it is up to date. git checkout main git merge upstream/main At this point your local git main should be synced with the main from the main Cirq repo. Setting up an environment These instructions are primarily for Linux-based environments that use the apt package manager. First clone the repository, if you have not already done so. See the previous section for instructions. Install system dependencies. Make sure you have Python 3.11 or greater. You can install most other dependencies via apt-get: cat apt-system-requirements.txt dev_tools/conf/apt-list-dev-tools.txt | xargs sudo apt-get install --yes There are some extra steps if Protocol Buffers are changed; see the next section. Prepare a Python virtual environment that includes the Cirq dev tools (such as Mypy). One of the system dependencies we installed was virtualenvwrapper, which makes it easy to create virtual environments. If you did not have virtualenvwrapper previously, you may need to re-open your terminal or run source ~/.bashrc before these commands will work: mkvirtualenv cirq-py3 --python=/usr/bin/python3 workon cirq-py3 python -m pip install --upgrade pip python -m pip install -r dev_tools/requirements/dev.env.txt (When you later open another terminal, you can activate the virtualenv with workon cirq-py3.) Note: Some highly managed or customized devices have configurations that interfere with virtualenv. In that case, anaconda environments may be a better choice. Check that the tests pass. ./check/pytest . (OPTIONAL) include your development copy of Cirq and its subpackages in your Python path. source dev_tools/pypath or add it to the Python path, but only in the virtualenv by first listing the modules python dev_tools/modules.py list and then adding these to the virtualenv: add2virtualenv <paste modules from last command> (Typically add2virtualenv is not executable using xargs, so this two step process is necessary.) Editable installs If you want to pip install Cirq in an editable fashion, you'll have to install it per module, e.g.: pip install -e ./cirq-core -e ./cirq-google -e ./cirq-ionq -e ./cirq-aqt Note that pip install -e . will install the cirq metapackage only, and your code changes won't get picked up! Protocol buffers Protocol buffers (\"protobufs\") are used in Cirq for converting circuits, gates, and other objects into a standard form that can be written and read by other programs. Cirq's protobufs live at cirq-google/api/v2 and may need to be changed or extended from time to time. If any protos are updated, their dependents can be rebuilt by calling the script dev_tools/build-protos.sh. This script uses grpcio-tools and protobuf version 4.25 to generate the Python proto API. Continuous integration and local testing There are a few options for running continuous integration checks, varying from easy and fast to slow and reliable. The simplest way to run checks is to invoke pytest, pylint, or mypy for yourself as follows: pytest pylint --rcfile=dev_tools/conf/.pylintrc cirq mypy --config-file=dev_tools/conf/mypy.ini . This can be a bit tedious, because you have to specify the configuration files each time. A more convenient way to run checks is to via the scripts in the check/ directory, which specify configuration arguments for you and cover more use cases: Fast checks (complete in seconds or tens of seconds) Check or apply code formatting to changed lines: ./check/format-incremental [--apply] [BASE_REVISION] Run tests associated with changed files: ./check/pytest-changed-files [BASE_REVISION] Run tests embedded in docstrings: ./check/doctest Compute incremental coverage using only tests associated with changed files: ./check/pytest-changed-files-and-incremental-coverage [BASE_REVISION] Note: this check is stricter than the incremental coverage check we actually enforce, where lines may be covered by tests in unassociated files. Type checking: ./check/mypy [files-and-flags-for-mypy] Miscellaneous checks: ./check/misc (Currently just checks that nothing outside cirq.contrib references anything inside cirq.contrib.) Slow checks (each takes a few minutes) Run all tests: ./check/pytest [files-and-flags-for-pytest] Check for lint: ./check/pylint [files-and-flags-for-pylint] Compute incremental coverage: ./check/pytest-and-incremental-coverage [BASE_REVISION] Run all continuous integration checks: ./check/all [BASE_REVISION] [--only-changed-files] [--apply-format-changes] If --only-changed-files is set, checks that can will focus down to just files that were changed (trading accuracy for speed). In the above, [BASE_REVISION] controls what commit is being compared against for an incremental check (e.g., in order to determine which files changed). If not specified, it defaults to the upstream/main branch if it exists, or else the origin/main branch if it exists, or else the main branch. The actual commit used for comparison is the git merge-base of the base revision and the working directory. The above scripts may not exactly match the results computed by the continuous integration workflows on GitHub. For example, you may be running an older version of pylint or numpy. If you need to test against the actual continuous integration check, open up a pull request. For this pull request you may want to mark it as [Testing] so that it is not reviewed. Writing docstrings and generating documentation Cirq uses Google style doc strings with a Markdown flavor and support for LaTeX. Here is an example docstring: def some_method(a: int, b: str) -> float: r\"\"\"One line summary of method. Additional information about the method, perhaps with some sort of LaTeX equation to make it clearer: $$ M = \\begin{bmatrix} 0 & 1 \\\\ 1 & 0 \\end{bmatrix} $$ Notice that this docstring is an r-string, since the LaTeX has backslashes. We can also include example code: print(cirq_google.Sycamore) You can also do inline LaTeX like $y = x^2$ and inline code like `cirq.unitary(cirq.X)`. And of course there's the standard sections. Args: a: The first argument. b: Another argument. Returns: An important value. Raises: ValueError: The value of `a` wasn't quite right. \"\"\" Dependencies Production dependencies Cirq follows a modular design. Each module should specify their dependencies in files within their folder. See, for example, the files cirq-core/requirements.txt and cirq-google/requirements.txt. In general, we should try to keep dependencies as minimal as possible and if we have to add them, keep them as relaxed as possible instead of pinning to exact versions. If exact versions or constraints are known, those should be documented in form of a comment. Development dependencies For local development: For a development environment there is a single file that installs all the module dependencies and all of the dev tools as well: dev_tools/requirements/dev.env.txt. If this is too heavy weight for you, you can instead use dev_tools/requirements/deps/dev-tools.txt and the given module dependencies. For continuous integration: Each job might need different set of requirements and it would be inefficient to install a full-blown dev env for every tiny job (e.g. mypy check). Instead, in the directory dev_tools/requirements, create a separate <job>.env.txt and include the necessary tools in there. Requirements files can include each other, which is heavily leveraged in our requirements files in order to remove duplication. You can call the following utility to unroll the content of a file: python dev_tools/requirements/reqs.py dev_tools/requirements/dev.env.txt Producing a PyPI package Do a dry run with test PyPI. If you're making a release, you should have access to a test PyPI account capable of uploading packages to Cirq. Put its credentials into the environment variables TEST_TWINE_USERNAME and TEST_TWINE_PASSWORD then run ./dev_tools/packaging/publish-dev-package.sh EXPECTED_VERSION --test You must specify the EXPECTED_VERSION argument to match the version in cirq/_version.py, and it must contain the string dev. This is to prevent accidentally uploading the wrong version. The script will append the current date and time to the expected version number before uploading to test PyPI. It will print out the full version that it uploaded. Take not of this value. Once the package has uploaded, verify that it works ./dev_tools/packaging/verify-published-package.sh FULL_VERSION_REPORTED_BY_PUBLISH_SCRIPT --test ``` The script will create fresh virtual environments, install Cirq and its dependencies, check that code importing Cirq executes, and run the tests over the installed code. If everything goes smoothly, the script will finish by printing `VERIFIED`. Do a dry run with prod PyPI This step is essentially identical to the test dry run, but with production PyPI. You should have access to a production PyPI account capable of uploading packages to Cirq. Put its credentials into the environment variables PROD_TWINE_USERNAME and PROD_TWINE_PASSWORD then run ./dev_tools/packaging/publish-dev-package.sh EXPECTED_VERSION --prod Once the package has uploaded, verify that it works ./dev_tools/packaging/verify-published-package.sh FULL_VERSION_REPORTED_BY_PUBLISH_SCRIPT --prod ``` If everything goes smoothly, the script will finish by printing `VERIFIED`. Set the version number in cirq/_version.py. Development versions end with .dev or .dev#. For example, 0.0.4.dev500 is a development version of the release version 0.0.4. For a release, create a pull request turning #.#.#.dev* into #.#.# and a follow up pull request turning #.#.# into (#+1).#.#.dev. Run dev_tools/packaging/produce-package.sh to produce PyPI artifacts. ./dev_tools/packaging/produce-package.sh dist The output files will be placed in the directory dist/. Create a GitHub release. Describe major changes (especially breaking changes) in the summary. Make sure you point the tag being created at the one and only revision with the non-dev version number. Attach the package files you produced to the release. Upload to PyPI. You can use a tool such as twine for this. For example: twine upload -u \"${PROD_TWINE_USERNAME}\" -p \"${PROD_TWINE_PASSWORD}\" dist/* You should then run the verification script to check that the uploaded package works: ./dev_tools/packaging/verify-published-package.sh VERSION_YOU_UPLOADED --prod ``` And try it out for yourself: ```bash python -m pip install cirq python -c \"import cirq; print(cirq_google.Sycamore)\" python -c \"import cirq; print(cirq.__version__)\" ``` Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-05-17 UTC.",
    "url": "https://quantumai.google/cirq/dev/development",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 1892,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:02.110412"
  },
  {
    "id": "cirq_7378702311109587625_0",
    "title": "Information scrambling in computationally complex quantum circuits \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Information scrambling in computationally complex quantum circuits Interaction in quantum systems can spread initially localized quantum information into the many degrees of freedom of the entire system. Understanding this process, known as quantum scrambling, is the key to resolving various conundrums in physics. In arXiv:2101.08870, we experimentally investigated the dynamics of quantum scrambling on a 53-qubit quantum processor. By measuring the time-dependent evolution and fluctuation of out-of-time-order correlators (OTOCs), signatures of both mechanisms associated with quantum scrambling, operator spreading and operator entanglement, were experimentally observed. This documentation shows how to build quantum circuits used in this experiment and run them to reproduce results in this publication. Overview See the OTOC experiment example to detect operator spreading and recreate Figure 1 of the OTOC paper. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/otoc",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 180,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:03.952885"
  },
  {
    "id": "cirq_-265825391333996864_0",
    "title": "Quantum scrambling experiment example \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Quantum scrambling experiment example View on QuantumAI Run in Google Colab View source on GitHub Download notebook This tutorial shows an experiment example from the publication Information scrambling in computationally complex quantum circuits (henceforth \"OTOC paper\"), in particular how to recreate Figure 1. Background on quantum scrambling Quantum scrambling describes how interaction in a quantum system disperses local information into its many degrees of freedom. Analogous to classical chaos, scrambling manifests itself as a butterfly effect wherein a local perturbation is rapidly amplified over time. The perturbation is modeled by a local operator \\(\\hat{O}\\) (the butterfly operator) acting on a qubit (the butterfly qubit). Under a dynamical process \\(\\hat{U} = \\hat{U}(t)\\), the butterfly operator evolves in the Heisenberg picture as \\[ \\hat{O} (t) = \\hat{U}^\\dagger \\hat{O} \\hat{U} \\] Expanding the butterfly operator in a basis \\[ \\hat{O} (t) = \\sum_{i = 1}^{n_p} w_i B_i \\] where \\(B_i = B^{(1)}_i \\otimes \\cdots \\otimes B^{(n)}_i\\) are basis elements and \\(w_i\\) are coefficients, we can describe the two different mechanisms of quantum scrambling as follows: Operator spreading occurs when basis elements \\(B_i\\) require a higher weight (fewer non-identity terms) on average to describe \\(\\hat{O}(t)\\). Operator entanglement occurs when a larger \\(n_p\\) (summation index) is required to describe \\(\\hat{O}(t)\\). We experimentally evaluate the out-of-time order correlator (OTOC) \\(C(t)\\) between \\(\\hat{O}(t)\\) and a measurement operator \\(\\hat{M}\\) which is a Pauli operator acting on another qubit (the measurement qubit) \\[ C(t) := \\langle \\hat{O} ^\\dagger (t) M^\\dagger \\hat{O} (t) M \\rangle \\] over a collection of quantum circuits with microscopic differences (e.g., in the phases of gates). Operator scrambling is then reflected in the average OTOC value \\(\\bar{C}(t)\\) over different circuits: \\(\\bar{C}(t) = 1\\) when \\(\\hat{O}(t)\\) and \\(\\hat{M}\\) do not overlap. \\(\\bar{C}(t) < 1\\) when \\(\\hat{O}(t)\\) and \\(\\hat{M}\\) overlap. \\(\\bar{C}(t) \\rightarrow 0\\) in the fully scrambled limit where the commutation between \\(\\hat{O}(t)\\) and \\(\\hat{M}\\) is completely randomized. Note that if operator entanglement is also present (\\(n_p \\gg 1\\)), \\(\\bar{C}(t)\\) approaches \\(0\\) for all circuits and their fluctuation vanishes as well. In what follows, we show how to build OTOC circuits, run them and compute \\(\\bar{C}\\), then visualize results and detect operator spreading. Setup try: import recirq except ImportError: print(\"Installing ReCirq...\") !pip install git+https://github.com/quantumlib/recirq --quiet print(\"Installed ReCirq!\") import matplotlib.pyplot as plt import numpy as np import cirq import cirq_google as cg from recirq import otoc Note: Leave the project_id and/or processor_id blank to use a noisy simulator. Toggle code import os # The Google Cloud Project id to use. project_id = '' use_noisy_simulator = False if project_id == '' and 'GOOGLE_CLOUD_PROJECT' not in os.environ: print(\"No project_id provided and environment variable \" \"GOOGLE_CLOUD_PROJECT not set.\") use_noisy_simulator = True else: os.environ['GOOGLE_CLOUD_PROJECT'] = project_id def authenticate_user(): \"\"\"Runs the user through the Colab OAuth process. Checks for Google Application Default Credentials and runs interactive login if the notebook is executed in Colab. In case the notebook is executed in Jupyter notebook or other IPython runtimes, no interactive login is provided, it is assumed that the `GOOGLE_APPLICATION_CREDENTIALS` env var is set or `gcloud auth application-default login` was executed already. For more information on using Application Default Credentials see https://cloud.google.com/docs/authentication/production \"\"\" in_colab = False try: from IPython import get_ipython in_colab = 'google.colab' in str(get_ipython()) except: # Notebook is not executed within IPython. Assuming external authentication. return if in_colab: from google.colab import auth print(\"Getting OAuth2 credentials.\") print(\"Press enter after entering the verification code.\") auth.authenticate_user(clear_output=False) print(\"Authentication complete.\") else: print(\"Notebook is not executed with Colab, assuming Application Default Credentials are setup.\") authenticate_user() print(\"Successful authentication to Google Cloud.\") processor_id = \"\" use_noisy_simulator = use_noisy_simulator or processor_id == \"\" if use_noisy_simulator: print(\"Using a noisy simulator.\") sampler = cg.PhasedFSimEngineSimulator.create_with_random_gaussian_sqrt_iswap( mean=cg.SQRT_ISWAP_INV_PARAMETERS, sigma=cg.PhasedFSimCharacterization( theta=0.01, zeta=0.10, chi=0.01, gamma=0.10, phi=0.02 ), ) device = cg.Bristlecone else: sampler = cg.get_engine_sampler(processor_id, gate_set_name=\"sqrt_iswap\") device = cg.get_engine_device(processor_id=processor_id)",
    "url": "https://quantumai.google/cirq/experiments/otoc/otoc_example",
    "source": "cirq",
    "doc_type": "example",
    "metadata": {
      "word_count": 626,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:08.798856"
  },
  {
    "id": "cirq_7652288946703503810_0",
    "title": "Install \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Start Install Choose your operating system: Installing on Linux Installing on MacOS Installing on Windows If you want to create a development environment, see the development page. Python version support Cirq currently supports Python 3.11 and later. We follow NumPy's schedule for Python version support defined in NEP 29, though we may deviate from that schedule by extending support for older Python versions if they are needed by Colab or internal Google systems. Installing on Linux Make sure you have Python 3.11.0 or greater. See Installing Python 3 on Linux in The Hitchhiker's Guide to Python. Consider using a virtual environment. Use pip to install cirq: python -m pip install --upgrade pip python -m pip install cirq (Optional) install other dependencies. Install dependencies of features in cirq.contrib. python -m pip install 'cirq-core[contrib]' Install system dependencies that pip can't handle, such as texlive-latex-base to support PDF printing. For Debian-based Linux systems, the necessary packages can be installed using the following command from the top level of the Cirq repository: sudo apt install $(cat apt-system-requirements.txt) Check that it works! python -c 'import cirq_google; print(cirq_google.Sycamore)' # should print: # (0, 5)\u2500\u2500\u2500(0, 6) # \u2502 \u2502 # \u2502 \u2502 # (1, 4)\u2500\u2500\u2500(1, 5)\u2500\u2500\u2500(1, 6)\u2500\u2500\u2500(1, 7) # \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 # (2, 3)\u2500\u2500\u2500(2, 4)\u2500\u2500\u2500(2, 5)\u2500\u2500\u2500(2, 6)\u2500\u2500\u2500(2, 7)\u2500\u2500\u2500(2, 8) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (3, 2)\u2500\u2500\u2500(3, 3)\u2500\u2500\u2500(3, 4)\u2500\u2500\u2500(3, 5)\u2500\u2500\u2500(3, 6)\u2500\u2500\u2500(3, 7)\u2500\u2500\u2500(3, 8)\u2500\u2500\u2500(3, 9) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (4, 1)\u2500\u2500\u2500(4, 2)\u2500\u2500\u2500(4, 3)\u2500\u2500\u2500(4, 4)\u2500\u2500\u2500(4, 5)\u2500\u2500\u2500(4, 6)\u2500\u2500\u2500(4, 7)\u2500\u2500\u2500(4, 8)\u2500\u2500\u2500(4, 9) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (5, 0)\u2500\u2500\u2500(5, 1)\u2500\u2500\u2500(5, 2)\u2500\u2500\u2500(5, 3)\u2500\u2500\u2500(5, 4)\u2500\u2500\u2500(5, 5)\u2500\u2500\u2500(5, 6)\u2500\u2500\u2500(5, 7)\u2500\u2500\u2500(5, 8) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (6, 1)\u2500\u2500\u2500(6, 2)\u2500\u2500\u2500(6, 3)\u2500\u2500\u2500(6, 4)\u2500\u2500\u2500(6, 5)\u2500\u2500\u2500(6, 6)\u2500\u2500\u2500(6, 7) # \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 # (7, 2)\u2500\u2500\u2500(7, 3)\u2500\u2500\u2500(7, 4)\u2500\u2500\u2500(7, 5)\u2500\u2500\u2500(7, 6) # \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 # (8, 3)\u2500\u2500\u2500(8, 4)\u2500\u2500\u2500(8, 5) # \u2502 # \u2502 # (9, 4) Installing on MacOS Make sure you have Python 3.11.0 or greater. See Installing Python 3 on MacOS . Consider using a virtual environment. Use pip to install cirq: python -m pip install --upgrade pip python -m pip install cirq (Optional) install dependencies of features in cirq.contrib. python -m pip install 'cirq-core[contrib]' Install system dependencies that pip can't handle. brew install --cask mactex Without mactex, functionality for writing PDF files will not work. Check that it works! python -c 'import cirq_google; print(cirq_google.Sycamore)' # should print: # (0, 5)\u2500\u2500\u2500(0, 6) # \u2502 \u2502 # \u2502 \u2502 # (1, 4)\u2500\u2500\u2500(1, 5)\u2500\u2500\u2500(1, 6)\u2500\u2500\u2500(1, 7) # \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 # (2, 3)\u2500\u2500\u2500(2, 4)\u2500\u2500\u2500(2, 5)\u2500\u2500\u2500(2, 6)\u2500\u2500\u2500(2, 7)\u2500\u2500\u2500(2, 8) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (3, 2)\u2500\u2500\u2500(3, 3)\u2500\u2500\u2500(3, 4)\u2500\u2500\u2500(3, 5)\u2500\u2500\u2500(3, 6)\u2500\u2500\u2500(3, 7)\u2500\u2500\u2500(3, 8)\u2500\u2500\u2500(3, 9) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (4, 1)\u2500\u2500\u2500(4, 2)\u2500\u2500\u2500(4, 3)\u2500\u2500\u2500(4, 4)\u2500\u2500\u2500(4, 5)\u2500\u2500\u2500(4, 6)\u2500\u2500\u2500(4, 7)\u2500\u2500\u2500(4, 8)\u2500\u2500\u2500(4, 9) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (5, 0)\u2500\u2500\u2500(5, 1)\u2500\u2500\u2500(5, 2)\u2500\u2500\u2500(5, 3)\u2500\u2500\u2500(5, 4)\u2500\u2500\u2500(5, 5)\u2500\u2500\u2500(5, 6)\u2500\u2500\u2500(5, 7)\u2500\u2500\u2500(5, 8) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (6, 1)\u2500\u2500\u2500(6, 2)\u2500\u2500\u2500(6, 3)\u2500\u2500\u2500(6, 4)\u2500\u2500\u2500(6, 5)\u2500\u2500\u2500(6, 6)\u2500\u2500\u2500(6, 7) # \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 # (7, 2)\u2500\u2500\u2500(7, 3)\u2500\u2500\u2500(7, 4)\u2500\u2500\u2500(7, 5)\u2500\u2500\u2500(7, 6) # \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 # (8, 3)\u2500\u2500\u2500(8, 4)\u2500\u2500\u2500(8, 5) # \u2502 # \u2502 # (9, 4) Installing on Windows If you are using the Windows Subsystem for Linux, use the Linux install instructions instead of these instructions. Make sure you have Python 3.11.0 or greater. See Installing Python 3 on Windows in The Hitchhiker's Guide to Python. Use pip to install cirq: python -m pip install --upgrade pip python -m pip install cirq (Optional) install dependencies of features in cirq.contrib. python -m pip install 'cirq-core[contrib]' Check that it works! python -c \"import cirq_google; print(cirq_google.Sycamore)\" # should print: # (0, 5)\u2500\u2500\u2500(0, 6) # \u2502 \u2502 # \u2502 \u2502 # (1, 4)\u2500\u2500\u2500(1, 5)\u2500\u2500\u2500(1, 6)\u2500\u2500\u2500(1, 7) # \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 # (2, 3)\u2500\u2500\u2500(2, 4)\u2500\u2500\u2500(2, 5)\u2500\u2500\u2500(2, 6)\u2500\u2500\u2500(2, 7)\u2500\u2500\u2500(2, 8) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (3, 2)\u2500\u2500\u2500(3, 3)\u2500\u2500\u2500(3, 4)\u2500\u2500\u2500(3, 5)\u2500\u2500\u2500(3, 6)\u2500\u2500\u2500(3, 7)\u2500\u2500\u2500(3, 8)\u2500\u2500\u2500(3, 9) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (4, 1)\u2500\u2500\u2500(4, 2)\u2500\u2500\u2500(4, 3)\u2500\u2500\u2500(4, 4)\u2500\u2500\u2500(4, 5)\u2500\u2500\u2500(4, 6)\u2500\u2500\u2500(4, 7)\u2500\u2500\u2500(4, 8)\u2500\u2500\u2500(4, 9) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (5, 0)\u2500\u2500\u2500(5, 1)\u2500\u2500\u2500(5, 2)\u2500\u2500\u2500(5, 3)\u2500\u2500\u2500(5, 4)\u2500\u2500\u2500(5, 5)\u2500\u2500\u2500(5, 6)\u2500\u2500\u2500(5, 7)\u2500\u2500\u2500(5, 8) # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 # (6, 1)\u2500\u2500\u2500(6, 2)\u2500\u2500\u2500(6, 3)\u2500\u2500\u2500(6, 4)\u2500\u2500\u2500(6, 5)\u2500\u2500\u2500(6, 6)\u2500\u2500\u2500(6, 7) # \u2502 \u2502 \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 \u2502 \u2502 # (7, 2)\u2500\u2500\u2500(7, 3)\u2500\u2500\u2500(7, 4)\u2500\u2500\u2500(7, 5)\u2500\u2500\u2500(7, 6) # \u2502 \u2502 \u2502 # \u2502 \u2502 \u2502 # (8, 3)\u2500\u2500\u2500(8, 4)\u2500\u2500\u2500(8, 5) # \u2502 # \u2502 # (9, 4) Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-05-16 UTC.",
    "url": "https://quantumai.google/cirq/start/install",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 945,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:10.404620"
  },
  {
    "id": "cirq_-1327542875293992762_0",
    "title": "Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Cirq An open source framework for programming quantum computers Cirq is a Python software library for writing, manipulating, and optimizing quantum circuits, and then running them on quantum computers and quantum simulators. Cirq provides useful abstractions for dealing with today\u2019s noisy intermediate-scale quantum computers, where details of the hardware are vital to achieving state-of-the-art results. Get started with Cirq open_in_new GitHub repository import cirq # Pick a qubit. qubit = cirq.GridQubit(0, 0) # Create a circuit circuit = cirq.Circuit( cirq.X(qubit)**0.5, # Square root of NOT. cirq.measure(qubit, key='m') # Measurement. ) print(\"Circuit:\") print(circuit) # Simulate the circuit several times. simulator = cirq.Simulator() result = simulator.run(circuit, repetitions=20) print(\"Results:\") print(result) Features Circuits Learn how to build quantum circuits from gates acting on qubits. Understand what a Moment is and how different insertion strategies can help you build your desired circuit. Learn about how to slice and dice circuits and transform them into new and better circuits. Learn more Devices Hardware constraints have a large impact on whether a circuit is practical or not on modern hardware. Learn how devices can be defined to handle these constraints. Learn more Simulation Cirq comes with built-in simulators, both for wave functions and for density matrices. These can handle noisy quantum channels using monte carlo or full density matrix simulations. In addition, Cirq works with a state-of-the-art wave function simulator: qsim. These simulators can be used to mock quantum hardware with the Quantum Virtual Machine. Simulate with Cirq Simulate with qsim Simulate with the QVM End-2-end experiments Cirq is used to run experiments on Google's quantum processors. Learn more about the latest experiments and access the code to see how to run them yourself. Learn more For beginners: Zero to quantum circuit simulation Get started on Cirq\u2019s basics with this tutorial. Learn the difference between gates and operations and how to build circuits out of moments. Simulate the resulting quantum circuits and find out how to perform transformations on these circuits. For advanced users: Quantum approximate optimization algorithm Learn how to write a quantum approximate optimization algorithm for NISQ hardware by writing a variational algorithm to optimize a solution to max-cut, which is a hard problem for classical computing. Featured guides and tutorials Introduction to Cirq Learn the basics of Cirq, from gates to operations to circuits to simulation. This is the best starting point for those who know the basics of quantum computing. See tutorial Textbook algorithms Cirq users have coded up a zoo of textbook quantum algorithms. These give you an idea of good patterns to follow in your own code and are useful when you are learning these algorithms. See list of algorithms Getting started with the QVM The Quantum Virtual Machine gives you the opportunity to run circuits on simulated hardware, which mocks the circuit constraints and noise behavior present in existing quantum hardware devices. Run a simple circuit with the QVM Learn how the QVM works QAOA See how to implement a Quantum Approximate Optimization Algorithm on real hardware. See tutorial Resources Our focused and responsible approach open_in_new Read here Educational resources Learn more GitHub repositories: Quantumlib open_in_new Explore Technical questions: Stack Exchange open_in_new Explore Community We are dedicated to cultivating an open and inclusive community to build software for near term quantum computers, and we welcome contributions from the community. Join our weekly open source meetings We host virtual open source meetings every week. Join our email lists to get invited to the ongoing open source meetings relevant to your work. Cirq Weekly Sync Subscribe: cirq-dev OpenFermion Weekly Sync Subscribe: openfermion-dev TensorFlow Quantum Weekly Sync Subscribe: tfq-dev Quantum Circuit Simulation Weekly Sync Subscribe: qsim-qsimh-dev Contribute to open source code Whether you are a researcher who wants to push the boundaries of what's available for NISQ computers, a software engineer, a technical writer, or a student who is excited about quantum computing, we welcome your contributions to our open source code available on GitHub. Getting started If you are looking for something to help out in Cirq, see the list of good first issues to get started. open_in_new Learn more Request for comment For larger features, check out our RFC process to learn how to contribute. Learn more Join our team We\u2019re looking for talented people to join our team to push the state of the art in quantum computing. Join us",
    "url": "https://quantumai.google/cirq",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 725,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:14.715371"
  },
  {
    "id": "cirq_-6400855688705990451_0",
    "title": "Noise management for running circuits \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Noise Representing Noise Noise models and channels and what types of error they replicate. Cross-Entropy Benchmarking (XEB) A characterization benchmarking method using cross entropy. Heatmaps Functions to plot noise characteristics across a 2D grid device. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-04-09 UTC.",
    "url": "https://quantumai.google/cirq/noise",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 90,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:20.218294"
  },
  {
    "id": "cirq_-7119247664539106351_0",
    "title": "Hidden linear function problem \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Hidden linear function problem View on QuantumAI Run in Google Colab View source on GitHub Download notebook try: import cirq except ImportError: print(\"installing cirq...\") !pip install --quiet cirq print(\"installed cirq.\") In this notebook we consider a problem from the paper \"Quantum advantage with shallow circuits\" and build a quantum circuit, which solves it, in Cirq. Introduction It's well-known that some problems can be solved on the quantum computer exponentially faster than on the classical one in terms of computation time. However, there is more subtle way in which quantum computers are more powerful. There is a problem, which can be solved by quantum circuit of constant depth, but can't be solved by classical circuit of constant depth. In this notebook we will consider this problem. Structure of this notebook We start by giving formal statement of the problem. Then we solve this problem in a straightforward way, which follows directly from the problem definition. We will use this solution to verify our quantum solution in the next part. Also, this part contains helper code to generate \"interesting\" instances of the problem. In the next part we solve this problem with Cirq. First, we write a code which builds a quantum circuit for solving arbitrary instances of the problem. Then we use Cirq's Clifford simulator to simulate this circuit. We do it for small instances and compare results to the brute force solution from the previous part. Then, we solve the problem for a larger instance of the problem to demonstrate that it can be solved efficiently. Goal of this notebook is to introduce the reader to the problem and to show how Cirq can be used to solve it. We don't include proofs, but we refer the reader to corresponding lemmas in the original paper. Problem statement In this problem we consider a quadratic form of a binary vector and with binary coefficients (but additions and multiplications are evaluated modulo 4). Then we restrict this quadratic form, i.e. we allow to use only certain binary vectors as input. It turns out that under this restriction this quadratic form is equivalent to a linear function, i.e. it just evaluates dot product of input vector and certain scalar vector. Task is to find this scalar vector. In other words, we have a linear function, which is \"hidden\" inside a quadratic form. Formal statement of the problem Consider \\(A \\in \\mathbb{F}_2^{n \\times n}\\) - upper-triangular binary matrix of size \\(n \\times n\\), \\(b \\in \\mathbb{F}_2^n\\) - binary vector of length \\(n\\). Define a function \\(q : \\mathbb{F}_2^n \\to \\mathbb{Z}_4\\): \\[q(x) = (2 x^T A x + b^T x) ~\\text{mod}~ 4 = \\left(2 \\sum_{i,j}A_{i,j}x_i x_j + \\sum_{i} b_i x_i \\right) ~\\text{mod}~ 4 , \\] Also define \\[\\mathcal{L}_q = \\Big\\{x \\in \\mathbb{F}_2^n : q(x \\oplus y) = (q(x) + q(y)) ~\\text{mod}~ 4 ~~ \\forall y \\in \\mathbb{F}_2^n \\Big\\}.\\] Turns out (see Lemma 1 on page 6 in [1]) that restriction of \\(q\\) on \\(\\mathcal{L}_q\\) is a linear function, i.e. there exists such \\(z \\in \\mathbb{F}_2^n\\), that \\[q(x) = 2 z^T x ~~\\forall x \\in \\mathcal{L}_q.\\] Our task is, given \\(A\\) and \\(b\\), to find \\(z\\). There may be multiple answers - we need to find any such answer. Notation in the problem \\(q\\) - quadratic form; \\(A\\) - matrix of its quadratic coefficients; \\(b\\) - vector of its linear coefficients; \\(\\mathcal{L}_q\\) - linear space on which we restrict \\(q(x)\\) in order to get linear function; \\(z\\) - vector of coefficients of the linear function we get by restricting \\(q\\) on \\(\\mathcal{L}_q\\). This vector is \"hidden\" in the coefficients of \\(q\\) and the problem is to find it. Why is this problem interesting? 1. It's a problem without an oracle There are other problems where task is to find coefficients of a linear function. But usually the linear function is represented by an oracle. See, for example, Bernstein\u2013Vazirani algorithm. In this problem we avoid use of an oracle by \"hiding\" the linear function in the coefficients of quadratic form \\(A\\) and \\(b\\), which are the only inputs to the problem. 2. Quantum circuits have advantage over classical when solving this problem As we will show below, this problem can be solved with a Clifford circuit. Therefore, according to the Gottesman\u2013Knill theorem, this problem can be solved in polynomial time on a classical computer. So, it might look like quantum computers aren't better than classical ones in solving this problem. However, if we apply certain restrictions on matrix \\(A\\), the circuit will have fixed depth (i.e. number of Moments). Namely, if the matrix \\(A\\) is an adjacency matrix of a \"grid\" graph (whose edges can be colored in 4 colors), all CZ gates will fit in 4 Moments, and overall we will have only 8 Moments - and this doesn't depend on \\(n\\). But for classical circuits it can be proven (see [1]) that even if we restrict matrix \\(A\\) in the same way, the depth of classical circuit (with gates of bounded fan-in) must grow as \\(n\\) grows (in fact, it grows as \\(\\log(n)\\)). In terms of complexity theory, this problem is in QNC0, but not in NC0, which shows that QNC0 \\(\\nsubseteq\\) NC0. Preparation and brute force solution For small values of \\(n\\) we can solve this problem with a trivial brute force solution. First, we need to build \\(\\mathcal{L}_q\\). We can do that by checking for all possible \\(2^n\\) binary vectors, whether it belongs to \\(\\mathcal{L}_q\\), using the definition of \\(\\mathcal{L}_q\\). Then we need to try all possible \\(z \\in \\mathbb{F}_2^n\\), and for each of them and for each \\(x \\in \\mathcal{L}_q\\) check whether \\(q(x) = 2 z^T x\\). Below we implement a class which represents an instance of a problem and solves it with a brute force solution. import numpy as np import cirq class HiddenLinearFunctionProblem: \"\"\"Instance of Hidden Linear Function problem. The problem is defined by matrix A and vector b, which are the coefficients of quadratic form, in which linear function is \"hidden\". \"\"\" def __init__(self, A, b): self.n = A.shape[0] assert A.shape == (self.n, self.n) assert b.shape == (self.n,) for i in range(self.n): for j in range(i + 1): assert A[i][j] == 0, 'A[i][j] can be 1 only if i<j' self.A = A self.b = b def q(self, x): \"\"\"Action of quadratic form on binary vector (modulo 4). Corresponds to `q(x)` in problem definition. \"\"\" assert x.shape == (self.n,) return (2 * (x @ self.A @ x) + (self.b @ x)) % 4 def bruteforce_solve(self): \"\"\"Calculates, by definition, all vectors `z` which are solutions to the problem.\"\"\" # All binary vectors of length `n`. all_vectors = [np.array([(m >> i) % 2 for i in range(self.n)]) for m in range(2**self.n)] def vector_in_L(x): for y in all_vectors: if self.q((x + y) % 2) != (self.q(x) + self.q(y)) % 4: return False return True # L is subspace to which we restrict domain of quadratic form. # Corresponds to `L_q` in the problem definition. self.L = [x for x in all_vectors if vector_in_L(x)] # All vectors `z` which are solutions to the problem. self.all_zs = [z for z in all_vectors if self.is_z(z)] def is_z(self, z): \"\"\"Checks by definition, whether given vector `z` is solution to this problem.\"\"\" assert z.shape == (self.n,) assert self.L is not None for x in self.L: if self.q(x) != 2 * ((z @ x) % 2): return False return True For testing, we need to generate an instance of a problem. We can generate random \\(A\\) and \\(b\\). However, for some \\(A\\) and \\(b\\) problem is trivial - that is, \\(\\mathcal{L}_q = \\{0\\}\\) and therefore any \\(z\\) is a solution. In fact, product of \\(|\\mathcal{L}_q|\\) and number of solutions is always equal to \\(2^n\\) (see Lemma 2 in [1]), so we want a problem with large \\(\\mathcal{L}_q\\). Code below can be used to generate random problem with given size of \\(\\mathcal{L}_q\\). def random_problem(n, seed=None): \"\"\"Generates instance of the problem with given `n`. Args: n: dimension of the problem. \"\"\" if seed is not None: np.random.seed(seed) A = np.random.randint(0, 2, size=(n, n)) for i in range(n): for j in range(i + 1): A[i][j] = 0 b = np.random.randint(0, 2, size=n) problem = HiddenLinearFunctionProblem(A, b) return problem def find_interesting_problem(n, min_L_size): \"\"\"Generates \"interesting\" instance of the problem. Returns instance of problem with given `n`, such that size of subspace `L_q` is at least `min_L_size`. Args: n: dimension of the problem. min_L_size: minimal cardinality of subspace L. \"\"\" for _ in range(1000): problem = random_problem(n) problem.bruteforce_solve() if len(problem.L) >= min_L_size and not np.max(problem.A) == 0: return problem return None problem = find_interesting_problem(10, 4) print(\"Size of subspace L: %d\" % len(problem.L)) print(\"Number of solutions: %d\" % len(problem.all_zs)) Size of subspace L: 4 Number of solutions: 256 We ran this function for a while and found an instance with \\(n=10\\) and \\(|\\mathcal{L}_q|=16\\), so only 64 of 1024 possible vectors are solutions. So, chance of randomly guessing a solution is \\(\\frac{1}{16}\\). We define this instance below by values of \\(A\\) and \\(b\\) and we will use it later to verify our quantum solution. A = np.array( [ [0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ] ) b = np.array([0, 0, 0, 0, 1, 1, 1, 0, 0, 1]) problem_10_64 = HiddenLinearFunctionProblem(A, b) problem_10_64.bruteforce_solve() print(\"Size of subspace L: %d\" % len(problem_10_64.L)) print(\"Number of solutions: %d\" % len(problem_10_64.all_zs)) Size of subspace L: 16 Number of solutions: 64 Solution with a quantum circuit As shown in [1], given problem can be solved by a quantum circuit, which implements operator \\(H ^ {\\otimes n} U_q H ^ {\\otimes n}\\), where \\[U_q = \\prod_{1 < i < j < n} CZ_{ij}^{A_{ij} } \\cdot \\bigotimes_{j=1}^{n} S_j^{b_j} .\\] We need to apply this operator to \\(| 0^n \\rangle\\) and measure the result - result is guaranteed to be one of the solutions. Moreover, we can get any solution with equal probability. Why does this circuit solve the problem? Define \\(p(z) = \\left| \\langle z | H ^ {\\otimes n} U_q H ^ {\\otimes n} | 0^n \\rangle \\right|^2\\). It can be shown that \\(p(z)>0\\) iff \\(z\\) is a solution. For the proof, see Lemma 2 on page 7 in [1]. Let's generate such a circuit and simulate it. Note that: We use Cirq.S gate, whose matrix is \\(\\left(\\begin{smallmatrix}1 & 0\\\\0 & i\\end{smallmatrix}\\right)\\). In the paper [1] matrix of S gate is defined as \\(\\left(\\begin{smallmatrix}1 & 0\\\\0 & -i\\end{smallmatrix}\\right)\\). But for this problem it doesn't matter. We reorder CZ gates in such a way so they take less moments. This is a problem of minimal edge coloring, and we solve it here with a simple greedy algorithm (there are better algorithms, but finding true optimum is not the point here). We can do that because CZ gates commute (because their matrices are diagonal). This part is not essential to the solution - it just makes the circuit shorter. All gates are Clifford gates, so we can use Clifford simulator. def edge_coloring(A): \"\"\"Solves edge coloring problem. Args: A: adjacency matrix of a graph. Returns list of lists of edges, such as edges in each list do not have common vertex. Tries to minimize length of this list. \"\"\" A = np.copy(A) n = A.shape[0] ans = [] while np.max(A) != 0: edges_group = [] used = np.zeros(n, dtype=bool) for i in range(n): for j in range(n): if A[i][j] == 1 and not used[i] and not used[j]: edges_group.append((i, j)) A[i][j] = 0 used[i] = used[j] = True ans.append(edges_group) return ans def generate_circuit_for_problem(problem): \"\"\"Generates `cirq.Circuit` which solves instance of Hidden Linear Function problem.\"\"\" qubits = cirq.LineQubit.range(problem.n) circuit = cirq.Circuit() # Hadamard gates at the beginning (creating equal superposition of all states). circuit += cirq.Moment([cirq.H(q) for q in qubits]) # Controlled-Z gates encoding the matrix A. for layer in edge_coloring(problem.A): for i, j in layer: circuit += cirq.CZ(qubits[i], qubits[j]) # S gates encoding the vector b. circuit += cirq.Moment([cirq.S.on(qubits[i]) for i in range(problem.n) if problem.b[i] == 1]) # Hadamard gates at the end. circuit += cirq.Moment([cirq.H(q) for q in qubits]) # Measurements. circuit += cirq.Moment([cirq.measure(qubits[i], key=str(i)) for i in range(problem.n)]) return circuit def solve_problem(problem, print_circuit=False): \"\"\"Solves instance of Hidden Linear Function problem. Builds quantum circuit for given problem and simulates it with the Clifford simulator. Returns measurement result as binary vector, which is guaranteed to be a solution to given problem. \"\"\" circuit = generate_circuit_for_problem(problem) if print_circuit: print(circuit) sim = cirq.CliffordSimulator() result = sim.simulate(circuit) z = np.array([result.measurements[str(i)][0] for i in range(problem.n)]) return z solve_problem(problem_10_64, print_circuit=True) \u250c\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2510 0: \u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M('0')\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 \u2502 1: \u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c@\u2500\u2500\u2500\u2500\u2500\u253c@\u2500\u2500\u2500\u2500\u2500\u2500\u253c@\u2500\u2500\u2500\u2500\u2500\u2500\u253c@\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500@\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M('1')\u2500\u2500\u2500 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502 \u2502 2: \u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u253c@\u2500\u2500\u2500\u2500\u2500\u253c\u253c@\u2500\u2500\u2500\u2500\u2500\u253c\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M('2')\u2500\u2500\u2500 \u2502 \u2502 \u2502\u2502\u2502 \u2502\u2502\u2502 \u2502\u2502 \u2502 \u2502 \u2502 3: \u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u253c@\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u253c\u253c\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u253c\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M('3')\u2500\u2500\u2500 \u2502\u2502 \u2502\u2502\u2502 \u2502\u2502\u2502 \u2502\u2502 \u2502 \u2502 \u2502 4: \u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u253c\u253c@\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u253c@\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u253c\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500S\u2500\u2500\u2500H\u2500\u2500\u2500M('4')\u2500\u2500\u2500 \u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2502 \u2502\u2502 \u2502 \u2502 \u2502 5: \u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u253c\u253c@\u2500\u2500\u2500\u2500\u2500\u253c@\u2500\u2500\u2500\u2500\u2500@\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c@\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u253c@\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500S\u2500\u2500\u2500H\u2500\u2500\u2500M('5')\u2500\u2500\u2500 \u2502\u2502 \u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2502 \u2502 \u2502 \u2502 6: \u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c@\u2500\u2500\u2500\u2500\u2500@\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c@\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500S\u2500\u2500\u2500H\u2500\u2500\u2500M('6')\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 7: \u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c@\u2500\u2500\u2500\u2500\u2500\u253c\u2500@\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500@\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M('7')\u2500\u2500\u2500 \u2502\u2502 \u2502\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 8: \u2500\u2500\u2500H\u2500\u2500\u2500\u2500\u253c@\u2500\u2500\u2500\u2500\u2500\u2500\u253c@\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2500M('8')\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 9: \u2500\u2500\u2500H\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500@\u2500\u2500\u2500S\u2500\u2500\u2500H\u2500\u2500\u2500M('9')\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 array([1, 1, 0, 0, 1, 1, 1, 1, 0, 1], dtype=uint8) Testing Now, let's test this algorithm. Let's solve it with a quantum circuit 100 times and each time check that measurement result is indeed an answer to the problem. def test_problem(problem): problem.bruteforce_solve() tries = 100 for _ in range(tries): z = solve_problem(problem) assert problem.is_z(z) test_problem(problem_10_64) print('OK') OK Let's repeat that for 10 other problems with \\(n=8\\) and chance of random guessing at most \\(\\frac{1}{4}\\). for _ in range(10): test_problem(find_interesting_problem(8, 4)) print('OK') OK Now, let's run our algorithm on a problem with \\(n=200\\). %%time tries = 200 problem = random_problem(tries, seed=0) solve_problem(problem, print_circuit=False) CPU times: user 2.25 s, sys: 11.9 ms, total: 2.26 s Wall time: 2.26 s array([1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0], dtype=uint8) References [1] Quantum advantage with shallow circuits by Sergey Bravyi, David Gosset and Robert K\u00f6nig. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-05-30 UTC.",
    "url": "https://quantumai.google/cirq/experiments/hidden_linear_function",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 2640,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:23.093833"
  },
  {
    "id": "cirq_1645352713868259027_0",
    "title": "Fermi-Hubbard spin-charge separation results \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Fermi-Hubbard spin-charge separation results View on QuantumAI Run in Google Colab View source on GitHub Download notebook This notebook presents the experimental data which was collected on Google Rainbow processor for the Fermi-Hubbard spin-charge separation experiment. try: import recirq except ImportError: print(\"Installing ReCirq...\") !pip install git+https://github.com/quantumlib/recirq --quiet print(\"Installed ReCirq!\") import glob from tqdm.notebook import tqdm from recirq.fermi_hubbard import ( InstanceBundle, apply_rescalings_to_bundles, find_bundles_rescalings, load_experiment, plot_quantity ) from recirq.fermi_hubbard.publication import ( parasitic_cphase_compensation, fetch_publication_data ) # Hide numpy warnings import warnings warnings.filterwarnings('ignore') Get the data In order to run this notebook, the data sets gaussians_1u1d.zip, trapping_2u2d.zip and trapping_3u3d.zip need to be downloaded and extracted from https://doi.org/10.5061/dryad.crjdfn32v. The function fetch_publication_data is a utility to do this. Note: If you have already downloaded the data, change data_dir in the next cell to where your data is located. The function fetch_publication_data will skip data that is already downloaded. data_dir = \"fermi_hubbard_data\" fetch_publication_data(base_dir=data_dir) Downloading gaussians_1u1d_nofloquet... Successfully downloaded. Downloading gaussians_1u1d... Successfully downloaded. Downloading trapping_2u2d... Successfully downloaded. Downloading trapping_3u3d... Successfully downloaded. Noninteracting Gaussians # Load results and create a bundle with extracted quantities. gaussians_1u1d_files = glob.glob(f'{data_dir}/gaussians_1u1d/0.0/*.json') gaussians_bundle = InstanceBundle( experiments=[load_experiment(file) for file in gaussians_1u1d_files], steps=range(65), rescale_steps=range(65)) # Simulate the exact numerical results that are used as a reference. with tqdm(range(len(gaussians_bundle.steps))) as progress: def post_run(_1, _2): progress.update() gaussians_bundle.cache_exact_numerics(post_run_func=post_run) 0%| | 0/65 [00:00<?, ?it/s] plot_quantity(gaussians_bundle, 'post_selection', show_std_dev=True); plot_quantity(gaussians_bundle, 'scaling', show_std_error=True); # The data for this quantity can be viewed after double-clicking this cell output. plot_quantity(gaussians_bundle, 'up_down_density', show_std_error=True); plot_quantity(gaussians_bundle, 'up_down_position_average', show_std_error=True); plot_quantity(gaussians_bundle, 'up_down_position_average_dt', show_std_error=True); Trapping Potential N=4 # Load results and create a bundles with extracted quantities for each # interaction strength. trapping_2u2d_files = [ glob.glob(f'{data_dir}/trapping_2u2d/{u}/*.json') for u in [0.0, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]] trapping_2u2d_bundles = [InstanceBundle( experiments=[load_experiment(file) for file in files], numerics_transform=parasitic_cphase_compensation(0.138), steps=range(11), rescale_steps=range(11)) for files in trapping_2u2d_files] # Simulate the exact numerical results that are used as a reference. total_steps = sum(len(bundle.steps) for bundle in trapping_2u2d_bundles) with tqdm(range(total_steps)) as progress: def post_run(_1, _2): progress.update() for bundle in trapping_2u2d_bundles: bundle.cache_exact_numerics(post_run_func=post_run) 0%| | 0/110 [00:00<?, ?it/s] # Use shared rescaling values among compatible problem instances. apply_rescalings_to_bundles(find_bundles_rescalings(trapping_2u2d_bundles)) plot_quantity(trapping_2u2d_bundles, 'post_selection', show_std_dev=True); plot_quantity(trapping_2u2d_bundles, 'scaling', show_std_error=True); plot_quantity(trapping_2u2d_bundles, 'charge_spin_density', show_std_error=True); plot_quantity(trapping_2u2d_bundles, 'charge_spin_spreading', show_std_error=True); plot_quantity(trapping_2u2d_bundles, 'charge_spin_spreading_dt', show_std_error=True); Trapping Potential N=6 # Load results and create a bundles with extracted quantities for each # interaction strength. trapping_3u3d_files = [ glob.glob(f'{data_dir}/trapping_3u3d/{u}/*.json') for u in [0.0, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]] trapping_3u3d_bundles = [InstanceBundle( experiments=[load_experiment(file) for file in files], numerics_transform=parasitic_cphase_compensation(0.138), steps=range(11), rescale_steps=range(11)) for files in trapping_3u3d_files] # Simulate the exact numerical results that are used as a reference. total_steps = sum(len(bundle.steps) for bundle in trapping_3u3d_bundles) with tqdm(range(total_steps)) as progress: def post_run(_1, _2): progress.update() for bundle in trapping_3u3d_bundles: bundle.cache_exact_numerics(post_run_func=post_run) 0%| | 0/110 [00:00<?, ?it/s] # Use shared rescaling values among compatible problem instances. apply_rescalings_to_bundles(find_bundles_rescalings(trapping_3u3d_bundles)) plot_quantity(trapping_3u3d_bundles, 'post_selection', show_std_dev=True); plot_quantity(trapping_3u3d_bundles, 'scaling', show_std_error=True); plot_quantity(trapping_3u3d_bundles, 'charge_spin_density', show_std_error=True); plot_quantity(trapping_3u3d_bundles, 'charge_spin_spreading', show_std_error=True); plot_quantity(trapping_3u3d_bundles, 'charge_spin_spreading_dt', show_std_error=True); Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-04-26 UTC.",
    "url": "https://quantumai.google/cirq/experiments/fermi_hubbard/publication_results",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 522,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:24.511730"
  },
  {
    "id": "cirq_-7992583320803004455_0",
    "title": "Hardware \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Hardware Devices Represent the constraints a device imposes on runnable circuits with the Device class. Qubit Picking Information to help you pick good qubits for running your circuit on a hardware or hardware-like device. Access and authentication How to gain access. Getting started with AQT hardware How to run your first circuit. Access and authentication How to gain access. Getting started with Honeywell on AQT hardware How to run your first circuit on a Honeywell device. Getting started with IonQ on AQT hardware How to run your first circuit on an IonQ device. Access and authentication How to gain access. Getting started with IonQ hardware How to run your first circuit. IonQ API Service Using the IonQ API. IonQ API circuits Writing circuits for the IonQ API. Running IonQ API jobs How to run jobs with the IonQ API. IonQ API calibrations How to get hardware device calibration data through the IonQ API. Access and authentication How to gain access. Getting started with Pasqal hardware How to run your first circuit. Pasqal devices Device objects to specify Pasqal hardware. Pasqal sampler Sampler objects to run on Pasqal hardware. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-07-16 UTC.",
    "url": "https://quantumai.google/cirq/hardware",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 243,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:29.964817"
  },
  {
    "id": "cirq_-1171893589019471384_0",
    "title": "Routing with t|ket> \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Routing with t|ket> View on QuantumAI Run in Google Colab View source on GitHub Download notebook Wrap tket's compilation unit framework to keep track of qubit mappings and work with generic devices. Setup Install the ReCirq package: try: import recirq except ImportError: !pip install -q git+https://github.com/quantumlib/ReCirq sympy~=1.6 Now import Cirq, ReCirq and the module dependencies: import cirq import recirq import networkx as nx from cirq.contrib.svg import SVGCircuit import numpy as np from pytket.predicates import CompilationUnit, ConnectivityPredicate from pytket.passes import SequencePass, RoutingPass, DecomposeSwapsToCXs from pytket.placement import GraphPlacement Example circuit We'll route a 3-regular circuit to Sycamore23. To try to clear up some of the confusion about which indices are which, we'll construct the initial circuit with LineQubits 10 through 19 which should be thought of as \"logical indices\". from recirq.qaoa.problem_circuits import get_generic_qaoa_circuit from recirq.qaoa.gates_and_compilation import compile_problem_unitary_to_arbitrary_zz, \\ compile_driver_unitary_to_rx problem_graph = nx.random_regular_graph(d=3, n=10) nx.set_edge_attributes(problem_graph, values=1, name='weight') circuit_qubits = cirq.LineQubit.range(10, 20) gammas = np.random.randn(2) betas = np.random.randn(2) circuit = get_generic_qaoa_circuit( problem_graph=problem_graph, qubits=circuit_qubits, gammas=gammas, betas=betas) circuit = compile_problem_unitary_to_arbitrary_zz(circuit) circuit = compile_driver_unitary_to_rx(circuit) SVGCircuit(circuit) \"Route\" this circuit Let's look at the \"connectivity graph\" of the circuit vs. that of the device import cirq.contrib.routing as ccr uncompiled_c_graph = ccr.get_circuit_connectivity(circuit) nx.draw_networkx(uncompiled_c_graph) import cirq_google as cg dev_graph = ccr.gridqubits_to_graph_device(cg.Sycamore23.metadata.qubit_set) nx.draw_networkx(dev_graph) # alias for the device. If this notebook were wrapped # in a function, `circuit` and `device` would be the arguments device = cg.Sycamore23 Convert to pytket Device The provided function doesn't work with GridDevice. We use existing functionality to turn Devices into graphs to provide a more robust solution. import pytket from recirq.qaoa.placement import _device_to_tket_device tk_circuit = pytket.extensions.cirq.cirq_to_tk(circuit) tk_device = _device_to_tket_device(device) tk_circuit.qubits [q[10], q[11], q[12], q[13], q[14], q[15], q[16], q[17], q[18], q[19]] tk_device.coupling [(grid[7, 3], grid[6, 3]), (grid[7, 3], grid[7, 4]), (grid[7, 3], grid[7, 2]), (grid[7, 3], grid[8, 3]), (grid[6, 3], grid[6, 2]), (grid[6, 3], grid[6, 4]), (grid[6, 3], grid[5, 3]), (grid[7, 4], grid[6, 4]), (grid[7, 4], grid[7, 5]), (grid[7, 4], grid[8, 4]), (grid[7, 2], grid[6, 2]), (grid[8, 3], grid[8, 4]), (grid[5, 4], grid[6, 4]), (grid[5, 4], grid[5, 3]), (grid[6, 4], grid[6, 5]), (grid[5, 3], grid[4, 3]), (grid[5, 3], grid[5, 2]), (grid[6, 1], grid[6, 2]), (grid[6, 1], grid[5, 1]), (grid[6, 2], grid[5, 2]), (grid[5, 1], grid[4, 1]), (grid[5, 1], grid[5, 2]), (grid[5, 1], grid[5, 0]), (grid[5, 2], grid[4, 2]), (grid[6, 5], grid[7, 5]), (grid[7, 5], grid[7, 6]), (grid[7, 5], grid[8, 5]), (grid[8, 4], grid[9, 4]), (grid[8, 4], grid[8, 5]), (grid[4, 1], grid[4, 2]), (grid[4, 2], grid[4, 3]), (grid[4, 2], grid[3, 2])] Placement and routing pass from pytket.predicates import CompilationUnit, ConnectivityPredicate from pytket.passes import SequencePass, RoutingPass, DecomposeSwapsToCXs, PlacementPass from pytket.placement import GraphPlacement unit = CompilationUnit(tk_circuit, [ConnectivityPredicate(tk_device)]) passes = SequencePass([ PlacementPass(GraphPlacement(tk_device)), RoutingPass(tk_device)]) passes.apply(unit) valid = unit.check_all_predicates() assert valid The initial mapping This maps from logical LineQubits to \"physical\" GridQubits unit.initial_map {q[10]: grid[6, 4], q[11]: grid[6, 2], q[12]: grid[7, 4], q[13]: grid[7, 3], q[14]: grid[5, 4], q[15]: grid[6, 3], q[16]: grid[7, 2], q[17]: grid[5, 2], q[18]: grid[5, 3], q[19]: grid[8, 3]} Bookkept initial mapping We \"decode\" our tket conventions back into Cirq idioms. def tk_to_cirq_qubit(tk): ind = tk.index return cirq.LineQubit(ind[0]) if len(ind) == 1 else cirq.GridQubit(*ind) initial_map = {tk_to_cirq_qubit(n1): tk_to_cirq_qubit(n2) for n1, n2 in unit.initial_map.items()} initial_map {cirq.LineQubit(10): cirq.GridQubit(6, 4), cirq.LineQubit(11): cirq.GridQubit(6, 2), cirq.LineQubit(12): cirq.GridQubit(7, 4), cirq.LineQubit(13): cirq.GridQubit(7, 3), cirq.LineQubit(14): cirq.GridQubit(5, 4), cirq.LineQubit(15): cirq.GridQubit(6, 3), cirq.LineQubit(16): cirq.GridQubit(7, 2), cirq.LineQubit(17): cirq.GridQubit(5, 2), cirq.LineQubit(18): cirq.GridQubit(5, 3), cirq.LineQubit(19): cirq.GridQubit(8, 3)} The final mapping This maps from logical LineQubits to final GridQubits unit.final_map {q[10]: grid[7, 4], q[11]: grid[7, 2], q[12]: grid[6, 4], q[13]: grid[6, 3], q[14]: grid[5, 4], q[15]: grid[8, 3], q[16]: grid[6, 2], q[17]: grid[5, 2], q[18]: grid[5, 3], q[19]: grid[7, 3]} final_map = {tk_to_cirq_qubit(n1): tk_to_cirq_qubit(n2) for n1, n2 in unit.final_map.items()} final_map {cirq.LineQubit(10): cirq.GridQubit(7, 4), cirq.LineQubit(11): cirq.GridQubit(7, 2), cirq.LineQubit(12): cirq.GridQubit(6, 4), cirq.LineQubit(13): cirq.GridQubit(6, 3), cirq.LineQubit(14): cirq.GridQubit(5, 4), cirq.LineQubit(15): cirq.GridQubit(8, 3), cirq.LineQubit(16): cirq.GridQubit(6, 2), cirq.LineQubit(17): cirq.GridQubit(5, 2), cirq.LineQubit(18): cirq.GridQubit(5, 3), cirq.LineQubit(19): cirq.GridQubit(7, 3)} The compilation unit applies the mapping So our circuit qubits are now GridQubits unit.circuit.qubits [grid[5, 2], grid[5, 3], grid[5, 4], grid[6, 2], grid[6, 3], grid[6, 4], grid[7, 2], grid[7, 3], grid[7, 4], grid[8, 3]] Convert the circuit back to Cirq routed_circuit = pytket.extensions.cirq.tk_to_cirq(unit.circuit) SVGCircuit(routed_circuit) Now it's nice and compiled routed_c_graph = ccr.get_circuit_connectivity(routed_circuit) nx.draw_networkx(routed_c_graph) Check that circuits are equivalent for op in routed_circuit.all_operations(): if len(op.qubits) != 2: continue a, b = op.qubits assert a.is_adjacent(b) import cirq.contrib.acquaintance as cca def permute_gate(qubits, permutation): return cca.LinearPermutationGate( num_qubits=len(qubits), permutation={i: permutation[i] for i in range(len(permutation))} ).on(*qubits) final_to_initial_map = {final_map[cq]: initial_map[cq] for cq in circuit_qubits} initial_qubits = [initial_map[cq] for cq in circuit_qubits] final_permutation = [initial_qubits.index(final_to_initial_map[q]) for q in initial_qubits] rcircuit_with_perm = routed_circuit.copy() rcircuit_with_perm.append(permute_gate(initial_qubits, final_permutation)) expected = circuit.unitary(qubit_order=cirq.QubitOrder.explicit(circuit_qubits)) actual = rcircuit_with_perm.unitary(qubit_order=cirq.QubitOrder.explicit(initial_qubits)) cirq.testing.assert_allclose_up_to_global_phase(expected, actual, atol=1e-8) Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-12-15 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qaoa/routing_with_tket",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 809,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:38.435137"
  },
  {
    "id": "cirq_-7207321343566443539_0",
    "title": "QCQMC \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments QCQMC Notebooks outlining how to reproduce the results of Unbiasing fermionic quantum Monte Carlo with a quantum computer. Quantum Monte Carlo methods are a class of classical algorithms that can offer an efficient solution to the many-electron schroedinger equation but are plagued by the fermion sign problem. Typically, a constraint is introduced to overcome this problem at the cost of introducing an uncontrolled bias in the results. In this paper, it was shown that a quantum computer could be used to prepare complicated trial wavefunctions in order to unbias the classical results. Code Overview The Code Overview notebook introduces the basic structure of the code provided in recirq to generate the trial wavefunction's prepare in the QCQMC paper. End-to-End The End-to-End notebook provides and end-to-end example for the H4 molecule and interfaces with ipie to produce numbers similar to those reported in the QCQMC paper. Experimental Wavefunctions The Experimental Wavefunctions notebook demonstrates how to download and analyze the experimental wavefunctions, which can reproduce the results in QCQMC. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-07-31 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qcqmc",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 223,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:41.435587"
  },
  {
    "id": "cirq_-6267788153385552913_0",
    "title": "QCQMC \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments QCQMC This notebook demonstrates the high-level code interface used to run the quantum part of https://arxiv.org/pdf/2106.16235.pdf The code is organized into five steps, where the input of each step is specified by one or more [Name]Params dataclasses and the output of each step is an attrs dataclass named [Name]Data with a factory method build_.... Each of the steps are demonstrated below. Setup First install recirq: try: import recirq except ImportError: %pip install git+https://github.com/quantumlib/ReCirq import attrs # Helper function to inspect the classes. def print_fields(x): \"\"\"Helper function to inspect returned objects' fields.\"\"\" for k, v in attrs.asdict(x).items(): print(f'{k}: {type(v)}') Hamiltonian The first step is to pick a molecule and generate or load its relevant physical properties, namely the Hamiltonian. Here we specify a 2-electron Fermi-Hubbard Hamiltonian in the sto-3g basis. Integral data is stored in the data/ file in this repository. The resulting data consists of the one- and two-body integrals and some energy quantities. from recirq.qcqmc.hamiltonian import HamiltonianFileParams hamiltonian_params = HamiltonianFileParams( name='4q_pp', integral_key='fh_sto3g', n_orb=2, n_elec=2, ) hamiltonian_params HamiltonianFileParams(name='4q_pp', integral_key='fh_sto3g', n_orb=2, n_elec=2, do_eri_restore=False, path_prefix='.') from recirq.qcqmc.hamiltonian import HamiltonianData hamiltonian_data = HamiltonianData.build_hamiltonian_from_file(hamiltonian_params) print_fields(hamiltonian_data) params: <class 'dict'> e_core: <class 'float'> one_body_integrals: <class 'numpy.ndarray'> two_body_integrals_pqrs: <class 'numpy.ndarray'> e_hf: <class 'float'> e_fci: <class 'float'> Trial Wavefunction Next, we specify a trial wavefunction. Here we request a perfect pairing trial (using the specialized Params class) and don't include any heuristic layers (to keep the example simple and the runtime short). The output data includes parameterized circuits and their parameters. from recirq.qcqmc.trial_wf import PerfectPairingPlusTrialWavefunctionParams trial_wf_params = PerfectPairingPlusTrialWavefunctionParams( name='4q_pp', hamiltonian_params=hamiltonian_params, heuristic_layers=(), ) trial_wf_params PerfectPairingPlusTrialWavefunctionParams(name='4q_pp', hamiltonian_params=HamiltonianFileParams(name='4q_pp', integral_key='fh_sto3g', n_orb=2, n_elec=2, do_eri_restore=False, path_prefix='.')) from recirq.qcqmc.trial_wf import TrialWavefunctionData trial_wf_data = TrialWavefunctionData.build_pp_plus_trial_from_dependencies( trial_wf_params, dependencies={ hamiltonian_params: hamiltonian_data } ) print('--'*20) print_fields(trial_wf_data) ---------------------------------------- params: <class 'dict'> ansatz_circuit: <class 'cirq.circuits.circuit.Circuit'> superposition_circuit: <class 'cirq.circuits.circuit.Circuit'> hf_energy: <class 'numpy.complex128'> ansatz_energy: <class 'float'> fci_energy: <class 'float'> one_body_basis_change_mat: <class 'numpy.ndarray'> one_body_params: <class 'numpy.ndarray'> two_body_params: <class 'numpy.ndarray'> Blueprint Next, we configure the shadow tomography strategy for measuring the trial wavefunction. We specify how many cliffords and how to generate them, i.e. the qubit partition. The returned data is a compiled circuit with parameterized clifford suffixes and Cirq resolvers for efficient execution on a device. qubits = trial_wf_params.qubits_linearly_connected from recirq.qcqmc.blueprint import BlueprintParamsTrialWf blueprint_params = BlueprintParamsTrialWf( name='4q_pp', trial_wf_params=trial_wf_params, n_cliffords=100, qubit_partition=tuple((q,) for q in qubits), ) blueprint_params BlueprintParamsTrialWf(name='4q_pp', trial_wf_params=PerfectPairingPlusTrialWavefunctionParams(name='4q_pp', hamiltonian_params=HamiltonianFileParams(name='4q_pp', integral_key='fh_sto3g', n_orb=2, n_elec=2, do_eri_restore=False, path_prefix='.')), n_cliffords=100, qubit_partition=((cirq.GridQubit(0, 0),), (cirq.GridQubit(0, 1),), (cirq.GridQubit(1, 1),), (cirq.GridQubit(1, 0),)), seed=0, optimizer_suite=0, path_prefix='.') from recirq.qcqmc.blueprint import BlueprintData blueprint_data = BlueprintData.build_blueprint_from_dependencies( blueprint_params, dependencies={ trial_wf_params: trial_wf_data }) print_fields(blueprint_data) params: <class 'dict'> compiled_circuit: <class 'cirq.circuits.circuit.Circuit'> parameterized_clifford_circuits: <class 'tuple'> resolvers: <class 'list'> Experiment Now, we're ready to execute circuits and gather samples. The experiment step has two versions: simulated or on a real device. In either case, we configure how many samples to collect and any runtime-specific parameters. The returned data includes the experimental samples. from recirq.qcqmc.experiment import SimulatedExperimentParams expt_params = SimulatedExperimentParams( name='4q_pp', blueprint_params=blueprint_params, n_samples_per_clifford=1_000, noise_model_name='None', ) expt_params SimulatedExperimentParams(name=4q_pp, blueprint_params=BlueprintParamsTrialWf(name='4q_pp', trial_wf_params=PerfectPairingPlusTrialWavefunctionParams(name='4q_pp', hamiltonian_params=HamiltonianFileParams(name='4q_pp', integral_key='fh_sto3g', n_orb=2, n_elec=2, do_eri_restore=False, path_prefix='.')), n_cliffords=100, qubit_partition=((cirq.GridQubit(0, 0),), (cirq.GridQubit(0, 1),), (cirq.GridQubit(1, 1),), (cirq.GridQubit(1, 0),)), seed=0, optimizer_suite=0, path_prefix='.'), n_samples_per_clifford=1000, noise_model_name=None) from recirq.qcqmc.experiment import ExperimentData expt_data = ExperimentData.build_experiment_from_dependencies( expt_params, dependencies={ blueprint_params: blueprint_data }) print_fields(expt_data) params: <class 'dict'> raw_samples: <class 'numpy.ndarray'> metadata: <class 'dict'> Overlap Analysis Finally, we reconstruct the wavefunction from our experiment data. The returned data here are reconstructed wavefunctions suitable for exporting to iPie for classical QCQMC walker updates. from recirq.qcqmc.analysis import OverlapAnalysisParams analysis_params = OverlapAnalysisParams( name='4q_pp', experiment_params=expt_params, k_to_calculate=(1, 2), ) analysis_params OverlapAnalysisParams(name=4q_pp, experiment_params=SimulatedExperimentParams(name=4q_pp, blueprint_params=BlueprintParamsTrialWf(name='4q_pp', trial_wf_params=PerfectPairingPlusTrialWavefunctionParams(name='4q_pp', hamiltonian_params=HamiltonianFileParams(name='4q_pp', integral_key='fh_sto3g', n_orb=2, n_elec=2, do_eri_restore=False, path_prefix='.')), n_cliffords=100, qubit_partition=((cirq.GridQubit(0, 0),), (cirq.GridQubit(0, 1),), (cirq.GridQubit(1, 1),), (cirq.GridQubit(1, 0),)), seed=0, optimizer_suite=0, path_prefix='.'), n_samples_per_clifford=1000, noise_model_name=None), k_to_calculate=(1, 2)) from recirq.qcqmc.analysis import OverlapAnalysisData analysis_data = OverlapAnalysisData.build_analysis_from_dependencies(analysis_params, dependencies={ expt_params: expt_data, blueprint_params: blueprint_data, trial_wf_params: trial_wf_data, }) print_fields(analysis_data) params: <class 'dict'> reconstructed_wf_for_k: <class 'dict'> Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-07-30 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qcqmc/high_level",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 663,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:42.944174"
  },
  {
    "id": "cirq_-7076355803245408526_0",
    "title": "Analyzing the Experimentally Reconstructed Wavefunctions \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Analyzing the Experimentally Reconstructed Wavefunctions The experimentally reconstructe wavefunctions from the QCQMC paper are available for download from zenodo. Setup First install recirq: try: import recirq except ImportError: %pip install git+https://github.com/quantumlib/ReCirq import urllib.request import tarfile stream = urllib.request.urlopen(\"https://zenodo.org/records/10141262/files/qcqmc_data.tar.gz\") with tarfile.open(fileobj=stream, mode='r|gz') as tf: tf.extractall() # Look at the README from the downloaded data from IPython.display import Markdown, display display(Markdown('qcqmc_data/README.md')) Wavefunctions and Hamiltonians from \"Unbiasing fermionic quantum Monte Carlo with a quantum computer\" This repository contains 4 directories which contain the wavefunctions and hamiltonians necessary to reproduce the results from the paper using ipie. Each system directory follows the layout: fqe_hams: The Hamiltonian matrix elements in hdf5 format. Note that both the active space hamiltonian (datasets: h1, h2, and e0) and the full space Hamiltonian (h1_full, LpqX_full and e0_full) are provided. LpqX_full is the Cholesky factor for the full space eris. (pq|rs) = np.einsum('pqX,rsX', LpqX, LrsX). fqe_wfns: The (experimentally reconstructed shadow) wavefunction in an FQE format. ipie_ham: The Hamiltonian in ipie format. ipie_wfns: The (experimentally reconstructed shadow) wavefunction in an ipie format. We also include a script variational_energy.py which can be used to read the FQE wavefunction and compute the variational energy of the shadow wavefunction: python variational_energy.py --ham_file diamond_dzvp/fqe_hams/chem_ham_0.800.h5 --wfn_file diamond_dzvp/fqe_wfns/wfn_0.800_50000 Variational energy (-9.121080838729604+2.7755575615628914e-17j) which can be compared to value of -9.121081 from the first row of Table S10 in the SI. Note that for N2 the FQE and ipie variational energies differ slightly due to cholesky thresholds in the latter. The AFQMC simulations can be run using ipie using the ipie code: https://github.com/JoonhoLee-Group/ipie, e.g. from ipie.qmc.afqmc import AFQMC afqmc = AFQMC.build_from_hdf5( (nalpha, nbeta), ham_file, wfn_file, num_walkers=num_walkers, num_blocks=num_blocks ) afqmc.run() where nalpha, and nbeta are the number of alpha and beta electrons, ham_file and wfn_file are paths to the ipie_ham/ and ipie_wfn files respectively, and num_walkers and num_blocks are the number of walkers and number of Monte Carlo blocks. Note the filenames typically follow a pattern of wfn_param_num_cliffords, where param may be the intermolecular distance and numcliffords is the N{Cliffords} in, for example, Table S7. In the case of diamond note that the distances in the filenames should be multiplied by 3.6 A to obtain the first column of S10. Loading the wavefunctions Here we will reproduce some of the results from Section E of the SI from QCQMC. The variational energy of the trial wavefunction as a function of the number of cliffords used for shadow tomography is reported in Table S1, which we have reproduced here: NCliffords repeat 1 repeat 2 repeat 3 repeat 4 10 -1.800644 -1.764747 -1.813274 -1.658202 16 -1.823041 -1.802192 -1.840494 -1.730591 28 -1.906644 -1.839835 -1.843326 -1.746749 47 -1.925654 -1.888527 -1.860863 -1.809656 80 -1.909567 -1.869456 -1.887139 -1.846339 136 -1.930880 -1.902309 -1.889992 -1.879164 229 -1.944249 -1.921523 -1.903710 -1.890947 387 -1.947362 -1.934682 -1.910477 -1.901883 652 -1.952416 -1.939853 -1.912790 -1.905250 1100 -1.955544 -1.944651 -1.915073 -1.909122 1856 -1.955028 -1.945966 -1.909558 -1.908038 3129 -1.953877 -1.947763 -1.913386 -1.908835 5276 -1.954697 -1.947323 -1.912284 -1.909315 8896 -1.954930 -1.947458 -1.913889 -1.913068 15000 -1.954356 -1.948894 -1.913894 -1.913082 Each column represents an independent partitioned shadow tomography experiment. We can reproduce this table from the data by using FQE to read the wavefunctions and Hamiltonian and recompute the variational energy of the shadow trial wavefunction. First we need to parse the wavefunction and Hamiltonian before computing the energy using FQE: import fqe import h5py import numpy as np def compute_energy(wfn_file: str, ham_file: str) -> float: \"\"\"Compute the variational energy of the experimentally reconstructed wavefunction. Args: wfn_file: The path to the FQE wavefunction. ham_file: The path to the hamiltonian. Returns: The variational energy \"\"\" fqe_wfn = fqe.wavefunction.Wavefunction() fqe_wfn.read(filename=wfn_file) with h5py.File(ham_file, 'r') as fh5: ecore = fh5[\"e0\"][()] h1e_act = fh5[\"h1\"][:] eri_act = fh5[\"h2\"][:] # get integrals into openfermion order of_eris = np.transpose(eri_act, (0, 2, 3, 1)) # ... and then into FQE format fqe_ham = fqe.hamiltonians.restricted_hamiltonian.RestrictedHamiltonian((h1e_act, np.einsum('ijlk', -0.5 * of_eris)), e_0=ecore) return fqe_wfn.expectationValue(fqe_ham) Now we can glob all of the wavefunctions from the zenodo repo and recompute the variational energy: import glob import pandas as pd for column in [1, 2, 3, 4]: wavefunctions = glob.glob(f'qcqmc_data/h4_sto3g/fqe_wfns/column{column}/wfn*') n_cliffords = [int(x.split('/')[-1].split('_')[-1]) for x in wavefunctions] energies = [compute_energy(wfn_file, f'qcqmc_data/h4_sto3g/fqe_hams/column{column}/chem_ham.h5').real for wfn_file in wavefunctions] if column == 1: df = pd.DataFrame({'n_clifford': n_cliffords, f'repeat {column}': energies}) else: new_df = pd.DataFrame({'n_clifford': n_cliffords, f'repeat {column}': energies}) df = pd.merge(df, new_df, on='n_clifford', how='outer') reproduced_table = df.sort_values(by='n_clifford') print(reproduced_table) n_clifford repeat 1 repeat 2 repeat 3 repeat 4 0 10 -1.800644 -1.764747 -1.813274 -1.658202 1 16 -1.823041 -1.802192 -1.840494 -1.730591 2 28 -1.906644 -1.839835 -1.843326 -1.746749 3 47 -1.925654 -1.888527 -1.860863 -1.809656 4 80 -1.909567 -1.869456 -1.887139 -1.846339 5 136 -1.930880 -1.902309 -1.889992 -1.879164 6 229 -1.944249 -1.921523 -1.903710 -1.890947 7 387 -1.947362 -1.934682 -1.910477 -1.901883 8 652 -1.952416 -1.939853 -1.912790 -1.905250 9 1100 -1.955544 -1.944651 -1.915073 -1.909122 10 1856 -1.955028 -1.945966 -1.909558 -1.908038 11 3129 -1.953877 -1.947763 -1.913386 -1.908835 12 5276 -1.954697 -1.947323 -1.912284 -1.909315 13 8896 -1.954930 -1.947458 -1.913889 -1.913068 14 15000 -1.954356 -1.948894 -1.913894 -1.913082 Given these inputs we can also re-run AFQMC using the shadow wavefunctions as a trial wavefuncktion. To do so, we first need to parse the wavefunction and hamiltonian which is provided in ipie format in the zenodo repo: from ipie.qmc.afqmc import AFQMC num_elec = (2, 2) # H4 molecule, 4 electrons, ms = 0 n_clifford = 15_000 ham_file = 'qcqmc_data/h4_sto3g/ipie_ham/column3/ham.h5' wfn_file = f'qcqmc_data/h4_sto3g/ipie_wfns/column3/wfn_{n_clifford}.h5' afqmc = AFQMC.build_from_hdf5(num_elec, ham_file, wfn_file, num_blocks=1_000, num_walkers=100) afqmc.trial.calculate_energy(afqmc.system, afqmc.hamiltonian) afqmc.run(estimator_filename=f'h4_sto3g_n_clifford_{n_clifford}.h5') # Have shared memory: False # Time to read integrals: 0.004462 # Time to pack Cholesky vectors: 0.335640 # Number of orbitals: 4 # Approximate memory required by Cholesky vectors 0.000002 GB # Approximate memory required by packed Cholesky vectors 0.000001 GB # Approximate memory required total 0.000003 GB # Number of Cholesky vectors: 16 # Number of fields: 16 # Finished setting up GenericRealChol object. # Using generalized Wick's theorem for the PHMSD trial # Number of determinants in trial: 36 # Setting the first determinant in expansion as the reference wfn for Wick's theorem. # Number of frozen orbitals: 0 # Number of occupied electrons in active space trial: (2, 2) # Number of orbitals in active space trial: 4 # Setting additional member variables for Wick's theorem # Reference alpha determinant: [0 2] # Reference beta determinant: [0 2] # Number of alpha determinants at each level: [5, 24, 6] # Number of beta determinants at each level: [5, 24, 6] # Computing 1-RDM of the trial wfn for mean-field shift. # Using first 36 determinants for evaluation. # Tr(G_T): (4.000000000000001-4.710946609976203e-18j) # Constructing half rotated Cholesky vectors. # Shape of alpha half-rotated Cholesky: (1, 16, 8) # Shape of beta half-rotated Cholesky: (1, 16, 8) # Half-Rotating Cholesky for determinant. # Constructing half rotated Cholesky vectors. # Shape of alpha half-rotated Cholesky: (1, 16, 16) # Shape of beta half-rotated Cholesky: (1, 16, 16) # Half-Rotating Cholesky for determinant. # random seed is 24558545 # Computing trial wavefunction energy. # Variational energy of trial wavefunction: -1.9138939545263898 # Using pair_branch population control algorithm. # target weight is 100 # total weight is 100 # ipie version: 0.7.1 # Calculation uuid: dedfcbe0-ec4d-11ef-b8b6-4735a95cd5b3. # Approximate memory available per node: 117.9093 GB. # Running on 1 MPI rank. # Root processor name: kokoro-gcp-ubuntu-prod-2033379579 # Python interpreter: 3.10.16 (main, Dec 4 2024, 08:53:37) [GCC 9.4.0] # Using numpy v1.26.4 from: /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/numpy. # - BLAS lib: openblas64 # - BLAS version: 0.3.23.dev # - BLAS include directory: /usr/local/lib # Using scipy v1.15.1 from: /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/scipy. # Using h5py v3.12.1 from: /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/h5py. # Package mpi4py not found. # Package cupy not found. # MPI communicator : <class 'ipie.qmc.comm.FakeComm'> # Available memory on the node is 117.909 GB # Setting up estimator object. # Writing estimator data to h4_sto3g_n_clifford_15000.h5 # Finished settting up estimator object. Block Weight WeightFactor HybridEnergy ENumer EDenom ETotal E1Body E2Body 0 1.0000000000000000e+02 1.0000000000000000e+02 0.0000000000000000e+00 -1.9330645767050612e+02 1.0000000000000000e+02 -1.9330645767050612e+00 -4.3439318841445109e+00 2.4108673074394495e+00 1 1.0044268158663674e+02 1.0095160219056899e+02 -4.7913997284140553e-01 -1.9345180745874691e+02 1.0000000000000000e+02 -1.9345180745874693e+00 -4.3375066748997293e+00 2.4029886003122596e+00 2 9.9997826430751772e+01 1.0016693927835745e+02 -4.8150587512847481e-01 -1.9402870462250988e+02 9.9999999999999986e+01 -1.9402870462250992e+00 -4.3303127581603746e+00 2.3900257119352757e+00 3 9.9986949507611257e+01 9.9965661796810451e+01 -4.8334912467333013e-01 -1.9421002452164936e+02 9.9999999999999986e+01 -1.9421002452164939e+00 -4.3253811418628514e+00 2.3832808966463568e+00 4 9.9990295713752133e+01 9.9983893362837009e+01 -4.8560022359836980e-01 -1.9429441151196750e+02 9.9999999999999986e+01 -1.9429441151196754e+00 -4.3232152477942902e+00 2.3802711326746135e+00 5 9.9992136301004038e+01 9.9966722484904921e+01 -4.8693153714082593e-01 -1.9437621914541387e+02 1.0000000000000000e+02 -1.9437621914541388e+00 -4.3178048771375197e+00 2.3740426856833809e+00 6 9.9992224612502866e+01 9.9987885652089432e+01 -4.9458781343737046e-01 -1.9435378877751910e+02 9.9999999999999986e+01 -1.9435378877751914e+00 -4.3168349223605738e+00 2.3732970345853812e+00 7 9.9989976624746646e+01 9.9968862250914754e+01 -5.0063450648170982e-01 -1.9475534345029442e+02 1.0000000000000001e+02 -1.9475534345029439e+00 -4.3142279302325033e+00 2.3666744957295593e+00 8 9.9986342948162473e+01 9.9989510017887312e+01 -4.9488170576248020e-01 -1.9441487882390251e+02 9.9999999999999986e+01 -1.9441487882390256e+00 -4.3081405907489971e+00 2.3639918025099727e+00 9 9.9985331504040900e+01 9.9954480004440995e+01 -4.9848762683952214e-01 -1.9465082530596888e+02 1.0000000000000000e+02 -1.9465082530596889e+00 -4.3065515892620452e+00 2.3600433362023576e+00 10 9.9995657758172769e+01 9.9972679122957729e+01 -5.0128822906920889e-01 -1.9466075733517383e+02 9.9999999999999986e+01 -1.9466075733517387e+00 -4.3055760628170248e+00 2.3589684894652847e+00 11 9.9986602974445859e+01 9.9980419596260134e+01 -5.0298955243612298e-01 -1.9534543616885233e+02 1.0000000000000000e+02 -1.9534543616885234e+00 -4.3016107105923833e+00 2.3481563489038599e+00 12 9.9991826010776165e+01 9.9971126270683072e+01 -5.0887140516194951e-01 -1.9591897089756284e+02 1.0000000000000001e+02 -1.9591897089756281e+00 -4.3036939196276940e+00 2.3445042106520670e+00 13 9.9985373617082189e+01 9.9969007772082335e+01 -5.0650354921523366e-01 -1.9572007867752197e+02 1.0000000000000000e+02 -1.9572007867752197e+00 -4.3019138584342294e+00 2.3447130716590094e+00 14 9.9977054766259087e+01 9.9947399813339459e+01 -4.9756463672702611e-01 -1.9514225435344227e+02 1.0000000000000000e+02 -1.9514225435344228e+00 -4.3045880056274619e+00 2.3531654620930387e+00 15 9.9978772741865029e+01 9.9947378528782195e+01 -4.8838344988894250e-01 -1.9538316356473604e+02 1.0000000000000000e+02 -1.9538316356473604e+00 -4.2972699211885077e+00 2.3434382855411466e+00 16 1.0000951469850665e+02 9.9998137327903535e+01 -5.1001334402764675e-01 -1.9582827812829839e+02 9.9999999999999986e+01 -1.9582827812829844e+00 -4.2950168063100422e+00 2.3367340250270581e+00 17 9.9985913127697529e+01 9.9980093322402126e+01 -5.0946121049775428e-01 -1.9596022313730711e+02 1.0000000000000000e+02 -1.9596022313730712e+00 -4.3024415511218566e+00 2.3428393197487849e+00 18 9.9985598260774893e+01 9.9953547076322138e+01 -5.0559938380219804e-01 -1.9561804520084596e+02 1.0000000000000000e+02 -1.9561804520084596e+00 -4.3048945014960722e+00 2.3487140494876129e+00 19 9.9987178349308593e+01 9.9956805318035279e+01 -5.0455515153127395e-01 -1.9562135655346560e+02 9.9999999999999986e+01 -1.9562135655346564e+00 -4.3061590381971113e+00 2.3499454726624549e+00 20 9.9996730423775375e+01 9.9993407050995302e+01 -5.1361199138109270e-01 -1.9554435239778965e+02 9.9999999999999986e+01 -1.9554435239778969e+00 -4.3133132143054809e+00 2.3578696903275844e+00 21 9.9981530640741482e+01 9.9965385728975576e+01 -5.1275736295578722e-01 -1.9554770139908962e+02 9.9999999999999986e+01 -1.9554770139908966e+00 -4.3131841647095932e+00 2.3577071507186975e+00 22 9.9972515489036113e+01 9.9932301688659024e+01 -4.9486652349017735e-01 -1.9541581327889128e+02 1.0000000000000000e+02 -1.9541581327889128e+00 -4.3120754667322476e+00 2.3579173339433348e+00 23 9.9993778263876521e+01 9.9985010567268603e+01 -5.0813607196941690e-01 -1.9579901551328652e+02 9.9999999999999986e+01 -1.9579901551328656e+00 -4.3063373705693708e+00 2.3483472154365050e+00 24 9.9986629970384968e+01 9.9972550733102480e+01 -5.0907841008754773e-01 -1.9584971410709153e+02 1.0000000000000000e+02 -1.9584971410709153e+00 -4.3011428015511735e+00 2.3426456604802586e+00 25 9.9981055381981903e+01 9.9956809502168653e+01 -5.0414748242229690e-01 -1.9674449725206193e+02 1.0000000000000001e+02 -1.9674449725206191e+00 -4.2964527104017325e+00 2.3290077378811125e+00 26 9.9994060328834891e+01 9.9990213387806961e+01 -5.1954897525637966e-01 -1.9690924437338481e+02 1.0000000000000000e+02 -1.9690924437338482e+00 -4.2983601654628787e+00 2.3292677217290301e+00 27 9.9976642906400613e+01 9.9964520855501689e+01 -5.1141644732658342e-01 -1.9704863938445874e+02 9.9999999999999986e+01 -1.9704863938445878e+00 -4.2975923391136011e+00 2.3271059452690137e+00 28 9.9994836710514178e+01 9.9979832548969355e+01 -5.2865845464728300e-01 -1.9692258306861331e+02 1.0000000000000000e+02 -1.9692258306861332e+00 -4.3002149771676548e+00 2.3309891464815227e+00 29 9.9979033561458309e+01 9.9950830272848251e+01 -5.1634066448462335e-01 -1.9677143824052519e+02 1.0000000000000001e+02 -1.9677143824052516e+00 -4.3007192128358103e+00 2.3330048304305588e+00 30 9.9976674723518812e+01 9.9947149449663740e+01 -5.0573711656721310e-01 -1.9640488889069442e+02 9.9999999999999986e+01 -1.9640488889069445e+00 -4.2985347621718413e+00 2.3344858732648968e+00 31 9.9976000368959475e+01 9.9949318485755157e+01 -5.0253383067386015e-01 -1.9548022428139132e+02 1.0000000000000003e+02 -1.9548022428139125e+00 -4.2981212698406219e+00 2.3433190270267108e+00 32 9.9992439855517631e+01 9.9966871354552296e+01 -5.0521951044050772e-01 -1.9588765685210430e+02 1.0000000000000000e+02 -1.9588765685210430e+00 -4.2956645406968095e+00 2.3367879721757654e+00 33 9.9987808243720409e+01 9.9973938981590024e+01 -5.0796541801469763e-01 -1.9538558118983602e+02 9.9999999999999972e+01 -1.9538558118983609e+00 -4.2968733029290860e+00 2.3430174910307251e+00 34 9.9984321103584847e+01 9.9967142075484631e+01 -5.0618539185649325e-01 -1.9532450449568552e+02 9.9999999999999986e+01 -1.9532450449568555e+00 -4.2958579878330880e+00 2.3426129428762326e+00 35 9.9984349566950499e+01 9.9939781007323546e+01 -5.0010532077318559e-01 -1.9516894475363804e+02 1.0000000000000001e+02 -1.9516894475363802e+00 -4.2981797512401654e+00 2.3464903037037845e+00 36 9.9980853147600243e+01 9.9966950241022829e+01 -4.9428155571845411e-01 -1.9621722295897473e+02 9.9999999999999986e+01 -1.9621722295897477e+00 -4.2959357181074527e+00 2.3337634885177048e+00 37 9.9993134532413592e+01 9.9961269054608337e+01 -5.0385044363901810e-01 -1.9672957344168469e+02 1.0000000000000001e+02 -1.9672957344168467e+00 -4.2997697207650285e+00 2.3324739863481825e+00 38 1.0000215881916483e+02 1.0001244034471274e+02 -5.2176988238870614e-01 -1.9710955075660209e+02 1.0000000000000000e+02 -1.9710955075660210e+00 -4.3009762725171523e+00 2.3298807649511311e+00 39 9.9990579851935877e+01 9.9966500039447624e+01 -5.2569880211435915e-01 -1.9780354098166819e+02 9.9999999999999972e+01 -1.9780354098166826e+00 -4.2981206447631042e+00 2.3200852349464220e+00 40 9.9985561607165934e+01 9.9968097665759984e+01 -5.2589957898267770e-01 -1.9824695008787302e+02 1.0000000000000001e+02 -1.9824695008787299e+00 -4.2991630145005608e+00 2.3166935136218321e+00 41 9.9994996692146131e+01 1.0000092608067241e+02 -5.4987244727067164e-01 -1.9857497775743803e+02 1.0000000000000000e+02 -1.9857497775743804e+00 -4.2922058808886963e+00 2.3064561033143161e+00 42 9.9975804269029140e+01 9.9937140135996032e+01 -5.3618118217751376e-01 -1.9874723154470067e+02 1.0000000000000001e+02 -1.9874723154470064e+00 -4.2941119904462184e+00 2.3066396749992117e+00 43 9.9981530857304136e+01 9.9935622782012487e+01 -5.3348977369749317e-01 -1.9790273365372437e+02 9.9999999999999986e+01 -1.9790273365372442e+00 -4.2944401774160310e+00 2.3154128408787864e+00 44 9.9966238615173779e+01 9.9923851366934343e+01 -5.1635210766416617e-01 -1.9729872208575389e+02 1.0000000000000000e+02 -1.9729872208575390e+00 -4.2972111671896842e+00 2.3242239463321459e+00 45 9.9995273167430838e+01 9.9979261542935930e+01 -5.2648541866415866e-01 -1.9774927316007509e+02 1.0000000000000000e+02 -1.9774927316007509e+00 -4.2952861758111158e+00 2.3177934442103649e+00 46 9.9993001369917209e+01 9.9964689034242269e+01 -5.3092235718750291e-01 -1.9820594206966643e+02 9.9999999999999986e+01 -1.9820594206966646e+00 -4.2994052013891348e+00 2.3173457806924689e+00 47 9.9975013226058692e+01 9.9952552950348078e+01 -5.2263485673000887e-01 -1.9800637253535461e+02 9.9999999999999986e+01 -1.9800637253535465e+00 -4.2865599018563811e+00 2.3064961765028347e+00 48 9.9971424073992011e+01 9.9936514909671601e+01 -5.2231193732833181e-01 -1.9729487407006084e+02 1.0000000000000000e+02 -1.9729487407006085e+00 -4.2963929570080817e+00 2.3234442163074722e+00 49 9.9982139067219833e+01 9.9955037739946036e+01 -5.2537694215138786e-01 -1.9728365762081464e+02 1.0000000000000000e+02 -1.9728365762081463e+00 -4.3031596042729658e+00 2.3303230280648197e+00 50 9.9971497705995375e+01 9.9927951355915383e+01 -5.1135779313835894e-01 -1.9734951343400098e+02 1.0000000000000003e+02 -1.9734951343400091e+00 -4.3030114327086517e+00 2.3295162983686426e+00 51 9.9997951039746425e+01 9.9979902959535238e+01 -5.3038818931367726e-01 -1.9707396041221170e+02 1.0000000000000001e+02 -1.9707396041221168e+00 -4.3007498090165424e+00 2.3300102048944260e+00 52 9.9966179990809749e+01 9.9933068314324970e+01 -5.1976013686673816e-01 -1.9765591181196615e+02 1.0000000000000000e+02 -1.9765591181196616e+00 -4.3025263911605371e+00 2.3259672730408747e+00 53 9.9991618204673344e+01 9.9973485682913122e+01 -5.3203207359122795e-01 -1.9756380055728906e+02 9.9999999999999986e+01 -1.9756380055728910e+00 -4.3015907409114886e+00 2.3259527353385976e+00 54 9.9982072598318041e+01 9.9956042266898308e+01 -5.2337899067469484e-01 -1.9750508301873458e+02 9.9999999999999986e+01 -1.9750508301873462e+00 -4.3014539521728317e+00 2.3264031219854844e+00 55 9.9979098423006420e+01 9.9960665567161101e+01 -5.2309789732146084e-01 -1.9759157288621947e+02 9.9999999999999986e+01 -1.9759157288621951e+00 -4.3031916883712773e+00 2.3272759595090813e+00 56 9.9978967531984040e+01 9.9959365618113424e+01 -5.2644819030586609e-01 -1.9789846471577138e+02 1.0000000000000003e+02 -1.9789846471577133e+00 -4.3019953068030317e+00 2.3230106596453188e+00 57 9.9981459765104489e+01 9.9964452720821569e+01 -5.2757512874461832e-01 -1.9848313672012975e+02 1.0000000000000001e+02 -1.9848313672012972e+00 -4.2963722929568373e+00 2.3115409257555410e+00 58 9.9982879030891041e+01 9.9971507229588383e+01 -5.3544318471814589e-01 -1.9807203376189909e+02 1.0000000000000000e+02 -1.9807203376189910e+00 -4.2998339519216353e+00 2.3191136143026450e+00 59 9.9969557479607218e+01 9.9939650655874900e+01 -5.3472719756063825e-01 -1.9868881935127860e+02 9.9999999999999986e+01 -1.9868881935127864e+00 -4.2971537786383909e+00 2.3102655851256046e+00 60 9.9976292145990897e+01 9.9927960158299129e+01 -5.3025014472968490e-01 -1.9834984375266811e+02 9.9999999999999986e+01 -1.9834984375266815e+00 -4.3005675865206898e+00 2.3170691489940083e+00 61 9.9965640309578802e+01 9.9924576931921351e+01 -5.2426187537805724e-01 -1.9861712000839205e+02 1.0000000000000000e+02 -1.9861712000839205e+00 -4.2961137098612392e+00 2.3099425097773190e+00 62 9.9931881259186582e+01 9.9851802079103351e+01 -5.1177031633485337e-01 -1.9997542522997290e+02 1.0000000000000001e+02 -1.9997542522997287e+00 -4.2895121139514032e+00 2.2897578616516747e+00 63 9.9981218074631030e+01 9.9953982150126464e+01 -5.4024080169902899e-01 -1.9878042617405936e+02 1.0000000000000000e+02 -1.9878042617405935e+00 -4.2918802649980146e+00 2.3040760032574208e+00 64 9.9964900007128733e+01 9.9919436457248665e+01 -5.3257920748900944e-01 -1.9835273622861936e+02 1.0000000000000000e+02 -1.9835273622861938e+00 -4.2988199611604561e+00 2.3152925988742634e+00 65 9.9980257194163883e+01 9.9928140350307203e+01 -5.2746069895362124e-01 -1.9838150968914334e+02 1.0000000000000001e+02 -1.9838150968914332e+00 -4.2963030735183683e+00 2.3124879766269339e+00 66 9.9992295426853133e+01 9.9972449724771792e+01 -5.5535909768629999e-01 -1.9835116326265867e+02 1.0000000000000001e+02 -1.9835116326265865e+00 -4.2969312315550798e+00 2.3134195989284936e+00 67 9.9947909415497108e+01 9.9882235181918702e+01 -5.2335805836886473e-01 -1.9865283449528550e+02 1.0000000000000001e+02 -1.9865283449528548e+00 -4.2984163816661622e+00 2.3118880367133081e+00 68 1.0000733316183147e+02 9.9973995057125833e+01 -5.5231302815854777e-01 -1.9919884678567723e+02 1.0000000000000000e+02 -1.9919884678567723e+00 -4.2912291848775350e+00 2.2992407170207634e+00 69 9.9960008712974584e+01 9.9914195324370965e+01 -5.3503856233724056e-01 -1.9747498865075065e+02 1.0000000000000000e+02 -1.9747498865075066e+00 -4.3030610707684422e+00 2.3283111842609352e+00 70 9.9968398143402595e+01 9.9922303209194368e+01 -5.2326918596322813e-01 -1.9693314636797908e+02 1.0000000000000001e+02 -1.9693314636797905e+00 -4.3082626793451615e+00 2.3389312156653710e+00 71 9.9979997489960553e+01 9.9951129014127488e+01 -5.1928458838392688e-01 -1.9673894546810183e+02 1.0000000000000000e+02 -1.9673894546810184e+00 -4.3059657910179645e+00 2.3385763363369465e+00 72 9.9986463061458025e+01 9.9944612272080647e+01 -5.1964661273633306e-01 -1.9657078061239844e+02 9.9999999999999986e+01 -1.9657078061239848e+00 -4.3076599365003903e+00 2.3419521303764057e+00 73 9.9987850028630405e+01 9.9967041259727026e+01 -5.1913031094324424e-01 -1.9713033779839631e+02 1.0000000000000001e+02 -1.9713033779839628e+00 -4.3075825923882327e+00 2.3362792144042683e+00 74 9.9958513349074565e+01 9.9898362537098478e+01 -4.9562953709180158e-01 -1.9688752043013616e+02 1.0000000000000000e+02 -1.9688752043013618e+00 -4.3002709971753301e+00 2.3313957928739688e+00 75 1.0001202332590795e+02 1.0001987891264386e+02 -5.2061396235145307e-01 -1.9627318776447146e+02 1.0000000000000001e+02 -1.9627318776447142e+00 -4.3061692021921552e+00 2.3434373245474407e+00 76 9.9965827825598538e+01 9.9918276601978633e+01 -4.9984614900403224e-01 -1.9603845465897936e+02 9.9999999999999986e+01 -1.9603845465897940e+00 -4.3042754949003035e+00 2.3438909483105084e+00 77 1.0000242105443562e+02 9.9984314094501229e+01 -5.1467922290823342e-01 -1.9594387728131721e+02 9.9999999999999972e+01 -1.9594387728131728e+00 -4.3045600834367557e+00 2.3451213106235826e+00 78 9.9980757265191912e+01 9.9943688221526429e+01 -5.0764355456113630e-01 -1.9629411091339574e+02 1.0000000000000001e+02 -1.9629411091339570e+00 -4.3058519791988514e+00 2.3429108700648951e+00 79 9.9980975077779036e+01 9.9961201083957917e+01 -5.0875439370431552e-01 -1.9678525565447362e+02 9.9999999999999972e+01 -1.9678525565447369e+00 -4.3090618056610115e+00 2.3412092491162748e+00 80 1.0000999410795390e+02 1.0001060695195407e+02 -5.2978433937170355e-01 -1.9625669156093545e+02 1.0000000000000000e+02 -1.9625669156093546e+00 -4.3030311123449687e+00 2.3404641967356135e+00 81 9.9970528761446516e+01 9.9942741457095678e+01 -5.1953294478600887e-01 -1.9643892606012994e+02 9.9999999999999986e+01 -1.9643892606012998e+00 -4.3057805537926903e+00 2.3413912931913905e+00 82 9.9983475594826018e+01 9.9949213444326958e+01 -5.1797287840090334e-01 -1.9645607305211604e+02 9.9999999999999986e+01 -1.9645607305211608e+00 -4.3025021675258666e+00 2.3379414370047047e+00 83 9.9982212100530859e+01 9.9936176885322382e+01 -5.1147435684367348e-01 -1.9635446675567877e+02 1.0000000000000000e+02 -1.9635446675567878e+00 -4.3076026832421803e+00 2.3440580156853934e+00 84 9.9982330933863125e+01 9.9954602986453509e+01 -5.1190282650512520e-01 -1.9671160428645561e+02 9.9999999999999986e+01 -1.9671160428645564e+00 -4.3003552512349277e+00 2.3332392083703715e+00 85 9.9994438889663058e+01 9.9986506183667032e+01 -5.2245040577000990e-01 -1.9739718747844520e+02 1.0000000000000000e+02 -1.9739718747844521e+00 -4.2904523194033963e+00 2.3164804446189442e+00 86 9.9980986975803859e+01 9.9947308259444199e+01 -5.1526360247090630e-01 -1.9662566465850398e+02 1.0000000000000000e+02 -1.9662566465850397e+00 -4.3007928916169185e+00 2.3345362450318792e+00 87 9.9977566068327477e+01 9.9944931995830032e+01 -5.1238615041626623e-01 -1.9633210096922599e+02 1.0000000000000000e+02 -1.9633210096922600e+00 -4.3006321457404377e+00 2.3373111360481782e+00 88 9.9982039319805679e+01 9.9952287042026242e+01 -5.0951231659517560e-01 -1.9632114842308624e+02 1.0000000000000001e+02 -1.9632114842308621e+00 -4.2967426130004602e+00 2.3335311287695983e+00 89 9.9985911915761577e+01 9.9970941255970800e+01 -5.1952934177602994e-01 -1.9749508199729439e+02 1.0000000000000001e+02 -1.9749508199729435e+00 -4.2932138048944015e+00 2.3182629849214584e+00 90 9.9975928691732051e+01 9.9930924534094046e+01 -5.1293735104617644e-01 -1.9717254772590456e+02 1.0000000000000001e+02 -1.9717254772590453e+00 -4.2855272048443460e+00 2.3138017275853002e+00 91 9.9971175543003710e+01 9.9944511730568976e+01 -5.1408624406487236e-01 -1.9633678081995853e+02 1.0000000000000000e+02 -1.9633678081995853e+00 -4.2924426006505714e+00 2.3290747924509851e+00 92 9.9969345514508333e+01 9.9916713428856696e+01 -5.0595974935834098e-01 -1.9621053935648899e+02 9.9999999999999986e+01 -1.9621053935648902e+00 -4.2968954839731497e+00 2.3347900904082590e+00 93 9.9973243377826478e+01 9.9946557065697249e+01 -5.0781585587350397e-01 -1.9674639622979345e+02 1.0000000000000000e+02 -1.9674639622979344e+00 -4.3004253274297346e+00 2.3329613651318009e+00 94 9.9982534217451800e+01 9.9941462645220966e+01 -5.1160015617905641e-01 -1.9609989792401097e+02 9.9999999999999986e+01 -1.9609989792401101e+00 -4.3025223943095874e+00 2.3415234150694775e+00 95 9.9979249457059652e+01 9.9980734959981916e+01 -5.2072996351015510e-01 -1.9540030998921139e+02 1.0000000000000001e+02 -1.9540030998921136e+00 -4.3041012340072378e+00 2.3500981341151244e+00 96 9.9949491890993414e+01 9.9875533060685470e+01 -4.9330572901514347e-01 -1.9590643194688255e+02 1.0000000000000000e+02 -1.9590643194688255e+00 -4.3057155523059896e+00 2.3466512328371638e+00 97 9.9983563138517553e+01 9.9951741969293778e+01 -5.0157905696948846e-01 -1.9600984405018497e+02 1.0000000000000003e+02 -1.9600984405018491e+00 -4.3024311453652944e+00 2.3423327048634452e+00 98 9.9993643471476787e+01 9.9992362319655484e+01 -5.1336037322267425e-01 -1.9667062108626436e+02 1.0000000000000003e+02 -1.9667062108626430e+00 -4.3063635979275974e+00 2.3396573870649551e+00 99 9.9972213277213967e+01 9.9933219373255184e+01 -5.0947387667727850e-01 -1.9696556940218161e+02 9.9999999999999986e+01 -1.9696556940218166e+00 -4.2929208733670770e+00 2.3232651793452601e+00 100 9.9988058666867119e+01 9.9972227590632087e+01 -5.1979387586729042e-01 -1.9689171481264813e+02 1.0000000000000003e+02 -1.9689171481264807e+00 -4.2902176154193352e+00 2.3213004672928537e+00 101 9.9979865341815554e+01 9.9930318234567793e+01 -5.2403016210196263e-01 -1.9700380560717460e+02 1.0000000000000001e+02 -1.9700380560717456e+00 -4.2840941861418944e+00 2.3140561300701483e+00 102 9.9935514959011357e+01 9.9875234381112094e+01 -5.1627469789767377e-01 -1.9777090072043362e+02 1.0000000000000001e+02 -1.9777090072043360e+00 -4.2862719728108676e+00 2.3085629656065332e+00 103 9.9978326484997012e+01 9.9945277550375692e+01 -5.2637694797683887e-01 -1.9746662433744604e+02 1.0000000000000000e+02 -1.9746662433744604e+00 -4.2894269985071523e+00 2.3147607551326916e+00 104 9.9968733732279674e+01 9.9921210870107373e+01 -5.2771451598998576e-01 -1.9723459278442917e+02 9.9999999999999986e+01 -1.9723459278442921e+00 -4.2910965799023684e+00 2.3187506520580752e+00 105 9.9962962124990156e+01 9.9944292316659300e+01 -5.5343809237010122e-01 -1.9694803750661623e+02 9.9999999999999986e+01 -1.9694803750661627e+00 -4.2859286483682739e+00 2.3164482733021106e+00 106 9.9918925076377491e+01 9.9819888375748874e+01 -5.0009092166351932e-01 -1.9711451417907412e+02 1.0000000000000001e+02 -1.9711451417907409e+00 -4.2962503395482932e+00 2.3251051977575519e+00 107 9.9998682589783058e+01 9.9970168622331883e+01 -5.2654076782463732e-01 -1.9735691866667673e+02 1.0000000000000001e+02 -1.9735691866667671e+00 -4.2966603558063960e+00 2.3230911691396297e+00 108 9.9965712910758143e+01 9.9941500725311244e+01 -5.1919112378048260e-01 -1.9660481504356270e+02 1.0000000000000003e+02 -1.9660481504356264e+00 -4.3035507449097246e+00 2.3375025944740977e+00 109 9.9971629251141863e+01 9.9925823051003661e+01 -5.1234573772758929e-01 -1.9648735527938348e+02 1.0000000000000001e+02 -1.9648735527938346e+00 -4.3059324685932499e+00 2.3410589157994153e+00 110 9.9978233173894466e+01 9.9929820622775267e+01 -5.1702986264494744e-01 -1.9730458590191975e+02 9.9999999999999986e+01 -1.9730458590191979e+00 -4.3098197806726564e+00 2.3367739216534584e+00 111 9.9963699001479426e+01 9.9945707797937047e+01 -5.1533106899623360e-01 -1.9686865264175486e+02 1.0000000000000000e+02 -1.9686865264175486e+00 -4.3031638666486902e+00 2.3344773402311425e+00 112 9.9970695144258897e+01 9.9931657161965418e+01 -5.1795824790776690e-01 -1.9729701585248034e+02 1.0000000000000000e+02 -1.9729701585248034e+00 -4.3027923783566289e+00 2.3298222198318248e+00 113 9.9971966394466207e+01 9.9939218365038414e+01 -5.1962118264624424e-01 -1.9780533617602273e+02 1.0000000000000001e+02 -1.9780533617602269e+00 -4.3002462722824824e+00 2.3221929105222552e+00 114 9.9973668142183868e+01 9.9932333076570629e+01 -5.2586024869666159e-01 -1.9871408264632325e+02 1.0000000000000000e+02 -1.9871408264632324e+00 -4.2998261149104415e+00 2.3126852884472080e+00 115 9.9979289669242860e+01 9.9948164907317604e+01 -5.3994865384472346e-01 -1.9872020946754299e+02 9.9999999999999986e+01 -1.9872020946754303e+00 -4.2929052066742655e+00 2.3057031119988358e+00 116 9.9967446289645792e+01 9.9916371104201190e+01 -5.3921860600683935e-01 -1.9906116479810765e+02 1.0000000000000000e+02 -1.9906116479810765e+00 -4.2969345006378461e+00 2.3063228526567698e+00 117 9.9965334554438400e+01 9.9936045906180553e+01 -5.2837234899415508e-01 -1.9817164994678848e+02 1.0000000000000003e+02 -1.9817164994678842e+00 -4.2932666146543710e+00 2.3115501151864875e+00 118 9.9962235058180411e+01 9.9888052786534004e+01 -5.1969866861250646e-01 -1.9862224133201821e+02 1.0000000000000001e+02 -1.9862224133201818e+00 -4.2918762195151974e+00 2.3056538061950156e+00 119 9.9991961680075363e+01 9.9958858327736706e+01 -5.4390994362370926e-01 -1.9841497834397944e+02 9.9999999999999986e+01 -1.9841497834397948e+00 -4.2968434863470897e+00 2.3126937029072954e+00 120 9.9949483683562789e+01 9.9884770789803483e+01 -5.2566818553457162e-01 -1.9868015497874546e+02 1.0000000000000001e+02 -1.9868015497874543e+00 -4.3021669173111361e+00 2.3153653675236816e+00 121 9.9966166144658061e+01 9.9894484061419135e+01 -5.2986084242761522e-01 -1.9840029897665821e+02 1.0000000000000000e+02 -1.9840029897665821e+00 -4.3058597801376735e+00 2.3218567903710916e+00 122 9.9964970123865825e+01 9.9910988392158018e+01 -5.2506697800834023e-01 -1.9767232933243901e+02 9.9999999999999986e+01 -1.9767232933243903e+00 -4.3039182955525632e+00 2.3271950022281715e+00 123 9.9969564043921309e+01 9.9932434960196701e+01 -5.3380811036747555e-01 -1.9816662799621179e+02 9.9999999999999986e+01 -1.9816662799621183e+00 -4.3016107599090763e+00 2.3199444799469577e+00 124 9.9957609494024155e+01 9.9896219398432947e+01 -5.2875325204209311e-01 -1.9871622767799875e+02 1.0000000000000001e+02 -1.9871622767799872e+00 -4.2971313954141381e+00 2.3099691186341511e+00 125 9.9934193222889760e+01 9.9868869678755416e+01 -5.2185083285804179e-01 -1.9847960280410638e+02 9.9999999999999972e+01 -1.9847960280410646e+00 -4.2940575746128458e+00 2.3092615465717814e+00 126 9.9967979720076244e+01 9.9916055869485561e+01 -5.2523617435106185e-01 -1.9978864963302061e+02 1.0000000000000000e+02 -1.9978864963302061e+00 -4.2984792027735237e+00 2.3005927064433176e+00 127 9.9924521314608171e+01 9.9824486332955871e+01 -5.2783855179863826e-01 -1.9908690609486078e+02 9.9999999999999986e+01 -1.9908690609486082e+00 -4.2953913421895384e+00 2.3045222812409301e+00 128 9.9970967545830334e+01 9.9938555175350103e+01 -5.4545754386933731e-01 -1.9957533599477458e+02 9.9999999999999986e+01 -1.9957533599477462e+00 -4.2824209455338957e+00 2.2866675855861494e+00 129 9.9960107261605899e+01 9.9891761813652849e+01 -5.3951705561490493e-01 -1.9906319568450527e+02 1.0000000000000000e+02 -1.9906319568450528e+00 -4.2818386106613398e+00 2.2912066538162863e+00 130 9.9938886192117977e+01 9.9860038765051286e+01 -5.2494192122213668e-01 -1.9859289947663098e+02 1.0000000000000000e+02 -1.9859289947663099e+00 -4.2881374796788734e+00 2.3022084849125641e+00 131 9.9966164173311526e+01 9.9898767204887463e+01 -5.3096932164786670e-01 -1.9832802035045052e+02 1.0000000000000000e+02 -1.9832802035045052e+00 -4.2762959039581911e+00 2.2930157004536849e+00 132 9.9964022812456065e+01 9.9910230638690024e+01 -5.3623799947960382e-01 -1.9849918034393801e+02 9.9999999999999986e+01 -1.9849918034393805e+00 -4.2816918684287026e+00 2.2967000649893232e+00 133 9.9942884914671779e+01 9.9908146282378297e+01 -5.3321762336270395e-01 -1.9751159619500655e+02 1.0000000000000001e+02 -1.9751159619500651e+00 -4.2904233505884619e+00 2.3153073886383968e+00 134 9.9961959237092543e+01 1.0043110618354507e+02 -5.4085553864383995e-01 -1.9841044440221029e+02 9.9999999999999986e+01 -1.9841044440221032e+00 -4.2999557295240676e+00 2.3158512855019637e+00 135 9.9944613120872191e+01 9.9892788942842074e+01 -5.3858026066577169e-01 -1.9883348068078649e+02 9.9999999999999972e+01 -1.9883348068078657e+00 -4.2935353720008944e+00 2.3052005651930281e+00 136 9.9946946585236333e+01 9.9871747713770603e+01 -5.2745158250940372e-01 -1.9807648531389844e+02 1.0000000000000003e+02 -1.9807648531389839e+00 -4.3044612142435072e+00 2.3236963611045240e+00 137 9.9975717528679013e+01 9.9932859329329773e+01 -5.3359442478711405e-01 -1.9733585995576900e+02 1.0000000000000000e+02 -1.9733585995576901e+00 -4.3047775834271258e+00 2.3314189838694364e+00 138 9.9944650439621114e+01 9.9873326862086060e+01 -5.1816620101892907e-01 -1.9710206406549719e+02 1.0000000000000001e+02 -1.9710206406549715e+00 -4.3033276783306125e+00 2.3323070376756405e+00 139 9.9964067664025990e+01 9.9919746614951762e+01 -5.2352104220191442e-01 -1.9820209650525806e+02 9.9999999999999986e+01 -1.9820209650525809e+00 -4.3071075629892697e+00 2.3250865979366884e+00 140 9.9967922827828957e+01 9.9939877739192269e+01 -5.2545733898190028e-01 -1.9754580999587873e+02 1.0000000000000000e+02 -1.9754580999587874e+00 -4.3070875189854618e+00 2.3316294190266742e+00 141 9.9957808759727158e+01 9.9870418648585272e+01 -5.0475498772687888e-01 -1.9682029380775714e+02 1.0000000000000001e+02 -1.9682029380775712e+00 -4.3079943763567838e+00 2.3397914382792138e+00 142 1.0000848873305732e+02 9.9979093977514381e+01 -5.3901582162345429e-01 -1.9812214705347427e+02 1.0000000000000003e+02 -1.9812214705347420e+00 -4.3076007746075318e+00 2.3263793040727898e+00 143 9.9947468813574247e+01 9.9902978986678150e+01 -5.4182180369245236e-01 -1.9862745039176752e+02 9.9999999999999986e+01 -1.9862745039176757e+00 -4.3046778218293733e+00 2.3184033179116970e+00 144 9.9948107868516999e+01 9.9860061768228590e+01 -5.3416075196611612e-01 -1.9812022587939745e+02 1.0000000000000000e+02 -1.9812022587939746e+00 -4.3146530889260699e+00 2.3334508301320960e+00 145 9.9943648505694597e+01 9.9877940765861794e+01 -5.2813150282603294e-01 -1.9888054236244642e+02 1.0000000000000000e+02 -1.9888054236244643e+00 -4.3088567814737599e+00 2.3200513578492954e+00 146 9.9944091574093690e+01 9.9877045575060691e+01 -5.3138214069777046e-01 -1.9866639297268142e+02 1.0000000000000000e+02 -1.9866639297268143e+00 -4.2977364074161590e+00 2.3110724776893439e+00 147 9.9939817416140357e+01 9.9852033999460602e+01 -5.4174829966037241e-01 -1.9827909203940391e+02 1.0000000000000000e+02 -1.9827909203940390e+00 -4.2911321375552811e+00 2.3083412171612419e+00 148 9.9943212794419139e+01 9.9874631163113932e+01 -5.4467286806537241e-01 -1.9998899055311421e+02 9.9999999999999986e+01 -1.9998899055311425e+00 -4.2799080527733642e+00 2.2800181472422212e+00 149 9.9937537220747686e+01 9.9848091273567206e+01 -5.5779556742501690e-01 -1.9962418389497421e+02 9.9999999999999986e+01 -1.9962418389497425e+00 -4.2810143786806929e+00 2.2847725397309504e+00 150 9.9869910038063338e+01 1.0031270394105415e+02 -5.2987454528455102e-01 -1.9792006363041884e+02 9.9999999999999986e+01 -1.9792006363041887e+00 -4.2829318170442896e+00 2.3037311807401011e+00 151 9.9944741197282042e+01 9.9863208689739849e+01 -5.2423551042957917e-01 -1.9693690335573157e+02 1.0000000000000000e+02 -1.9693690335573157e+00 -4.2843390786590412e+00 2.3149700451017243e+00 152 9.9966268768690014e+01 1.0030913187654204e+02 -5.2089685055820423e-01 -1.9776358154398872e+02 1.0000000000000000e+02 -1.9776358154398872e+00 -4.2986552137296279e+00 2.3210193982897409e+00 153 9.9992488298670636e+01 9.9974616466880576e+01 -5.4435896622563740e-01 -1.9785689712913475e+02 1.0000000000000000e+02 -1.9785689712913475e+00 -4.3028010678249373e+00 2.3242320965335908e+00 154 9.9946966110771470e+01 9.9880225449354697e+01 -5.1541233013068422e-01 -1.9707221490991219e+02 1.0000000000000001e+02 -1.9707221490991216e+00 -4.3000687096269408e+00 2.3293465605278181e+00 155 9.9963970870312608e+01 9.9905258354949481e+01 -5.1717157111829293e-01 -1.9675588774059818e+02 1.0000000000000000e+02 -1.9675588774059818e+00 -4.2972676684199707e+00 2.3297087910139886e+00 156 9.9985422495957380e+01 9.9947865643131408e+01 -5.3292140058262494e-01 -1.9742946614539210e+02 1.0000000000000000e+02 -1.9742946614539210e+00 -4.2950213308249605e+00 2.3207266693710396e+00 157 9.9936128839650507e+01 9.9875883082099932e+01 -5.1538488845153030e-01 -1.9800952357948105e+02 1.0000000000000000e+02 -1.9800952357948105e+00 -4.2960309118324993e+00 2.3159356760376881e+00 158 9.9965378687367377e+01 9.9902840797472422e+01 -5.2990451625504464e-01 -1.9760146893278954e+02 1.0000000000000003e+02 -1.9760146893278947e+00 -4.3012102338217844e+00 2.3251955444938890e+00 159 9.9949399488145303e+01 9.9885993957041364e+01 -5.1367053705904753e-01 -1.9766510921268980e+02 1.0000000000000000e+02 -1.9766510921268980e+00 -4.2997379425768187e+00 2.3230868504499202e+00 160 9.9994686021917076e+01 9.9961310290968584e+01 -5.4834457087019239e-01 -1.9876204437864396e+02 1.0000000000000001e+02 -1.9876204437864393e+00 -4.2932991060245946e+00 2.3056786622381558e+00 161 9.9931017038958345e+01 9.9849867344805389e+01 -5.3142006456577728e-01 -1.9818022884114524e+02 1.0000000000000000e+02 -1.9818022884114523e+00 -4.2976574091370878e+00 2.3158551207256357e+00 162 9.9943950381966275e+01 9.9838014343563827e+01 -5.2346319881121983e-01 -1.9662018474657938e+02 1.0000000000000003e+02 -1.9662018474657932e+00 -4.2917017749436779e+00 2.3254999274778854e+00 163 9.9921799841802539e+01 9.9807418970605468e+01 -5.1232902980752593e-01 -1.9689502416682538e+02 1.0000000000000000e+02 -1.9689502416682538e+00 -4.2964535877503014e+00 2.3275033460820480e+00 164 9.9966771740421123e+01 9.9897460115557038e+01 -5.1018829652109665e-01 -1.9548769745993499e+02 1.0000000000000003e+02 -1.9548769745993493e+00 -4.2963186826311590e+00 2.3414417080318102e+00 165 9.9957882702119448e+01 9.9887452558285531e+01 -5.0053320222018216e-01 -1.9553813576239270e+02 1.0000000000000003e+02 -1.9553813576239263e+00 -4.2921298616224730e+00 2.3367485039985465e+00 166 9.9991102231878614e+01 9.9956278478829915e+01 -5.0746286331389345e-01 -1.9590751282407666e+02 1.0000000000000000e+02 -1.9590751282407666e+00 -4.2955321848773718e+00 2.3364570566366054e+00 167 9.9960286843420079e+01 9.9899432445851588e+01 -4.9016573785647050e-01 -1.9535081745646858e+02 9.9999999999999986e+01 -1.9535081745646861e+00 -4.2976638824278135e+00 2.3441557078631279e+00 168 9.9973054600453267e+01 9.9931600326164059e+01 -4.9624349365258535e-01 -1.9583466009641447e+02 9.9999999999999986e+01 -1.9583466009641450e+00 -4.3004813497594592e+00 2.3421347487953139e+00 169 9.9979091425799112e+01 9.9951557250454627e+01 -5.1518359241409739e-01 -1.9664336487301912e+02 1.0000000000000001e+02 -1.9664336487301910e+00 -4.2929946017885285e+00 2.3265609530583373e+00 170 9.9953079182853969e+01 1.0037283789972057e+02 -5.0246292314555563e-01 -1.9606157060752295e+02 1.0000000000000000e+02 -1.9606157060752296e+00 -4.3037140584055296e+00 2.3430983523302986e+00 171 9.9970294690840106e+01 9.9906167875556719e+01 -4.9705094824768703e-01 -1.9603430384629843e+02 1.0000000000000003e+02 -1.9603430384629836e+00 -4.3035833485265362e+00 2.3432403100635528e+00 172 9.9979526437294268e+01 9.9955240994773945e+01 -5.0693966384216693e-01 -1.9610115193314357e+02 1.0000000000000001e+02 -1.9610115193314355e+00 -4.3058597593959984e+00 2.3448482400645636e+00 173 9.9991884219324078e+01 9.9961826492124018e+01 -5.2040059843873843e-01 -1.9651032243010405e+02 9.9999999999999972e+01 -1.9651032243010413e+00 -4.3112037627673052e+00 2.3461005384662643e+00 174 9.9969824162102199e+01 9.9940653652305500e+01 -5.1212543441418790e-01 -1.9599715015380528e+02 9.9999999999999986e+01 -1.9599715015380532e+00 -4.3148508691970457e+00 2.3548793676589925e+00 175 9.9979515128615574e+01 9.9927876249221526e+01 -5.0876060226252384e-01 -1.9604917728993684e+02 1.0000000000000001e+02 -1.9604917728993680e+00 -4.3114180266191218e+00 2.3509262537197539e+00 176 9.9979931969885101e+01 9.9953848473943253e+01 -5.0971034016174999e-01 -1.9631436322782150e+02 9.9999999999999986e+01 -1.9631436322782154e+00 -4.3110101057939367e+00 2.3478664735157215e+00 177 9.9985514413866170e+01 9.9938780381459381e+01 -5.1501674466554803e-01 -1.9660729176283371e+02 1.0000000000000000e+02 -1.9660729176283371e+00 -4.3076722546669988e+00 2.3415993370386623e+00 178 9.9972493415590961e+01 9.9926869335311167e+01 -5.1716337147152003e-01 -1.9660022746446879e+02 1.0000000000000000e+02 -1.9660022746446879e+00 -4.3078260118989498e+00 2.3418237372542632e+00 179 9.9975042418157798e+01 9.9945620738988524e+01 -5.1665412685597201e-01 -1.9627322198553341e+02 1.0000000000000000e+02 -1.9627322198553341e+00 -4.3073732853152968e+00 2.3446410654599621e+00 180 9.9970419115559650e+01 9.9927465828458935e+01 -5.0800212581354909e-01 -1.9663167465148780e+02 1.0000000000000000e+02 -1.9663167465148781e+00 -4.3089848964680932e+00 2.3426681499532149e+00 181 9.9969003841063341e+01 9.9920487955065127e+01 -5.1050426278539895e-01 -1.9707980606043799e+02 9.9999999999999986e+01 -1.9707980606043802e+00 -4.3059161015142999e+00 2.3351180409099195e+00 182 9.9986362699078171e+01 9.9971871152947102e+01 -5.2265361755658757e-01 -1.9672281306235158e+02 1.0000000000000001e+02 -1.9672281306235155e+00 -4.3044472884998051e+00 2.3372191578762909e+00 183 9.9965766617026119e+01 9.9939201400170305e+01 -5.2492175911660177e-01 -1.9676538664152130e+02 1.0000000000000000e+02 -1.9676538664152130e+00 -4.3060965475585142e+00 2.3384426811433006e+00 184 9.9974457764927067e+01 9.9929687975178737e+01 -5.1943345376882133e-01 -1.9650760028503643e+02 1.0000000000000000e+02 -1.9650760028503644e+00 -4.3014515930219179e+00 2.3363755901715537e+00 185 9.9964219647891767e+01 9.9915666182419287e+01 -5.0985987625417761e-01 -1.9620884736480690e+02 9.9999999999999986e+01 -1.9620884736480695e+00 -4.2959749236996476e+00 2.3338864500515788e+00 186 9.9978570087948853e+01 9.9958968461473816e+01 -5.1548684825239655e-01 -1.9643742821009826e+02 1.0000000000000001e+02 -1.9643742821009824e+00 -4.3024010412187872e+00 2.3380267591178052e+00 187 9.9978502414042197e+01 9.9948769091008486e+01 -5.1623694673050802e-01 -1.9687077124263590e+02 1.0000000000000001e+02 -1.9687077124263586e+00 -4.3043517216500176e+00 2.3356440092236599e+00 188 9.9969394334223907e+01 9.9910119021827555e+01 -5.0437315712951170e-01 -1.9668061870296640e+02 1.0000000000000000e+02 -1.9668061870296640e+00 -4.3030824628654951e+00 2.3362762758358309e+00 189 9.9987247336145799e+01 1.0042042482785266e+02 -5.1381015270157371e-01 -1.9705040186982717e+02 1.0000000000000000e+02 -1.9705040186982716e+00 -4.3055709443909391e+00 2.3350669256926673e+00 190 9.9989359733484349e+01 9.9987175975744464e+01 -5.2410372448235165e-01 -1.9639332442549644e+02 1.0000000000000000e+02 -1.9639332442549644e+00 -4.3058042213779570e+00 2.3418709771229924e+00 191 9.9954027615078402e+01 9.9993888652495627e+01 -5.0073327253255229e-01 -1.9617069724175215e+02 1.0000000000000000e+02 -1.9617069724175216e+00 -4.3072917774049220e+00 2.3455848049874000e+00 192 9.9980112941613044e+01 1.0029362690037121e+02 -5.0953827738567048e-01 -1.9605410079667001e+02 1.0000000000000004e+02 -1.9605410079666992e+00 -4.3067977065736436e+00 2.3462566986069442e+00 193 9.9979374550718475e+01 9.9975353988794794e+01 -5.1820661861514850e-01 -1.9625927855891885e+02 1.0000000000000001e+02 -1.9625927855891883e+00 -4.3026846000704531e+00 2.3400918144812648e+00 194 9.9965611735317040e+01 9.9919900061000732e+01 -5.0976174172782684e-01 -1.9648195222319714e+02 1.0000000000000001e+02 -1.9648195222319711e+00 -4.3106230684166817e+00 2.3458035461847113e+00 195 9.9988354275260377e+01 9.9976033892918238e+01 -5.2393497756833918e-01 -1.9657606758189266e+02 1.0000000000000000e+02 -1.9657606758189266e+00 -4.3064890789828949e+00 2.3407284031639679e+00 196 9.9961491956450701e+01 9.9916320151744188e+01 -5.1350942597197358e-01 -1.9656052816435835e+02 1.0000000000000001e+02 -1.9656052816435832e+00 -4.3103512756854467e+00 2.3447459940418636e+00 197 9.9977486330893569e+01 9.9939422829736500e+01 -5.1446165514078912e-01 -1.9746681219000479e+02 1.0000000000000004e+02 -1.9746681219000468e+00 -4.2950435772245008e+00 2.3203754553244544e+00 198 9.9985065295975360e+01 9.9955464540469052e+01 -5.2170666754206163e-01 -1.9710601174755243e+02 1.0000000000000000e+02 -1.9710601174755242e+00 -4.2979301816655768e+00 2.3268700641900528e+00 199 9.9963882334171032e+01 9.9911969035343887e+01 -5.1214163577497163e-01 -1.9734979839648651e+02 1.0000000000000001e+02 -1.9734979839648648e+00 -4.3043778818576239e+00 2.3308798978927596e+00 200 9.9993045858806170e+01 9.9957429565855747e+01 -5.2809883147052339e-01 -1.9815237912597303e+02 9.9999999999999986e+01 -1.9815237912597305e+00 -4.2959483905182498e+00 2.3144245992585195e+00 201 9.9966560853796352e+01 9.9923167509598642e+01 -5.2626984379099706e-01 -1.9791502473410341e+02 1.0000000000000000e+02 -1.9791502473410341e+00 -4.3002608116179371e+00 2.3211105642769030e+00 202 9.9970780096899887e+01 9.9929528066411095e+01 -5.4277470048737020e-01 -1.9737370472093218e+02 1.0000000000000001e+02 -1.9737370472093214e+00 -4.3022985645030580e+00 2.3285615172937364e+00 203 9.9932706845283576e+01 9.9849896478779982e+01 -5.0996167365499367e-01 -1.9758868358754370e+02 1.0000000000000000e+02 -1.9758868358754371e+00 -4.3001122344883989e+00 2.3242253986129611e+00 204 9.9961545109255937e+01 9.9910296989870986e+01 -5.2292421027541436e-01 -1.9704687653090085e+02 1.0000000000000001e+02 -1.9704687653090081e+00 -4.3018948227953446e+00 2.3314260574863375e+00 205 9.9965801221568341e+01 1.0031613095791231e+02 -5.2377967066657083e-01 -1.9759197840049652e+02 1.0000000000000003e+02 -1.9759197840049645e+00 -4.2961246693898065e+00 2.3202048853848418e+00 206 9.9972496040953160e+01 9.9940904781747065e+01 -5.2514914581716210e-01 -1.9766242081131438e+02 1.0000000000000000e+02 -1.9766242081131438e+00 -4.2945172961747708e+00 2.3178930880616271e+00 207 9.9974898827753691e+01 9.9907424633347432e+01 -5.2718535828837210e-01 -1.9747919063150349e+02 1.0000000000000000e+02 -1.9747919063150350e+00 -4.2958103873140523e+00 2.3210184809990166e+00 208 9.9959085547070814e+01 9.9910800563955462e+01 -5.2188913905410073e-01 -1.9783156251690738e+02 1.0000000000000000e+02 -1.9783156251690739e+00 -4.2954769013725658e+00 2.3171612762034921e+00 209 9.9946566983813696e+01 1.0073121821971148e+02 -5.2241890327212592e-01 -1.9771266550219025e+02 9.9999999999999986e+01 -1.9771266550219029e+00 -4.3000660817011829e+00 2.3229394266792807e+00 210 9.9958760097724266e+01 9.9918115863760690e+01 -5.2762111343806206e-01 -1.9813106842545622e+02 9.9999999999999986e+01 -1.9813106842545627e+00 -4.2918865481219166e+00 2.3105758638673541e+00 211 9.9967400689601874e+01 9.9922000874828768e+01 -5.2562494688676564e-01 -1.9710421759493161e+02 1.0000000000000001e+02 -1.9710421759493157e+00 -4.2950788674185425e+00 2.3240366914692272e+00 212 9.9938568115456661e+01 9.9869185426019229e+01 -5.2698119824288847e-01 -1.9739326441280400e+02 1.0000000000000000e+02 -1.9739326441280400e+00 -4.2913061827114829e+00 2.3173735385834435e+00 213 9.9946755338535226e+01 9.9842107771363203e+01 -5.1560604497233919e-01 -1.9677782258990376e+02 1.0000000000000000e+02 -1.9677782258990377e+00 -4.2907706944315507e+00 2.3229924685325130e+00 214 9.9950852713264283e+01 9.9885685294854980e+01 -5.0465534843487925e-01 -1.9655477893048533e+02 1.0000000000000000e+02 -1.9655477893048534e+00 -4.2896072169825663e+00 2.3240594276777116e+00 215 9.9977074494995833e+01 9.9925203492752260e+01 -5.1470886547662331e-01 -1.9734483908971978e+02 9.9999999999999986e+01 -1.9734483908971983e+00 -4.2981232334845068e+00 2.3246748425873083e+00 216 9.9967448443974433e+01 9.9949443746127258e+01 -5.3447785153270400e-01 -1.9658190177540411e+02 9.9999999999999986e+01 -1.9658190177540413e+00 -4.3003733047447890e+00 2.3345542869907474e+00 217 9.9939545363985744e+01 9.9867728466507813e+01 -5.1362320429912323e-01 -1.9667878412471413e+02 1.0000000000000004e+02 -1.9667878412471402e+00 -4.2983432518811906e+00 2.3315554106340501e+00 218 9.9985282839651447e+01 9.9934759988605805e+01 -5.3152645114066788e-01 -1.9661075094799469e+02 9.9999999999999986e+01 -1.9661075094799472e+00 -4.3052090836991974e+00 2.3391015742192502e+00 219 9.9901820025532217e+01 1.0011789030399861e+02 -5.2318958690797013e-01 -1.9591944942815013e+02 1.0000000000000000e+02 -1.9591944942815014e+00 -4.3011268543117929e+00 2.3419323600302921e+00 220 9.9992108851458013e+01 9.9944413504917378e+01 -5.3386355227966631e-01 -1.9653087291420880e+02 1.0000000000000003e+02 -1.9653087291420874e+00 -4.2988316502929065e+00 2.3335229211508199e+00 221 9.9945798888646891e+01 9.9894714988332325e+01 -5.0889506612081059e-01 -1.9605613196513704e+02 9.9999999999999986e+01 -1.9605613196513707e+00 -4.2958066195345408e+00 2.3352452998831699e+00 222 9.9976485053408794e+01 9.9921589218877386e+01 -5.0318108297349284e-01 -1.9645867221553036e+02 1.0000000000000001e+02 -1.9645867221553033e+00 -4.2951201436671349e+00 2.3305334215118312e+00 223 9.9993933942013243e+01 9.9979987818488596e+01 -5.2120595556904958e-01 -1.9620796845718556e+02 9.9999999999999986e+01 -1.9620796845718560e+00 -4.3045961511656863e+00 2.3425164665938292e+00 224 9.9978285719971225e+01 9.9946827919787509e+01 -5.1713410210993460e-01 -1.9634826066883193e+02 1.0000000000000000e+02 -1.9634826066883193e+00 -4.3071796343795592e+00 2.3436970276912406e+00 225 9.9979829671433691e+01 9.9939421887221869e+01 -5.1659348504656888e-01 -1.9638437792985985e+02 1.0000000000000000e+02 -1.9638437792985985e+00 -4.3001936806371743e+00 2.3363499013385751e+00 226 9.9962996951876690e+01 9.9935535898637539e+01 -5.0961098357082579e-01 -1.9619363001453331e+02 1.0000000000000000e+02 -1.9619363001453332e+00 -4.2915568308068339e+00 2.3296205306615017e+00 227 9.9970254461293052e+01 9.9889151616795914e+01 -4.9334957224829007e-01 -1.9637937347264827e+02 9.9999999999999986e+01 -1.9637937347264831e+00 -4.2948252751729514e+00 2.3310315404464697e+00 228 9.9997856908199225e+01 9.9985139626378427e+01 -5.1150676351879298e-01 -1.9612055025215182e+02 1.0000000000000001e+02 -1.9612055025215178e+00 -4.2931443362443691e+00 2.3319388337228508e+00 229 9.9969368884803259e+01 9.9926691394330433e+01 -5.0685257564925490e-01 -1.9630230611804683e+02 1.0000000000000001e+02 -1.9630230611804680e+00 -4.2969813302841500e+00 2.3339582691036824e+00 230 9.9988442571389967e+01 9.9973148394984094e+01 -5.1447725892105334e-01 -1.9682303621688149e+02 1.0000000000000000e+02 -1.9682303621688149e+00 -4.2987753480262203e+00 2.3305449858574057e+00 231 9.9986140658653568e+01 9.9961670737894906e+01 -5.2756786067874128e-01 -1.9724267707785961e+02 9.9999999999999972e+01 -1.9724267707785967e+00 -4.2962256387031541e+00 2.3237988679245580e+00 232 9.9962759093492650e+01 9.9921651133522261e+01 -5.1152873127040599e-01 -1.9711830139618456e+02 1.0000000000000000e+02 -1.9711830139618456e+00 -4.2923600228041572e+00 2.3211770088423118e+00 233 9.9981020885183341e+01 9.9932551133459370e+01 -5.1768380477078080e-01 -1.9727741140208556e+02 9.9999999999999986e+01 -1.9727741140208559e+00 -4.2869605648641063e+00 2.3141864508432506e+00 234 9.9972831485849710e+01 9.9939149216005859e+01 -5.2578142879761880e-01 -1.9706094279542378e+02 1.0000000000000001e+02 -1.9706094279542374e+00 -4.2775743910796242e+00 2.3069649631253872e+00 235 9.9962414369050634e+01 9.9909684158074569e+01 -5.2077544237503826e-01 -1.9672120579854226e+02 1.0000000000000000e+02 -1.9672120579854226e+00 -4.2747866938313885e+00 2.3075746358459659e+00 236 9.9947633307097576e+01 9.9839015141345371e+01 -5.1053909336939896e-01 -1.9822865917430593e+02 9.9999999999999986e+01 -1.9822865917430597e+00 -4.2675196399259141e+00 2.2852330481828544e+00 237 9.9965777490896286e+01 9.9923914315200349e+01 -5.2307745126134175e-01 -1.9664536973823536e+02 9.9999999999999986e+01 -1.9664536973823539e+00 -4.2839775800335280e+00 2.3175238826511739e+00 238 9.9956016334533714e+01 9.9908371519176015e+01 -5.0712258519122888e-01 -1.9727136781869223e+02 9.9999999999999986e+01 -1.9727136781869226e+00 -4.2842893328462077e+00 2.3115756546592854e+00 239 9.9976329199454597e+01 9.9923982671704763e+01 -5.1673553600518862e-01 -1.9560304094297271e+02 9.9999999999999986e+01 -1.9560304094297274e+00 -4.2864033850477972e+00 2.3303729756180704e+00 240 9.9975666763373582e+01 9.9927179823225586e+01 -5.2120323303553517e-01 -1.9571742535042245e+02 9.9999999999999986e+01 -1.9571742535042249e+00 -4.2843228234874093e+00 2.3271485699831844e+00 241 9.9945670499273930e+01 9.9862759136415093e+01 -4.9567848416287413e-01 -1.9600691448148137e+02 1.0000000000000001e+02 -1.9600691448148135e+00 -4.2816449200264799e+00 2.3215757752116670e+00 242 9.9975478629605121e+01 9.9922349801816424e+01 -5.0322260462257229e-01 -1.9598935508310291e+02 1.0000000000000000e+02 -1.9598935508310291e+00 -4.2917382702340729e+00 2.3318447194030436e+00 243 9.9983024206517499e+01 9.9935736169514271e+01 -5.2248460021156551e-01 -1.9646145082615539e+02 1.0000000000000000e+02 -1.9646145082615538e+00 -4.2933231479502147e+00 2.3287086396886600e+00 244 9.9958213452522145e+01 9.9900214948378476e+01 -5.1517948576543338e-01 -1.9671449228339060e+02 1.0000000000000000e+02 -1.9671449228339060e+00 -4.2879798787297689e+00 2.3208349558958630e+00 245 9.9940602581403567e+01 9.9804202743948551e+01 -5.1285224871702872e-01 -1.9718236488635466e+02 1.0000000000000000e+02 -1.9718236488635468e+00 -4.2762506715240756e+00 2.3044270226605299e+00 246 9.9822508720815478e+01 1.0005523030161051e+02 -4.9747340329698037e-01 -1.9724015107859211e+02 1.0000000000000000e+02 -1.9724015107859212e+00 -4.2860992804265656e+00 2.3136977696406440e+00 247 9.9984668634144342e+01 9.9978886829679382e+01 -5.2115481707481148e-01 -1.9824728899493977e+02 1.0000000000000001e+02 -1.9824728899493973e+00 -4.2845124006803079e+00 2.3020395107309115e+00 248 9.9990954249434381e+01 9.9984302640634084e+01 -5.3890938450718862e-01 -1.9760144988646266e+02 1.0000000000000000e+02 -1.9760144988646267e+00 -4.2893604822282034e+00 2.3133459833635768e+00 249 9.9955996653579874e+01 9.9904779246751261e+01 -5.2845279360846942e-01 -1.9730018032721458e+02 1.0000000000000001e+02 -1.9730018032721455e+00 -4.2958974971374877e+00 2.3228956938653429e+00 250 9.9958418224237221e+01 9.9898334582249859e+01 -5.2018334614503514e-01 -1.9745496643543947e+02 9.9999999999999986e+01 -1.9745496643543952e+00 -4.3000201690627353e+00 2.3254705047083410e+00 251 9.9934885964981717e+01 9.9787424052886237e+01 -5.2405249386017960e-01 -1.9708824525839415e+02 1.0000000000000001e+02 -1.9708824525839412e+00 -4.2981578776466947e+00 2.3272754250627536e+00 252 9.9942203880186412e+01 1.0024953904656695e+02 -5.0293405064042629e-01 -1.9624500688350696e+02 1.0000000000000001e+02 -1.9624500688350692e+00 -4.3017915639121211e+00 2.3393414950770515e+00 253 9.9981436917261888e+01 9.9950073510113640e+01 -5.1088457990570113e-01 -1.9636261182130619e+02 1.0000000000000000e+02 -1.9636261182130619e+00 -4.2976560870104379e+00 2.3340299687973758e+00 254 9.9971400313750095e+01 9.9934285365893572e+01 -5.0230747653715435e-01 -1.9570721871086633e+02 1.0000000000000001e+02 -1.9570721871086629e+00 -4.2936364491472556e+00 2.3365642620385922e+00 255 9.9979433386815899e+01 9.9927690335064895e+01 -5.0355439526903667e-01 -1.9589035937744808e+02 1.0000000000000000e+02 -1.9589035937744808e+00 -4.2863622115398821e+00 2.3274586177654020e+00 256 9.9966928285444837e+01 9.9921098908531647e+01 -5.0115591223870759e-01 -1.9544976979653208e+02 1.0000000000000001e+02 -1.9544976979653206e+00 -4.2930270272005746e+00 2.3385293292352527e+00 257 9.9970969252124689e+01 9.9940586216268315e+01 -5.0904757665337419e-01 -1.9581381540960078e+02 9.9999999999999986e+01 -1.9581381540960081e+00 -4.2896030352386099e+00 2.3314648811426015e+00 258 9.9965406757999631e+01 9.9922918322383765e+01 -5.1197491235244674e-01 -1.9636578677713422e+02 9.9999999999999986e+01 -1.9636578677713425e+00 -4.2984133176583903e+00 2.3347554498870471e+00 259 9.9963842651740194e+01 9.9917096138261101e+01 -5.0826667624205701e-01 -1.9666592104597606e+02 1.0000000000000000e+02 -1.9666592104597607e+00 -4.3037836205907478e+00 2.3371244101309876e+00 260 9.9977658013123843e+01 9.9948711792699513e+01 -5.0977116663345567e-01 -1.9667039881608355e+02 9.9999999999999957e+01 -1.9667039881608361e+00 -4.3047489813017465e+00 2.3380449931409104e+00 261 9.9980852889515532e+01 9.9925915699518356e+01 -5.1692773911159562e-01 -1.9676124168665700e+02 9.9999999999999986e+01 -1.9676124168665703e+00 -4.3037785582111141e+00 2.3361661413445436e+00 262 9.9980340142377713e+01 9.9966966373499389e+01 -5.2613123527847927e-01 -1.9667687786269985e+02 9.9999999999999972e+01 -1.9667687786269992e+00 -4.3041957014699808e+00 2.3374269228429818e+00 263 9.9957678789978999e+01 9.9906792048635069e+01 -5.0651268177475373e-01 -1.9623793633504147e+02 1.0000000000000000e+02 -1.9623793633504147e+00 -4.2989988267099966e+00 2.3366194633595812e+00 264 9.9992107622746573e+01 9.9956048198110707e+01 -5.1892687645767244e-01 -1.9668349719776441e+02 9.9999999999999986e+01 -1.9668349719776446e+00 -4.2996310242087805e+00 2.3327960522311364e+00 265 9.9960527263843730e+01 9.9920641757424676e+01 -5.0902866687702109e-01 -1.9645690887143451e+02 9.9999999999999986e+01 -1.9645690887143454e+00 -4.3074018934609528e+00 2.3428328047466076e+00 266 9.9971393725827497e+01 9.9932780826111511e+01 -5.0364057310079113e-01 -1.9655951288215653e+02 1.0000000000000000e+02 -1.9655951288215654e+00 -4.3070906102543010e+00 2.3414954814327356e+00 267 9.9992270087811818e+01 9.9963665935720257e+01 -5.1558055130905145e-01 -1.9621878546395232e+02 1.0000000000000001e+02 -1.9621878546395228e+00 -4.3022697613566523e+00 2.3400819067171299e+00 268 9.9978733145645265e+01 9.9946885547507335e+01 -5.1727595472704480e-01 -1.9603311804985609e+02 1.0000000000000000e+02 -1.9603311804985608e+00 -4.2996913281139832e+00 2.3393601476154218e+00 269 9.9971947356264280e+01 9.9935983112081558e+01 -5.1293548040513559e-01 -1.9667606977651670e+02 1.0000000000000001e+02 -1.9667606977651666e+00 -4.2979660227570875e+00 2.3312053249919198e+00 270 9.9967920991779962e+01 9.9916869475588939e+01 -5.0535441722788665e-01 -1.9690661486342481e+02 1.0000000000000000e+02 -1.9690661486342480e+00 -4.2982541280186979e+00 2.3291879793844492e+00 271 9.9976438676830639e+01 9.9933606797653525e+01 -5.1440956305310415e-01 -1.9621136507206995e+02 9.9999999999999986e+01 -1.9621136507207000e+00 -4.3014472417682192e+00 2.3393335910475197e+00 272 9.9975805005478975e+01 1.0036946566222238e+02 -5.1926273355758856e-01 -1.9600310939569226e+02 1.0000000000000000e+02 -1.9600310939569228e+00 -4.3043984433596716e+00 2.3443673494027499e+00 273 9.9969703447957116e+01 9.9915849362473494e+01 -5.0501745966523615e-01 -1.9626553536859137e+02 1.0000000000000001e+02 -1.9626553536859135e+00 -4.3058159011296766e+00 2.3431605474437633e+00 274 9.9989469525500667e+01 9.9964779043375771e+01 -5.2007954427087888e-01 -1.9705269375177420e+02 1.0000000000000000e+02 -1.9705269375177421e+00 -4.3025166171350273e+00 2.3319896796172852e+00 275 9.9981472173848715e+01 9.9948979862304554e+01 -5.3086951293325213e-01 -1.9709537952395343e+02 1.0000000000000000e+02 -1.9709537952395344e+00 -4.3010412116305519e+00 2.3300874163910170e+00 276 9.9954616590306500e+01 9.9901940491951720e+01 -5.0985306213344206e-01 -1.9682337559245360e+02 1.0000000000000000e+02 -1.9682337559245360e+00 -4.2982536737020656e+00 2.3300199177775300e+00 277 9.9980510929202978e+01 9.9953188778040371e+01 -5.2512973893037729e-01 -1.9661618274478263e+02 1.0000000000000003e+02 -1.9661618274478256e+00 -4.3034131421415394e+00 2.3372513146937131e+00 278 9.9958970602069556e+01 9.9913069663377300e+01 -5.1253083918910547e-01 -1.9666813777049464e+02 9.9999999999999986e+01 -1.9666813777049468e+00 -4.2979979410239766e+00 2.3313165633190298e+00 279 9.9976130596516271e+01 9.9922497320071741e+01 -5.1006016951445843e-01 -1.9707699325036418e+02 1.0000000000000000e+02 -1.9707699325036419e+00 -4.2895714996355183e+00 2.3188015671318771e+00 280 9.9956659659689691e+01 9.9889212708998755e+01 -5.1656111974157892e-01 -1.9791725680464774e+02 1.0000000000000000e+02 -1.9791725680464773e+00 -4.2929608061062963e+00 2.3137882380598187e+00 281 9.9952378896528828e+01 1.0030036087363150e+02 -5.1477848993913933e-01 -1.9624365744233967e+02 1.0000000000000000e+02 -1.9624365744233967e+00 -4.2968701342017157e+00 2.3344335597783199e+00 282 9.9962009229564501e+01 9.9881342404504110e+01 -4.9788085031945500e-01 -1.9527394136728662e+02 1.0000000000000001e+02 -1.9527394136728660e+00 -4.2961318519179743e+00 2.3433924382451088e+00 283 9.9981401717254528e+01 9.9944926217049598e+01 -5.0867267011610640e-01 -1.9582865975370169e+02 1.0000000000000006e+02 -1.9582865975370158e+00 -4.2880543688258275e+00 2.3297677712888119e+00 284 9.9971579377227727e+01 9.9954375806247924e+01 -5.1051469294185248e-01 -1.9587031980558345e+02 9.9999999999999986e+01 -1.9587031980558349e+00 -4.2931347944852636e+00 2.3344315964294293e+00 285 9.9970932121870575e+01 9.9932494430681146e+01 -5.1311609875384923e-01 -1.9637527140585280e+02 9.9999999999999986e+01 -1.9637527140585285e+00 -4.2909902467433376e+00 2.3272375326848089e+00 286 9.9968051462375882e+01 9.9939570846128973e+01 -5.1042235177898043e-01 -1.9631578548165209e+02 9.9999999999999986e+01 -1.9631578548165212e+00 -4.2990330096139111e+00 2.3358751547973897e+00 287 9.9972034759593640e+01 9.9918540118565218e+01 -5.0540574790944504e-01 -1.9628326620905682e+02 9.9999999999999986e+01 -1.9628326620905685e+00 -4.2996116049827622e+00 2.3367789428921948e+00 288 9.9981014582897856e+01 9.9940580248958682e+01 -5.1099200720246207e-01 -1.9646671333724092e+02 9.9999999999999986e+01 -1.9646671333724095e+00 -4.2921820836143230e+00 2.3275149502419117e+00 289 9.9984679212190315e+01 9.9947757825070326e+01 -5.2594192796923411e-01 -1.9734138657284208e+02 9.9999999999999986e+01 -1.9734138657284213e+00 -4.2948308143639533e+00 2.3214169486355325e+00 290 9.9967740781934168e+01 1.0002914680857828e+02 -5.2987949812217261e-01 -1.9698894103398538e+02 1.0000000000000000e+02 -1.9698894103398539e+00 -4.2930895537646077e+00 2.3232001434247529e+00 291 9.9949294844480306e+01 1.0019928559141856e+02 -5.0838453614654744e-01 -1.9697420458069061e+02 9.9999999999999986e+01 -1.9697420458069066e+00 -4.2926586986184780e+00 2.3229166528115726e+00 292 9.9982269994457582e+01 9.9931977789656855e+01 -5.3283025266728912e-01 -1.9790939096430270e+02 1.0000000000000000e+02 -1.9790939096430271e+00 -4.2924892992697572e+00 2.3133953896267299e+00 293 9.9949579646816673e+01 9.9868605389820047e+01 -5.1406382877585366e-01 -1.9679216561710470e+02 1.0000000000000000e+02 -1.9679216561710471e+00 -4.2977810106747940e+00 2.3298593545037467e+00 294 9.9967397199287760e+01 9.9929051961617461e+01 -5.2140319490514941e-01 -1.9727968541857609e+02 9.9999999999999986e+01 -1.9727968541857612e+00 -4.2971300009834374e+00 2.3243331467976773e+00 295 9.9960864704032289e+01 9.9901020889081437e+01 -5.0787501038651051e-01 -1.9745259376261319e+02 9.9999999999999957e+01 -1.9745259376261326e+00 -4.2816028703100830e+00 2.3070769326839500e+00 296 9.9960875706267132e+01 9.9885961255839135e+01 -5.2642644451472587e-01 -1.9764648884485501e+02 1.0000000000000001e+02 -1.9764648884485498e+00 -4.2991643814603533e+00 2.3226994930118039e+00 297 9.9972063361185519e+01 9.9919774828285227e+01 -5.1904126148892571e-01 -1.9778628775899878e+02 9.9999999999999986e+01 -1.9778628775899882e+00 -4.2979787643995016e+00 2.3201158868095133e+00 298 9.9978987096956871e+01 9.9939823590982286e+01 -5.2388914137971454e-01 -1.9813815617569179e+02 1.0000000000000001e+02 -1.9813815617569177e+00 -4.2965264350225922e+00 2.3151448732656732e+00 299 9.9980374759823533e+01 9.9927428706184457e+01 -5.2896235647375378e-01 -1.9781753567701026e+02 9.9999999999999972e+01 -1.9781753567701033e+00 -4.2897738436545394e+00 2.3115984868844364e+00 300 9.9959316188716727e+01 9.9892615851945436e+01 -5.2154170865199867e-01 -1.9907499806636477e+02 1.0000000000000000e+02 -1.9907499806636477e+00 -4.2953454179939801e+00 2.3045954373303332e+00 301 9.9967447280465976e+01 9.9940923887612627e+01 -5.3311369910815365e-01 -1.9868192703690852e+02 9.9999999999999986e+01 -1.9868192703690857e+00 -4.2997726407925834e+00 2.3129533704234979e+00 302 9.9966714604849756e+01 9.9909365971766420e+01 -5.3494712595690863e-01 -1.9908622298540507e+02 1.0000000000000000e+02 -1.9908622298540508e+00 -4.3004669838311393e+00 2.3096047539770890e+00 303 9.9979357968402482e+01 9.9932955696474309e+01 -5.4695346114090182e-01 -1.9726966699207318e+02 9.9999999999999986e+01 -1.9726966699207322e+00 -4.2858308055173904e+00 2.3131341355966581e+00 304 9.9941732248482040e+01 9.9862411979045120e+01 -5.2883888506987542e-01 -1.9682673251298121e+02 1.0000000000000000e+02 -1.9682673251298122e+00 -4.2879648235614063e+00 2.3196974984315948e+00 305 9.9952681838309715e+01 9.9869764736917858e+01 -5.2178096078407266e-01 -1.9668201736402833e+02 1.0000000000000000e+02 -1.9668201736402833e+00 -4.2913701493971441e+00 2.3245499757568604e+00 306 9.9942481513874654e+01 9.9845587298364862e+01 -4.9465227991570188e-01 -1.9543283828850909e+02 1.0000000000000000e+02 -1.9543283828850910e+00 -4.2930190489200211e+00 2.3386906660349296e+00 307 9.9974270016467614e+01 9.9927288015662384e+01 -5.0479567011418336e-01 -1.9526017314054673e+02 9.9999999999999986e+01 -1.9526017314054676e+00 -4.2922948373254188e+00 2.3396931059199519e+00 308 9.9952452326911271e+01 9.9888809550636196e+01 -4.9463741479252687e-01 -1.9526595508736497e+02 1.0000000000000000e+02 -1.9526595508736497e+00 -4.2982789348322665e+00 2.3456193839586166e+00 309 9.9970997296720469e+01 9.9943257216108393e+01 -5.0498484891326390e-01 -1.9477193963411193e+02 9.9999999999999972e+01 -1.9477193963411201e+00 -4.2971388214327186e+00 2.3494194250915985e+00 310 9.9961147512930083e+01 9.9881211357258550e+01 -4.9252004233094326e-01 -1.9517093023441797e+02 1.0000000000000000e+02 -1.9517093023441796e+00 -4.2948798343660126e+00 2.3431705320218330e+00 311 9.9976879388567525e+01 9.9931661385805313e+01 -4.9946269339017385e-01 -1.9657039385095990e+02 1.0000000000000001e+02 -1.9657039385095987e+00 -4.2944018800660411e+00 2.3286979415564435e+00 312 9.9972795460535579e+01 9.9946350842246517e+01 -5.1502035404666924e-01 -1.9731454209986777e+02 1.0000000000000000e+02 -1.9731454209986776e+00 -4.2942936246132248e+00 2.3211482036145474e+00 313 9.9951894524832426e+01 9.9921132474601947e+01 -5.3332061183514856e-01 -1.9738755194972660e+02 9.9999999999999972e+01 -1.9738755194972668e+00 -4.2844010837782323e+00 2.3105255642809657e+00 314 9.9912642790533255e+01 9.9803785961261369e+01 -5.2708493570542847e-01 -1.9815308289542213e+02 9.9999999999999986e+01 -1.9815308289542217e+00 -4.2732822041485417e+00 2.2917513751943193e+00 315 9.9733184533797143e+01 9.9945865088534816e+01 -5.1933858672010802e-01 -1.9583657518972120e+02 9.9999999999999986e+01 -1.9583657518972124e+00 -4.2960174252716410e+00 2.3376516733744293e+00 316 9.9950614549356175e+01 9.9875131323275170e+01 -5.0162147973503790e-01 -1.9565304405617584e+02 1.0000000000000000e+02 -1.9565304405617585e+00 -4.2989214348110192e+00 2.3423909942492602e+00 317 9.9981903801225471e+01 9.9940230957284143e+01 -5.1927572996363092e-01 -1.9601945449038524e+02 9.9999999999999986e+01 -1.9601945449038529e+00 -4.3035379791566832e+00 2.3433434342528305e+00 318 9.9968269286684162e+01 9.9922295854061275e+01 -5.1939432002920227e-01 -1.9577418225493540e+02 1.0000000000000001e+02 -1.9577418225493537e+00 -4.2943773660463087e+00 2.3366355434969557e+00 319 9.9961498667041724e+01 9.9883996364754310e+01 -5.0556697110815574e-01 -1.9587535759467642e+02 1.0000000000000000e+02 -1.9587535759467642e+00 -4.2896368932125828e+00 2.3308833172658194e+00 320 9.9971280569594626e+01 9.9929656991204922e+01 -5.1081952442053269e-01 -1.9557252700878149e+02 1.0000000000000000e+02 -1.9557252700878149e+00 -4.2823737790116372e+00 2.3266485089238227e+00 321 9.9971287319827269e+01 9.9931809478415815e+01 -5.0654232466761195e-01 -1.9565062089477706e+02 1.0000000000000001e+02 -1.9565062089477703e+00 -4.2939388933004423e+00 2.3374326843526720e+00 322 9.9977673058414553e+01 9.9932723987367822e+01 -5.1318807787071330e-01 -1.9538084018808729e+02 1.0000000000000000e+02 -1.9538084018808730e+00 -4.2896801666283908e+00 2.3358717647475173e+00 323 9.9973665066061784e+01 9.9927746554930025e+01 -5.0927596207198722e-01 -1.9622136882200971e+02 1.0000000000000001e+02 -1.9622136882200967e+00 -4.2888454723955833e+00 2.3266317841754858e+00 324 9.9963520867217355e+01 9.9907526070772093e+01 -5.0657585061903487e-01 -1.9575842466716080e+02 1.0000000000000001e+02 -1.9575842466716076e+00 -4.2895246210524256e+00 2.3319403743808174e+00 325 9.9964146770086700e+01 9.9885043911679588e+01 -4.9346772268448696e-01 -1.9540960190402686e+02 1.0000000000000001e+02 -1.9540960190402683e+00 -4.2905841366126802e+00 2.3364881175724124e+00 326 9.9986476143741655e+01 9.9981973479128740e+01 -5.1852745370729059e-01 -1.9590932675051911e+02 9.9999999999999986e+01 -1.9590932675051915e+00 -4.2909470405064996e+00 2.3318537730013080e+00 327 9.9966354671499616e+01 9.9939830692159944e+01 -5.2621323468799752e-01 -1.9628846282634939e+02 9.9999999999999986e+01 -1.9628846282634942e+00 -4.2879483217254331e+00 2.3250636934619382e+00 328 9.9935315662879944e+01 9.9849189048752507e+01 -4.9391182972249537e-01 -1.9657225473072143e+02 1.0000000000000003e+02 -1.9657225473072135e+00 -4.2940085367768175e+00 2.3282859894696033e+00 329 9.9989755966579892e+01 9.9917846425057093e+01 -5.1458151261632223e-01 -1.9650902931621891e+02 1.0000000000000000e+02 -1.9650902931621892e+00 -4.2845906799335998e+00 2.3195003867714097e+00 330 9.9938778783393829e+01 9.9863483663981640e+01 -5.1957784648801653e-01 -1.9641134116590416e+02 1.0000000000000001e+02 -1.9641134116590413e+00 -4.2993934274274714e+00 2.3352800157684315e+00 331 9.9963729417043922e+01 9.9906979729827142e+01 -5.0806764719030417e-01 -1.9629748763369599e+02 1.0000000000000000e+02 -1.9629748763369599e+00 -4.2960564943025465e+00 2.3330816179655862e+00 332 9.9982136241846788e+01 9.9952600473458318e+01 -5.1067300715287534e-01 -1.9586444145872593e+02 1.0000000000000000e+02 -1.9586444145872595e+00 -4.2969140476999472e+00 2.3382696331126880e+00 333 9.9967625022879716e+01 9.9918815314255724e+01 -5.1008458733524342e-01 -1.9651149642580020e+02 9.9999999999999986e+01 -1.9651149642580024e+00 -4.2960763648543052e+00 2.3309614005963031e+00 334 9.9979616395275713e+01 9.9944545260520158e+01 -5.2227688387237070e-01 -1.9734040347749632e+02 9.9999999999999986e+01 -1.9734040347749635e+00 -4.2990415262450359e+00 2.3256374914700726e+00 335 9.9969269121595332e+01 9.9914167586806343e+01 -5.1155667133686433e-01 -1.9677130338483425e+02 1.0000000000000000e+02 -1.9677130338483426e+00 -4.3022514986902349e+00 2.3345384648418928e+00 336 9.9969064262289109e+01 9.9899513480092466e+01 -5.1720712263260693e-01 -1.9847751011301062e+02 1.0000000000000000e+02 -1.9847751011301062e+00 -4.3033202468079210e+00 2.3185451456778141e+00 337 9.9931787207025835e+01 1.0024597991774652e+02 -5.2988028257376762e-01 -1.9556184177770740e+02 9.9999999999999986e+01 -1.9556184177770743e+00 -4.3082549291868055e+00 2.3526365114097310e+00 338 9.9956576102063536e+01 9.9849099946772327e+01 -5.1922200759669790e-01 -1.9728230260607421e+02 9.9999999999999972e+01 -1.9728230260607429e+00 -4.3082141912177665e+00 2.3353911651570245e+00 339 9.9974905488181292e+01 9.9932193069444224e+01 -5.2098814519417402e-01 -1.9803312520758197e+02 9.9999999999999986e+01 -1.9803312520758201e+00 -4.3048516656003200e+00 2.3245204135244992e+00 340 9.9984591802627207e+01 9.9956500057726004e+01 -5.4063543091397148e-01 -1.9875381454819168e+02 1.0000000000000001e+02 -1.9875381454819165e+00 -4.3016629427009550e+00 2.3141247972190384e+00 341 9.9958940120646588e+01 9.9925588186090721e+01 -5.3398577158478877e-01 -1.9875032776299653e+02 1.0000000000000001e+02 -1.9875032776299650e+00 -4.2974536608054983e+00 2.3099503831755337e+00 342 9.9966300796408277e+01 9.9899545390278945e+01 -5.4021659671626288e-01 -1.9979808792363275e+02 1.0000000000000000e+02 -1.9979808792363276e+00 -4.2944553015116371e+00 2.2964744222753102e+00 343 9.9935529898137702e+01 9.9847189308419743e+01 -5.3950565553396079e-01 -2.0021812939141651e+02 9.9999999999999986e+01 -2.0021812939141657e+00 -4.2933683677864583e+00 2.2911870738722921e+00 344 9.9972798374887830e+01 1.0047406225330504e+02 -5.6555365031516991e-01 -2.0115918690728947e+02 1.0000000000000001e+02 -2.0115918690728942e+00 -4.2979914575855123e+00 2.2863995885126180e+00 345 9.9920308515337183e+01 9.9834373574151400e+01 -5.5158796042761904e-01 -2.0023766908343973e+02 9.9999999999999986e+01 -2.0023766908343976e+00 -4.2993488097024404e+00 2.2969721188680428e+00 346 9.9969105076234015e+01 9.9908131718765176e+01 -5.4708340221782836e-01 -1.9920387366776461e+02 1.0000000000000001e+02 -1.9920387366776457e+00 -4.3073091207508289e+00 2.3152703840731834e+00 347 9.9953172136139216e+01 9.9886750125890657e+01 -5.3601435362509287e-01 -1.9843877711634562e+02 9.9999999999999986e+01 -1.9843877711634565e+00 -4.3012122722252384e+00 2.3168245010617818e+00 348 9.9943279218048701e+01 9.9863974407208502e+01 -5.1496757640181945e-01 -1.9871114561359110e+02 9.9999999999999972e+01 -1.9871114561359118e+00 -4.3000119998108808e+00 2.3129005436749686e+00 349 9.9983838421192900e+01 9.9948388990197671e+01 -5.3275139203186928e-01 -1.9862984184267989e+02 1.0000000000000000e+02 -1.9862984184267989e+00 -4.2953395929381655e+00 2.3090411745113664e+00 350 9.9982629442579622e+01 9.9965640988716018e+01 -5.5443990820697175e-01 -1.9815570605215811e+02 9.9999999999999986e+01 -1.9815570605215815e+00 -4.2984484869729238e+00 2.3168914264513427e+00 351 9.9940911900091038e+01 9.9862122903463629e+01 -5.3642509467291755e-01 -1.9802850765746751e+02 1.0000000000000000e+02 -1.9802850765746751e+00 -4.2878623535030869e+00 2.3075772769284115e+00 352 9.9951502960298399e+01 9.9881596547566076e+01 -5.2440891010976598e-01 -1.9776002034739795e+02 1.0000000000000000e+02 -1.9776002034739797e+00 -4.2780972675549327e+00 2.3004970640809526e+00 353 9.9933247979819058e+01 9.9841022935149809e+01 -5.0439069276793824e-01 -1.9641226920967722e+02 1.0000000000000000e+02 -1.9641226920967723e+00 -4.2737026504167153e+00 2.3095799583199428e+00 354 9.9977136006818753e+01 9.9937340618007610e+01 -5.2515154912457374e-01 -1.9653630600097816e+02 9.9999999999999986e+01 -1.9653630600097820e+00 -4.2864850245950796e+00 2.3211219645852981e+00 355 9.9925398912632431e+01 9.9812987037665934e+01 -5.1337403037835405e-01 -1.9751490942608288e+02 1.0000000000000000e+02 -1.9751490942608287e+00 -4.2891224356034767e+00 2.3139733413426478e+00 356 9.9977498653524407e+01 9.9952162220821435e+01 -5.2155272685027498e-01 -1.9718761022853795e+02 1.0000000000000001e+02 -1.9718761022853792e+00 -4.2968969866202942e+00 2.3250208843349154e+00 357 9.9967034838321140e+01 9.9911779640677665e+01 -5.1776584680855020e-01 -1.9715720056370412e+02 1.0000000000000004e+02 -1.9715720056370403e+00 -4.2962206946467463e+00 2.3246486890097056e+00 358 9.9953427627209749e+01 9.9919523572619269e+01 -5.0713374354276020e-01 -1.9530984773169712e+02 1.0000000000000001e+02 -1.9530984773169708e+00 -4.2828287419869788e+00 2.3297302646700073e+00 359 9.9970289472429357e+01 9.9908063481996010e+01 -5.1584316751239834e-01 -1.9651053833303163e+02 9.9999999999999986e+01 -1.9651053833303167e+00 -4.2888935639628256e+00 2.3237881806325089e+00 360 9.9894145242372630e+01 1.0033281591398614e+02 -5.1355289960592354e-01 -1.9844734247125629e+02 9.9999999999999986e+01 -1.9844734247125633e+00 -4.2995263779137591e+00 2.3150529532011968e+00 361 9.9993188013556832e+01 9.9984192832451299e+01 -5.2851732665638262e-01 -1.9820084008795700e+02 9.9999999999999986e+01 -1.9820084008795704e+00 -4.2989037526636782e+00 2.3168953517841078e+00 362 9.9976685714377524e+01 9.9924494519874699e+01 -5.3027950581712591e-01 -1.9814249518918729e+02 1.0000000000000000e+02 -1.9814249518918730e+00 -4.3014919419379307e+00 2.3200669900460573e+00 363 9.9967533939626080e+01 9.9916502008628740e+01 -5.1803786389027995e-01 -1.9752402161672319e+02 1.0000000000000000e+02 -1.9752402161672320e+00 -4.3060297755360031e+00 2.3307895593687715e+00 364 9.9998981208917286e+01 9.9967328852298053e+01 -5.3579765612059771e-01 -1.9738505512120375e+02 9.9999999999999986e+01 -1.9738505512120379e+00 -4.3099902800468168e+00 2.3361397288347789e+00 365 9.9951561994811527e+01 9.9887552273620955e+01 -5.0641339961173415e-01 -1.9738497117896549e+02 9.9999999999999986e+01 -1.9738497117896552e+00 -4.3001949964076953e+00 2.3263452846180410e+00 366 9.9978988278185213e+01 9.9933736851249932e+01 -5.1159028992574906e-01 -1.9726307327169761e+02 1.0000000000000000e+02 -1.9726307327169761e+00 -4.2933909007139350e+00 2.3207601679969585e+00 367 9.9975394290828589e+01 9.9953231499789851e+01 -5.1507374117737592e-01 -1.9721236978669216e+02 9.9999999999999986e+01 -1.9721236978669221e+00 -4.2933118289483012e+00 2.3211881310813789e+00 368 9.9982165971580230e+01 9.9959053407466541e+01 -5.3092782604387490e-01 -1.9774087711869106e+02 1.0000000000000001e+02 -1.9774087711869104e+00 -4.2954017227985650e+00 2.3179929516116551e+00 369 9.9938124454599688e+01 1.0044188444210677e+02 -5.1303444758671446e-01 -1.9713801571140948e+02 1.0000000000000003e+02 -1.9713801571140941e+00 -4.2964334800949269e+00 2.3250533229808323e+00 370 9.9998634868385636e+01 9.9950237336195556e+01 -5.2686356200809470e-01 -1.9741949985858349e+02 1.0000000000000003e+02 -1.9741949985858342e+00 -4.2998190059803454e+00 2.3256240073945107e+00 371 9.9960855232756103e+01 9.9893599535057803e+01 -5.0577840170819266e-01 -1.9790706438909774e+02 1.0000000000000000e+02 -1.9790706438909775e+00 -4.2948060413063249e+00 2.3157353974153474e+00 372 9.9983383010749151e+01 9.9946512963991069e+01 -5.1698035649323271e-01 -1.9807640224367978e+02 1.0000000000000000e+02 -1.9807640224367979e+00 -4.2996320856793080e+00 2.3188680632425100e+00 373 9.9984574933132720e+01 9.9965690911668986e+01 -5.2637050176753708e-01 -1.9847336622563918e+02 1.0000000000000000e+02 -1.9847336622563918e+00 -4.3045505869608069e+00 2.3198169247044151e+00 374 9.9965552811656693e+01 9.9914889685367285e+01 -5.2437343469120956e-01 -1.9832468088689183e+02 1.0000000000000000e+02 -1.9832468088689184e+00 -4.3064115492406190e+00 2.3231647403717015e+00 375 9.9943990316110472e+01 9.9881654050043196e+01 -5.2341968697017105e-01 -1.9832578912774292e+02 1.0000000000000001e+02 -1.9832578912774290e+00 -4.3049996516031639e+00 2.3217417603257346e+00 376 9.9966038727525884e+01 9.9923141005908263e+01 -5.2293052973125331e-01 -1.9775482932753980e+02 9.9999999999999972e+01 -1.9775482932753987e+00 -4.3094603663512183e+00 2.3319120730758196e+00 377 9.9961575994358284e+01 9.9851663795739540e+01 -5.3423906004275912e-01 -1.9831516210835997e+02 1.0000000000000001e+02 -1.9831516210835993e+00 -4.3059702635868931e+00 2.3228186425032940e+00 378 9.9953390438589253e+01 9.9893579753107588e+01 -5.2087701540605125e-01 -1.9766368464306274e+02 1.0000000000000001e+02 -1.9766368464306270e+00 -4.3054077556515731e+00 2.3287709092209448e+00 379 9.9984289224634907e+01 9.9930205353279021e+01 -5.3375842272607854e-01 -1.9816287778576401e+02 9.9999999999999986e+01 -1.9816287778576405e+00 -4.3067276925189697e+00 2.3250989146613290e+00 380 9.9938930432152034e+01 9.9900788570121321e+01 -5.1975184450375322e-01 -1.9746700597609907e+02 9.9999999999999986e+01 -1.9746700597609912e+00 -4.3111242227704238e+00 2.3364541630094338e+00 381 9.9927664301090715e+01 9.9808029719877510e+01 -5.1722781889428904e-01 -1.9848479861510745e+02 1.0000000000000000e+02 -1.9848479861510746e+00 -4.3040030254540032e+00 2.3191550393029283e+00 382 9.9986255508392475e+01 9.9953293363095199e+01 -5.3797921715718633e-01 -1.9895653516328295e+02 9.9999999999999986e+01 -1.9895653516328300e+00 -4.2944170102761703e+00 2.3048516586433396e+00 383 9.9962804532291543e+01 9.9932129075246081e+01 -5.2672483535483539e-01 -1.9810491342402253e+02 9.9999999999999986e+01 -1.9810491342402257e+00 -4.2981781141425568e+00 2.3171289799023316e+00 384 9.9968085280420496e+01 9.9938321360678401e+01 -5.2654058858866382e-01 -1.9761013394952241e+02 1.0000000000000000e+02 -1.9761013394952240e+00 -4.3010393529970932e+00 2.3249380135018693e+00 385 9.9972514726344997e+01 9.9929822275291386e+01 -5.2180986685942732e-01 -1.9674565921577062e+02 1.0000000000000001e+02 -1.9674565921577059e+00 -4.3066940703144665e+00 2.3392374781567606e+00 386 9.9952576423982478e+01 1.0104822656791912e+02 -5.1113649944741424e-01 -1.9698017608459304e+02 1.0000000000000000e+02 -1.9698017608459304e+00 -4.3040778331203162e+00 2.3342760722743860e+00 387 9.9939668927058918e+01 1.0034484097771261e+02 -4.9757545853587015e-01 -1.9636737374170156e+02 9.9999999999999986e+01 -1.9636737374170159e+00 -4.3052833729412487e+00 2.3416096355242328e+00 388 1.0000148576941118e+02 1.0041183184626769e+02 -5.1531419931725064e-01 -1.9674382190625084e+02 9.9999999999999972e+01 -1.9674382190625093e+00 -4.3038723867597506e+00 2.3364341676972407e+00 389 9.9969048401333424e+01 9.9938438808686499e+01 -5.1071493078185426e-01 -1.9589092794926299e+02 1.0000000000000000e+02 -1.9589092794926299e+00 -4.3063261396801158e+00 2.3474168601874861e+00 390 9.9960499106929774e+01 9.9909495141713450e+01 -5.0062256900783242e-01 -1.9552260544757755e+02 9.9999999999999986e+01 -1.9552260544757758e+00 -4.3100575694794019e+00 2.3548315150036268e+00 391 9.9977934014779848e+01 9.9946008802375786e+01 -4.9750867796177506e-01 -1.9561403513881359e+02 9.9999999999999972e+01 -1.9561403513881366e+00 -4.3078190749418850e+00 2.3516787235537486e+00 392 9.9979691187781157e+01 1.0002056033322040e+02 -5.0292589132422572e-01 -1.9599597586470679e+02 9.9999999999999986e+01 -1.9599597586470683e+00 -4.3097100824951138e+00 2.3497503238480446e+00 393 9.9966473594597133e+01 1.0023816205224581e+02 -4.9063334458025881e-01 -1.9628786912063885e+02 1.0000000000000000e+02 -1.9628786912063885e+00 -4.3073405736667265e+00 2.3444618824603380e+00 394 9.9997400238307506e+01 9.9984462116882682e+01 -5.1288546404155699e-01 -1.9700498717491533e+02 1.0000000000000001e+02 -1.9700498717491530e+00 -4.3037770585190556e+00 2.3337271867699019e+00 395 9.9984885555559998e+01 9.9982078832749821e+01 -5.2132028258220076e-01 -1.9631154520221091e+02 1.0000000000000001e+02 -1.9631154520221088e+00 -4.3069580420626759e+00 2.3438425900405671e+00 396 9.9962938732951699e+01 9.9919074529101707e+01 -5.1079683756690830e-01 -1.9680658599131812e+02 1.0000000000000000e+02 -1.9680658599131813e+00 -4.3034387953066169e+00 2.3353729353934365e+00 397 9.9987708986281021e+01 9.9946898388922335e+01 -5.1805711039784730e-01 -1.9638037731578061e+02 1.0000000000000001e+02 -1.9638037731578057e+00 -4.2996736246075180e+00 2.3358698514497127e+00 398 9.9987705326185093e+01 9.9973114406627801e+01 -5.1977220611067465e-01 -1.9622786612742871e+02 9.9999999999999986e+01 -1.9622786612742875e+00 -4.3000598935030290e+00 2.3377812322287412e+00 399 9.9974846921327440e+01 9.9929924201174146e+01 -5.2197316040169228e-01 -1.9626795442868240e+02 1.0000000000000000e+02 -1.9626795442868241e+00 -4.2955664873034953e+00 2.3328869430166712e+00 400 9.9965497734663913e+01 9.9917458007817771e+01 -5.0312984030634533e-01 -1.9609894858639203e+02 9.9999999999999986e+01 -1.9609894858639207e+00 -4.2999556554807681e+00 2.3389661696168469e+00 401 9.9988183505781237e+01 9.9961049779447535e+01 -5.1544185954063759e-01 -1.9668951798915572e+02 1.0000000000000001e+02 -1.9668951798915568e+00 -4.3046536989248141e+00 2.3377585190332568e+00 402 9.9978169843089091e+01 9.9951587291377749e+01 -5.2145877296145682e-01 -1.9670718362908636e+02 9.9999999999999986e+01 -1.9670718362908639e+00 -4.3064681875206690e+00 2.3393963512298055e+00 403 9.9960990984317647e+01 9.9920675991202955e+01 -5.1596004455247180e-01 -1.9747815291771428e+02 1.0000000000000001e+02 -1.9747815291771424e+00 -4.3085367562829422e+00 2.3337552271057991e+00 404 9.9991310538732449e+01 9.9965169687699316e+01 -5.3276669774952290e-01 -1.9754020448022840e+02 1.0000000000000001e+02 -1.9754020448022838e+00 -4.3062376972028114e+00 2.3308356524005287e+00 405 9.9962412063952982e+01 9.9908599682327022e+01 -5.1952786439730736e-01 -1.9740426553620975e+02 1.0000000000000000e+02 -1.9740426553620976e+00 -4.3061433680238910e+00 2.3321007126617928e+00 406 9.9970954944634386e+01 9.9483165066475920e+01 -5.1034159178025118e-01 -1.9744812858745007e+02 1.0000000000000001e+02 -1.9744812858745004e+00 -4.3072699946865569e+00 2.3327887088120551e+00 407 9.9976778574294698e+01 9.9951413598081075e+01 -5.2373380271830017e-01 -1.9765936851156152e+02 9.9999999999999986e+01 -1.9765936851156156e+00 -4.3054391825722975e+00 2.3288454974566819e+00 408 9.9964193501966790e+01 9.9923722951327790e+01 -5.2158400785741033e-01 -1.9776233458916158e+02 9.9999999999999986e+01 -1.9776233458916161e+00 -4.3018739601122364e+00 2.3242506142206203e+00 409 9.9982460008974456e+01 9.9941672470377895e+01 -5.2632766601297121e-01 -1.9769989129082077e+02 9.9999999999999986e+01 -1.9769989129082082e+00 -4.3058187328897661e+00 2.3288198199815580e+00 410 9.9981760397921889e+01 9.9954964353164428e+01 -5.3866782253216816e-01 -1.9848194779547180e+02 9.9999999999999972e+01 -1.9848194779547188e+00 -4.3008775262011172e+00 2.3160580482463988e+00 411 9.9951465770092298e+01 9.9888305982131826e+01 -5.2315598157568133e-01 -1.9826607665685057e+02 9.9999999999999986e+01 -1.9826607665685061e+00 -4.3016181190845213e+00 2.3189573525160148e+00 412 9.9963709188232627e+01 9.9900994657135129e+01 -5.2913099631323113e-01 -1.9836069706275757e+02 1.0000000000000000e+02 -1.9836069706275756e+00 -4.2997509951053079e+00 2.3161440244777318e+00 413 9.9970700909339456e+01 9.9933144377747482e+01 -5.3674450482173541e-01 -1.9864831023767971e+02 9.9999999999999986e+01 -1.9864831023767975e+00 -4.3059613108130117e+00 2.3194782084362147e+00 414 9.9962067669045652e+01 1.0036454999966573e+02 -5.2745992687163490e-01 -1.9912793769047880e+02 9.9999999999999986e+01 -1.9912793769047885e+00 -4.3115326770367908e+00 2.3202533001320029e+00 415 9.9967922423651331e+01 9.9917851147829865e+01 -5.3353448716564034e-01 -1.9889748862674008e+02 9.9999999999999986e+01 -1.9889748862674013e+00 -4.3100820929732375e+00 2.3211072067058360e+00 416 9.9979837154042258e+01 9.9947291969513742e+01 -5.4030206531970182e-01 -1.9853898649292071e+02 9.9999999999999986e+01 -1.9853898649292074e+00 -4.3179216871542563e+00 2.3325318222250480e+00 417 9.9941995014541433e+01 9.9868540876938795e+01 -5.2604606546125510e-01 -1.9890631012858188e+02 1.0000000000000000e+02 -1.9890631012858189e+00 -4.3174420561135358e+00 2.3283789548277172e+00 418 9.9984340908370683e+01 9.9950687657908446e+01 -5.4050315974225660e-01 -1.9788587984540109e+02 9.9999999999999986e+01 -1.9788587984540114e+00 -4.3131865061577850e+00 2.3343277077037730e+00 419 9.9983999963385003e+01 9.9953065563701557e+01 -5.5836798398844201e-01 -1.9754521146931705e+02 1.0000000000000001e+02 -1.9754521146931703e+00 -4.3081850970602202e+00 2.3327329823670508e+00 420 9.9931530675539150e+01 9.9876370915916141e+01 -5.2242311193142821e-01 -1.9712565892961868e+02 1.0000000000000001e+02 -1.9712565892961864e+00 -4.3065843266562309e+00 2.3353277373600441e+00 421 9.9986504271750107e+01 9.9926298953386876e+01 -5.2417328865651791e-01 -1.9743338545098675e+02 1.0000000000000004e+02 -1.9743338545098665e+00 -4.3070306792588484e+00 2.3326968247489819e+00 422 9.9957455917346778e+01 9.9902493787137999e+01 -5.0794191407857825e-01 -1.9663432348975840e+02 1.0000000000000003e+02 -1.9663432348975833e+00 -4.2974363416206831e+00 2.3310931067230998e+00 423 9.9972084885193198e+01 1.0035415722721980e+02 -5.1462659013824164e-01 -1.9675767107606268e+02 9.9999999999999972e+01 -1.9675767107606275e+00 -4.3023555876048842e+00 2.3347788768442559e+00 424 9.9987483984847060e+01 9.9961468065284336e+01 -5.2411790186905749e-01 -1.9669377028250315e+02 1.0000000000000003e+02 -1.9669377028250308e+00 -4.3015400388288390e+00 2.3346023360038077e+00 425 9.9982736698241808e+01 9.9943214313568092e+01 -5.2822967761860617e-01 -1.9707753225908255e+02 1.0000000000000000e+02 -1.9707753225908256e+00 -4.2982619805556181e+00 2.3274866579647919e+00 426 9.9949010951872111e+01 9.9961628011448084e+01 -5.0287298101908984e-01 -1.9652188699763491e+02 1.0000000000000001e+02 -1.9652188699763489e+00 -4.2961573518480511e+00 2.3309384818717032e+00 427 9.9981186874402141e+01 1.0025427854362539e+02 -5.1198032011400119e-01 -1.9673881784499446e+02 1.0000000000000000e+02 -1.9673881784499445e+00 -4.2868587190609881e+00 2.3194705406110434e+00 428 9.9984249509266817e+01 9.9962155548081526e+01 -5.2296307171159195e-01 -1.9723442461949847e+02 9.9999999999999943e+01 -1.9723442461949858e+00 -4.2876169878639798e+00 2.3152727416689936e+00 429 9.9965584949152202e+01 9.9916734533246114e+01 -5.1562610003893017e-01 -1.9688947255574584e+02 1.0000000000000000e+02 -1.9688947255574585e+00 -4.2821261239242379e+00 2.3132313983667809e+00 430 9.9979498698182951e+01 9.9948791304995339e+01 -5.2983257267721073e-01 -1.9758835860538110e+02 1.0000000000000000e+02 -1.9758835860538111e+00 -4.2919950857167652e+00 2.3161114996629535e+00 431 9.9922987874004065e+01 9.9848455549514526e+01 -5.0053758516110924e-01 -1.9482012598282913e+02 1.0000000000000000e+02 -1.9482012598282914e+00 -4.2834875198058127e+00 2.3352862599775213e+00 432 9.9975208468728198e+01 9.9895175554730500e+01 -5.0966043677309492e-01 -1.9603904180455220e+02 9.9999999999999986e+01 -1.9603904180455223e+00 -4.2999106683623616e+00 2.3395202503168395e+00 433 9.9927887415096833e+01 9.9838718106312555e+01 -5.1781420676830436e-01 -1.9676660409341150e+02 1.0000000000000000e+02 -1.9676660409341151e+00 -4.2931446887640918e+00 2.3254786478299772e+00 434 9.9962905875047525e+01 9.9919109350693404e+01 -5.4116712027192504e-01 -1.9776204231148455e+02 9.9999999999999986e+01 -1.9776204231148460e+00 -4.3016375425181117e+00 2.3240171194032659e+00 435 9.9947921259191048e+01 9.9882524272990281e+01 -5.2053683378633986e-01 -1.9619472350642400e+02 1.0000000000000001e+02 -1.9619472350642397e+00 -4.3026937563768124e+00 2.3407465213125724e+00 436 9.9950179449137920e+01 9.9871449139185657e+01 -5.1513774093279763e-01 -1.9687886890130406e+02 9.9999999999999986e+01 -1.9687886890130410e+00 -4.3049870727126311e+00 2.3361983836995903e+00 437 9.9959755492521069e+01 9.9915534858664159e+01 -5.1149913586213758e-01 -1.9587689106804547e+02 1.0000000000000000e+02 -1.9587689106804547e+00 -4.3020933676017821e+00 2.3433244569213270e+00 438 9.9968711962013259e+01 9.9919670844659635e+01 -5.2160066404718819e-01 -1.9611476698278386e+02 1.0000000000000000e+02 -1.9611476698278387e+00 -4.3066044520557085e+00 2.3454567822278705e+00 439 9.9959538637029141e+01 1.0029438070232371e+02 -5.0853613948864229e-01 -1.9527680026298538e+02 1.0000000000000000e+02 -1.9527680026298537e+00 -4.3072184051060391e+00 2.3544504024761852e+00 440 9.9963259194464356e+01 9.9911268502666786e+01 -4.9730600890583576e-01 -1.9550658904904702e+02 1.0000000000000003e+02 -1.9550658904904696e+00 -4.3004390270496904e+00 2.3453731365592216e+00 441 9.9974454173962314e+01 9.9943739181056216e+01 -5.0705590901931918e-01 -1.9585549248655533e+02 1.0000000000000001e+02 -1.9585549248655529e+00 -4.2970892800265510e+00 2.3385343551609985e+00 442 9.9973145745585271e+01 9.9930391307156611e+01 -5.0227054915603087e-01 -1.9561107162684303e+02 9.9999999999999986e+01 -1.9561107162684306e+00 -4.3010738242475464e+00 2.3449631079791149e+00 443 9.9957394781684386e+01 9.9888448956735118e+01 -5.0978185394644826e-01 -1.9677649501174690e+02 1.0000000000000000e+02 -1.9677649501174690e+00 -4.3036814863543205e+00 2.3359165362368506e+00 444 9.9938573950106203e+01 9.9859923316095390e+01 -5.2240691110883486e-01 -1.9605516826613930e+02 1.0000000000000003e+02 -1.9605516826613925e+00 -4.3015778891493328e+00 2.3410262064879408e+00 445 9.9950949973039044e+01 9.9864671282421128e+01 -5.0327357856350075e-01 -1.9596267802729525e+02 9.9999999999999972e+01 -1.9596267802729532e+00 -4.3146727931813880e+00 2.3550460129084350e+00 446 9.9955882598059802e+01 9.9927595005040189e+01 -5.1706412358689091e-01 -1.9610087138469643e+02 1.0000000000000003e+02 -1.9610087138469636e+00 -4.3145987376682990e+00 2.3535900238213361e+00 447 9.9936780417137896e+01 9.9835761885669982e+01 -4.8570811604021114e-01 -1.9616924903451874e+02 1.0000000000000001e+02 -1.9616924903451871e+00 -4.3001375565293474e+00 2.3384450661841596e+00 448 9.9992144598906606e+01 9.9966613959355328e+01 -5.1371596940002606e-01 -1.9655289852838385e+02 1.0000000000000000e+02 -1.9655289852838385e+00 -4.3041403555578830e+00 2.3386113702740436e+00 449 9.9969126345028116e+01 9.9955593835245111e+01 -5.2045287314840682e-01 -1.9669873025037759e+02 1.0000000000000000e+02 -1.9669873025037761e+00 -4.3021484947765440e+00 2.3351611922727673e+00 450 9.9973289973554060e+01 9.9920127215024607e+01 -5.1688679418363104e-01 -1.9669668044790961e+02 1.0000000000000000e+02 -1.9669668044790962e+00 -4.3048773096904229e+00 2.3379105052113269e+00 451 9.9964295234704309e+01 9.9914619437103099e+01 -5.0953604327863566e-01 -1.9607628685064498e+02 1.0000000000000001e+02 -1.9607628685064495e+00 -4.2988623290525858e+00 2.3380994605461378e+00 452 9.9938247156543767e+01 9.9842769240619205e+01 -4.8635567827463977e-01 -1.9521383711842105e+02 9.9999999999999972e+01 -1.9521383711842113e+00 -4.2971255024383810e+00 2.3449871312541690e+00 453 9.9973255771048372e+01 9.9923721376291795e+01 -5.1111844855404620e-01 -1.9530808258276684e+02 1.0000000000000001e+02 -1.9530808258276682e+00 -4.2981476798624367e+00 2.3450668540347683e+00 454 9.9943480445344903e+01 1.0036502662805178e+02 -5.0055734379453731e-01 -1.9590641207151660e+02 9.9999999999999986e+01 -1.9590641207151664e+00 -4.3047915484840917e+00 2.3457274277689262e+00 455 9.9964136010707634e+01 1.0033528038568743e+02 -5.0067333428847716e-01 -1.9618442335369667e+02 9.9999999999999986e+01 -1.9618442335369670e+00 -4.3020948260984113e+00 2.3402505925614441e+00 456 9.9961400721920185e+01 9.9927172775285129e+01 -5.0010527143357963e-01 -1.9637660159165861e+02 1.0000000000000000e+02 -1.9637660159165862e+00 -4.2921233339876066e+00 2.3283573180710202e+00 457 9.9969459527666345e+01 9.9922428610492275e+01 -5.1067804788325799e-01 -1.9692042788424033e+02 1.0000000000000000e+02 -1.9692042788424033e+00 -4.3042578708270227e+00 2.3350535919846203e+00 458 9.9989182370792903e+01 9.9976188834276257e+01 -5.2944462590175256e-01 -1.9722801011410212e+02 1.0000000000000003e+02 -1.9722801011410205e+00 -4.2989104393374031e+00 2.3266303381963822e+00 459 9.9967831681960774e+01 9.9939407243027432e+01 -5.2494830169198770e-01 -1.9785955789595562e+02 1.0000000000000000e+02 -1.9785955789595562e+00 -4.2985754482792400e+00 2.3199798693196834e+00 460 9.9972605307135893e+01 9.9932196907402030e+01 -5.2732078619493261e-01 -1.9745214254119000e+02 1.0000000000000001e+02 -1.9745214254118997e+00 -4.2960330798964090e+00 2.3215116544845089e+00 461 9.9965501010868380e+01 9.9917005176170463e+01 -5.2531986781748585e-01 -1.9679152416894445e+02 1.0000000000000001e+02 -1.9679152416894441e+00 -4.2926860194877774e+00 2.3247707777983342e+00 462 9.9957766584951003e+01 9.9900672870380788e+01 -5.1016315142790114e-01 -1.9648384049674596e+02 1.0000000000000003e+02 -1.9648384049674590e+00 -4.2997666383739306e+00 2.3349282334064725e+00 463 9.9971817246148134e+01 9.9916079227062781e+01 -5.0373957052627816e-01 -1.9630496674749887e+02 9.9999999999999986e+01 -1.9630496674749891e+00 -4.2932988107044583e+00 2.3302491432294694e+00 464 9.9975117802794699e+01 9.9942052367250398e+01 -5.0188991025339869e-01 -1.9633757940514309e+02 9.9999999999999972e+01 -1.9633757940514316e+00 -4.3008637649031298e+00 2.3374879708516985e+00 465 9.9989887118624907e+01 9.9973706289941660e+01 -5.2130510254765217e-01 -1.9653325166882126e+02 9.9999999999999986e+01 -1.9653325166882130e+00 -4.2985305714233215e+00 2.3331980547351092e+00 466 9.9977039227575233e+01 9.9960902593819526e+01 -5.2266330108754155e-01 -1.9701900281713230e+02 1.0000000000000000e+02 -1.9701900281713232e+00 -4.2946463395653840e+00 2.3244563113940608e+00 467 9.9966734816866918e+01 9.9922404936787757e+01 -5.2163298993856322e-01 -1.9616036101047700e+02 9.9999999999999972e+01 -1.9616036101047707e+00 -4.2940438392524474e+00 2.3324402291476769e+00 468 9.9967135133342481e+01 9.9895840659944184e+01 -5.2241380592696562e-01 -1.9667046479661778e+02 9.9999999999999986e+01 -1.9667046479661783e+00 -4.3028431392426807e+00 2.3361384912765022e+00 469 9.9937784577900473e+01 9.9865997665666129e+01 -4.9695835354865520e-01 -1.9669050788654337e+02 1.0000000000000000e+02 -1.9669050788654339e+00 -4.3098188142526190e+00 2.3429137353871847e+00 470 9.9987368097834420e+01 9.9941989728547867e+01 -5.0835343435681590e-01 -1.9700304372038354e+02 9.9999999999999986e+01 -1.9700304372038357e+00 -4.3064978941176726e+00 2.3364674569138359e+00 471 9.9978036252527147e+01 9.9961325543711837e+01 -5.1123003751832874e-01 -1.9634559073534538e+02 9.9999999999999986e+01 -1.9634559073534541e+00 -4.3107504851795841e+00 2.3472945778261303e+00 472 9.9987584514472900e+01 9.9963463043861196e+01 -5.2085286362316729e-01 -1.9593990239020891e+02 1.0000000000000000e+02 -1.9593990239020891e+00 -4.3015547236636023e+00 2.3421556997615136e+00 473 9.9969963493714587e+01 9.9903255555611182e+01 -5.1083831028548687e-01 -1.9538594815547785e+02 9.9999999999999986e+01 -1.9538594815547790e+00 -4.3011803997628313e+00 2.3473209182080517e+00 474 9.9940143221156646e+01 9.9870216238665819e+01 -4.8449525174868463e-01 -1.9592649575770380e+02 1.0000000000000001e+02 -1.9592649575770378e+00 -4.2998105182817179e+00 2.3405455607046797e+00 475 9.9974253222274513e+01 9.9935282900502244e+01 -4.9467797146264880e-01 -1.9659878348814041e+02 1.0000000000000001e+02 -1.9659878348814037e+00 -4.2992537275773692e+00 2.3332658926959651e+00 476 9.9991709073061699e+01 9.9978344881560261e+01 -5.2002389124541737e-01 -1.9624945823192331e+02 9.9999999999999986e+01 -1.9624945823192335e+00 -4.2952315161416932e+00 2.3327369338224591e+00 477 9.9949802185990507e+01 9.9891253113892091e+01 -5.0280813931439727e-01 -1.9584864502024956e+02 1.0000000000000000e+02 -1.9584864502024957e+00 -4.2954044421183131e+00 2.3369179919158176e+00 478 9.9974859795864020e+01 9.9922740335380837e+01 -5.1788826256987697e-01 -1.9614125552610025e+02 9.9999999999999986e+01 -1.9614125552610029e+00 -4.2910207515156076e+00 2.3296081962546054e+00 479 9.9955936584379103e+01 9.9912584062556945e+01 -4.9918466688601759e-01 -1.9601150226419961e+02 9.9999999999999986e+01 -1.9601150226419966e+00 -4.2902713885256407e+00 2.3301563658836444e+00 480 9.9972243219579738e+01 9.9917120685344315e+01 -5.0610758364407193e-01 -1.9599668408829646e+02 1.0000000000000001e+02 -1.9599668408829642e+00 -4.2907297947411678e+00 2.3307629538582035e+00 481 9.9970148700411315e+01 9.9955217985048392e+01 -5.1660842993285849e-01 -1.9641198962240128e+02 1.0000000000000003e+02 -1.9641198962240121e+00 -4.2926772724178273e+00 2.3285573761938143e+00 482 9.9948314295554979e+01 9.9892315339170239e+01 -5.0117383303632268e-01 -1.9750432355934961e+02 1.0000000000000000e+02 -1.9750432355934961e+00 -4.2888179615798672e+00 2.3137747259863715e+00 483 9.9974447230999019e+01 9.9940927495622745e+01 -5.2433827140780587e-01 -1.9736755052472176e+02 1.0000000000000003e+02 -1.9736755052472170e+00 -4.3012004673275532e+00 2.3275249620803362e+00 484 9.9973666176157806e+01 9.9918464561660073e+01 -5.2306516636177058e-01 -1.9763668736769603e+02 1.0000000000000001e+02 -1.9763668736769600e+00 -4.3025591454404850e+00 2.3261922717635248e+00 485 9.9962022534294533e+01 9.9896430862726049e+01 -5.1638969199912799e-01 -1.9831702586919454e+02 1.0000000000000004e+02 -1.9831702586919444e+00 -4.3073489299521786e+00 2.3241786712602353e+00 486 9.9985795877524666e+01 9.9969565896268904e+01 -5.4145558042586261e-01 -1.9820712099258776e+02 9.9999999999999986e+01 -1.9820712099258779e+00 -4.3053274697070760e+00 2.3232562597811977e+00 487 9.9982661376632933e+01 9.9932267045252473e+01 -5.6490957146254395e-01 -1.9884976603994366e+02 1.0000000000000000e+02 -1.9884976603994367e+00 -4.3043115005932746e+00 2.3158138401938384e+00 488 9.9914012309263512e+01 9.9803572266620321e+01 -5.3478274467668718e-01 -1.9736979327657963e+02 1.0000000000000000e+02 -1.9736979327657964e+00 -4.3024718898114642e+00 2.3287739570456676e+00 489 9.9956112913986985e+01 9.9863301815167503e+01 -5.2429874795566078e-01 -1.9773456334062226e+02 9.9999999999999986e+01 -1.9773456334062229e+00 -4.3070225138284952e+00 2.3296768804222721e+00 490 9.9964538279249155e+01 9.9906705280526609e+01 -5.3202379664283339e-01 -1.9793580512843471e+02 1.0000000000000000e+02 -1.9793580512843472e+00 -4.3113853485235740e+00 2.3320272972392280e+00 491 9.9965879045007497e+01 9.9921241168311326e+01 -5.3042306420814767e-01 -1.9854333561236146e+02 9.9999999999999972e+01 -1.9854333561236153e+00 -4.3074542332367418e+00 2.3220208771131272e+00 492 9.9928043339682290e+01 9.9858064131734480e+01 -5.3729453106282643e-01 -1.9765391351310427e+02 1.0000000000000001e+02 -1.9765391351310424e+00 -4.3122411592291687e+00 2.3357020240981274e+00 493 9.9956074246029019e+01 9.9817112862626360e+01 -5.3434337425905709e-01 -1.9789669678444835e+02 9.9999999999999986e+01 -1.9789669678444839e+00 -4.3049679748259431e+00 2.3260010069814583e+00 494 9.9956180346754863e+01 9.9891199529014401e+01 -5.2766373432634117e-01 -1.9689476982485147e+02 9.9999999999999986e+01 -1.9689476982485150e+00 -4.3099611742400414e+00 2.3410134759915264e+00 495 9.9964082057661457e+01 9.9902397979389079e+01 -5.1731295223201368e-01 -1.9716283632317496e+02 9.9999999999999986e+01 -1.9716283632317499e+00 -4.3082579780558001e+00 2.3366296148240506e+00 496 9.9992216190445859e+01 9.9969599750416180e+01 -5.3167912833415631e-01 -1.9737864362292882e+02 1.0000000000000001e+02 -1.9737864362292878e+00 -4.3038273420515916e+00 2.3300409058223042e+00 497 9.9956668817359173e+01 9.9813306828311866e+01 -5.0977077943539917e-01 -1.9690406642292561e+02 9.9999999999999986e+01 -1.9690406642292564e+00 -4.3071683777080336e+00 2.3381277134787766e+00 498 9.9967336634364415e+01 9.9605103330157220e+01 -5.1535716819692623e-01 -1.9679789906265802e+02 1.0000000000000001e+02 -1.9679789906265799e+00 -4.3061453352048229e+00 2.3381663445782426e+00 499 9.9970885467344743e+01 9.9931918584159632e+01 -5.1610529783955039e-01 -1.9684496923131653e+02 9.9999999999999986e+01 -1.9684496923131656e+00 -4.3045252928342457e+00 2.3360756005210797e+00 500 9.9971616432068956e+01 9.9898505814399783e+01 -5.1583446576430525e-01 -1.9675780226734042e+02 1.0000000000000000e+02 -1.9675780226734043e+00 -4.3058129071698774e+00 2.3382348844964720e+00 501 9.9962852147643176e+01 9.9915543575953805e+01 -5.0607633776989736e-01 -1.9666659193424096e+02 9.9999999999999986e+01 -1.9666659193424099e+00 -4.2997497176560877e+00 2.3330837983136781e+00 502 9.9976939722433443e+01 9.9902488556883625e+01 -5.1260870854521556e-01 -1.9671136708103967e+02 1.0000000000000000e+02 -1.9671136708103967e+00 -4.3064648375161934e+00 2.3393511667057960e+00 503 9.9969893760528123e+01 9.9931909220023044e+01 -5.0576695880386968e-01 -1.9657708262752047e+02 1.0000000000000000e+02 -1.9657708262752047e+00 -4.3028046022888473e+00 2.3370337760136426e+00 504 9.9980822182279553e+01 9.9955254194433763e+01 -5.1879725298297896e-01 -1.9651580562171262e+02 1.0000000000000000e+02 -1.9651580562171262e+00 -4.3079676326173937e+00 2.3428095764002674e+00 505 9.9974471999813403e+01 9.9944611038539293e+01 -5.1363301116339988e-01 -1.9688859832181026e+02 1.0000000000000000e+02 -1.9688859832181027e+00 -4.3037242033734184e+00 2.3348382201553153e+00 506 9.9968142333709466e+01 9.9931252498842923e+01 -5.0750660563525796e-01 -1.9687149744280148e+02 1.0000000000000000e+02 -1.9687149744280148e+00 -4.3031282022679855e+00 2.3344132278399701e+00 507 9.9991333627584297e+01 9.9963064853623251e+01 -5.1834737032566591e-01 -1.9666843615527836e+02 9.9999999999999986e+01 -1.9666843615527840e+00 -4.3001676832823588e+00 2.3334833217295752e+00 508 9.9962477063087888e+01 9.9906738839547785e+01 -5.0150477960273276e-01 -1.9647345621933900e+02 9.9999999999999972e+01 -1.9647345621933907e+00 -4.2940361367773967e+00 2.3293015745840058e+00 509 9.9981054643867651e+01 9.9959821752732068e+01 -5.1796329849069733e-01 -1.9664431521890921e+02 1.0000000000000000e+02 -1.9664431521890922e+00 -4.2894341901453084e+00 2.3229910379562173e+00 510 9.9974927641164186e+01 9.9959464578439992e+01 -5.1004458631318639e-01 -1.9666201102155256e+02 1.0000000000000001e+02 -1.9666201102155252e+00 -4.2970482381020059e+00 2.3304281278864805e+00 511 9.9996985674626401e+01 9.9967968524694385e+01 -5.2894653511179701e-01 -1.9660157273316904e+02 1.0000000000000000e+02 -1.9660157273316905e+00 -4.2935743433544955e+00 2.3275586160228050e+00 512 9.9936855352960194e+01 9.9872695218593776e+01 -4.9604045392603691e-01 -1.9604113588956940e+02 1.0000000000000001e+02 -1.9604113588956937e+00 -4.2946624718365793e+00 2.3342511129408852e+00 513 9.9982988548529988e+01 9.9949625307344547e+01 -5.1328640082733457e-01 -1.9654183238995509e+02 1.0000000000000000e+02 -1.9654183238995508e+00 -4.2849443142309438e+00 2.3195259903313934e+00 514 9.9967258922582701e+01 9.9934531421502257e+01 -5.0694408533094226e-01 -1.9658429084734752e+02 1.0000000000000001e+02 -1.9658429084734750e+00 -4.2908579804546347e+00 2.3250150719811598e+00 515 9.9964681341886504e+01 1.0039154759981928e+02 -5.0972377340304631e-01 -1.9670387049807184e+02 1.0000000000000000e+02 -1.9670387049807183e+00 -4.2899166071191450e+00 2.3228779021384263e+00 516 9.9977584174211387e+01 9.9944031519220559e+01 -5.1771468437536639e-01 -1.9644324264828234e+02 1.0000000000000001e+02 -1.9644324264828230e+00 -4.2999664940081024e+00 2.3355340675252796e+00 517 9.9953684485063945e+01 9.9911288665621257e+01 -5.1107279850595688e-01 -1.9709819932908826e+02 9.9999999999999972e+01 -1.9709819932908834e+00 -4.2948548702657625e+00 2.3238728769748791e+00 518 1.0000220003899327e+02 9.9980848393523630e+01 -5.3526981210622071e-01 -1.9747007784833102e+02 1.0000000000000001e+02 -1.9747007784833099e+00 -4.2970989000954329e+00 2.3223981216121232e+00 519 9.9960215957772959e+01 9.9917002601799339e+01 -5.2647052069063760e-01 -1.9732140019646991e+02 1.0000000000000001e+02 -1.9732140019646989e+00 -4.3017254094195216e+00 2.3285114074548230e+00 520 9.9968865139563420e+01 9.9900474219159534e+01 -5.2502103582064930e-01 -1.9749646004078085e+02 1.0000000000000001e+02 -1.9749646004078081e+00 -4.2982255262949725e+00 2.3232609258871650e+00 521 9.9975432740183550e+01 9.9955463517949411e+01 -5.2908609053507094e-01 -1.9808041567170505e+02 9.9999999999999972e+01 -1.9808041567170513e+00 -4.2968853037153050e+00 2.3160811469982545e+00 522 9.9983598420982233e+01 9.9941309231914744e+01 -5.4281563439018876e-01 -1.9805477560249901e+02 9.9999999999999986e+01 -1.9805477560249904e+00 -4.3020442639866792e+00 2.3214965079616880e+00 523 9.9950638841926974e+01 9.9883004809303003e+01 -5.1783324998323466e-01 -1.9771129100681694e+02 1.0000000000000000e+02 -1.9771129100681695e+00 -4.2982794461810396e+00 2.3211665361128708e+00 524 9.9999636864746606e+01 9.9988445672439056e+01 -5.4636432735256668e-01 -1.9693337740151912e+02 1.0000000000000001e+02 -1.9693337740151908e+00 -4.3035303341962363e+00 2.3341965601810455e+00 525 9.9942020098111840e+01 9.9874879775669129e+01 -5.1611972305504961e-01 -1.9672489032615761e+02 1.0000000000000000e+02 -1.9672489032615761e+00 -4.3018685492236362e+00 2.3346196459620594e+00 526 9.9975963159916816e+01 9.9918293071407106e+01 -5.2092488234382139e-01 -1.9672156905828552e+02 1.0000000000000000e+02 -1.9672156905828553e+00 -4.3025737634223109e+00 2.3353580728394561e+00 527 9.9956597425771321e+01 9.9924508687796134e+01 -5.0614665997942565e-01 -1.9649687642414210e+02 1.0000000000000000e+02 -1.9649687642414211e+00 -4.3077971399289101e+00 2.3428283756874886e+00 528 9.9974668218924037e+01 9.9933903849148152e+01 -5.0580964761137337e-01 -1.9686531876381352e+02 1.0000000000000001e+02 -1.9686531876381348e+00 -4.3036974023137526e+00 2.3350442146756185e+00 529 9.9977904824392368e+01 9.9919178822850412e+01 -5.0282777410353841e-01 -1.9691649108837427e+02 1.0000000000000000e+02 -1.9691649108837428e+00 -4.3007822786878158e+00 2.3316173678040735e+00 530 9.9990671119945191e+01 9.9970058727341026e+01 -5.2917253157507149e-01 -1.9668472049095215e+02 9.9999999999999957e+01 -1.9668472049095223e+00 -4.2984221978860724e+00 2.3315749929765506e+00 531 9.9966316245370621e+01 9.9950864932119217e+01 -5.4264013860051685e-01 -1.9813708656350772e+02 9.9999999999999986e+01 -1.9813708656350777e+00 -4.3079811679815565e+00 2.3266103023464790e+00 532 9.9911520555115899e+01 9.9812368450874715e+01 -5.0388777701928122e-01 -1.9736433199789573e+02 9.9999999999999986e+01 -1.9736433199789578e+00 -4.3022395175420263e+00 2.3285961975630687e+00 533 9.9997511798228302e+01 9.9975439556593528e+01 -5.2492853619437285e-01 -1.9739597886475860e+02 9.9999999999999986e+01 -1.9739597886475864e+00 -4.3099127859217354e+00 2.3359529972741493e+00 534 9.9966279547099873e+01 1.0005262405691971e+02 -5.3202661856593381e-01 -1.9709859516019557e+02 9.9999999999999986e+01 -1.9709859516019561e+00 -4.2997438521366123e+00 2.3287579005346566e+00 535 9.9953900031743629e+01 1.0040311193237154e+02 -5.1177115320564703e-01 -1.9664476904133832e+02 9.9999999999999972e+01 -1.9664476904133839e+00 -4.2994082237793423e+00 2.3329605333659580e+00 536 9.9963652596649467e+01 9.9915104462013531e+01 -5.1225667222800364e-01 -1.9715387450221155e+02 9.9999999999999986e+01 -1.9715387450221158e+00 -4.2966849826539812e+00 2.3251462376318655e+00 537 9.9983934962529730e+01 9.9943221375601169e+01 -5.2678043107444450e-01 -1.9835798090813975e+02 9.9999999999999986e+01 -1.9835798090813979e+00 -4.2889928440002505e+00 2.3054130349188529e+00 538 9.9956285590635503e+01 9.9890897640268875e+01 -5.2211574703652441e-01 -1.9783388294719080e+02 1.0000000000000001e+02 -1.9783388294719078e+00 -4.2848888694045391e+00 2.3065500399326311e+00 539 9.9956461732643561e+01 9.9887853725791757e+01 -5.1874102504573083e-01 -1.9693896096972989e+02 9.9999999999999972e+01 -1.9693896096972996e+00 -4.2914772373159504e+00 2.3220876276186515e+00 540 9.9976389541152002e+01 9.9949627105170890e+01 -5.4117460058659506e-01 -1.9762978572062360e+02 1.0000000000000000e+02 -1.9762978572062360e+00 -4.2943491329881374e+00 2.3180512757819001e+00 541 9.9927036007210887e+01 9.9813045724515376e+01 -5.2160873491632942e-01 -1.9756945632726675e+02 1.0000000000000000e+02 -1.9756945632726675e+00 -4.2875040741931638e+00 2.3118095109204955e+00 542 9.9955743969672952e+01 9.9890120317902372e+01 -5.1257022367613470e-01 -1.9832542495150921e+02 1.0000000000000004e+02 -1.9832542495150911e+00 -4.2893777498586081e+00 2.3061235003435168e+00 543 9.9968883532619785e+01 9.9920142622265232e+01 -5.1788374900621470e-01 -1.9760899397352603e+02 1.0000000000000001e+02 -1.9760899397352600e+00 -4.3024414502224166e+00 2.3263515104871573e+00 544 9.9997829936974966e+01 1.0041636842981166e+02 -5.4534843429011615e-01 -1.9803971967823784e+02 1.0000000000000000e+02 -1.9803971967823786e+00 -4.3004023312364055e+00 2.3200051344540276e+00 545 9.9949921773596429e+01 9.9901084586537934e+01 -5.2740103809497774e-01 -1.9799982720272908e+02 9.9999999999999972e+01 -1.9799982720272915e+00 -4.3030212636607654e+00 2.3230229916334739e+00 546 9.9969594950158623e+01 9.9913655292165927e+01 -5.2566360253777278e-01 -1.9803635466907059e+02 1.0000000000000000e+02 -1.9803635466907059e+00 -4.2959529490265442e+00 2.3155894023358390e+00 547 9.9982259955635769e+01 9.9941261648430938e+01 -5.4154873413481686e-01 -1.9773049963569525e+02 9.9999999999999957e+01 -1.9773049963569533e+00 -4.2901346035866403e+00 2.3128296072296872e+00 548 9.9962537347717188e+01 9.9910761964114755e+01 -5.2594792034339088e-01 -1.9727718866887662e+02 9.9999999999999986e+01 -1.9727718866887665e+00 -4.2930930372868819e+00 2.3203211505981152e+00 549 9.9967722451476135e+01 9.9913035207519755e+01 -5.1933208950500276e-01 -1.9700237367598953e+02 1.0000000000000001e+02 -1.9700237367598950e+00 -4.2899892037306380e+00 2.3199654669707437e+00 550 9.9966645164755988e+01 9.9905609767947340e+01 -5.1116106316769405e-01 -1.9824174644598173e+02 1.0000000000000000e+02 -1.9824174644598174e+00 -4.2875165893413287e+00 2.3050991248815125e+00 551 9.9983375820455237e+01 9.9942542282914971e+01 -5.4497232142622021e-01 -1.9812227841091070e+02 9.9999999999999986e+01 -1.9812227841091072e+00 -4.2868710389851188e+00 2.3056482548760115e+00 552 9.9928572289607530e+01 9.9820431319345076e+01 -5.2816894838628403e-01 -1.9725587478715047e+02 1.0000000000000000e+02 -1.9725587478715048e+00 -4.2914654704416941e+00 2.3189067225701887e+00 553 9.9968852167484130e+01 9.9892539625931860e+01 -5.3285049072773194e-01 -1.9731525525235480e+02 1.0000000000000001e+02 -1.9731525525235478e+00 -4.2957267388505480e+00 2.3225741863270000e+00 554 9.9952324789854501e+01 9.9862905185529868e+01 -5.3998438218410805e-01 -1.9703960997947360e+02 1.0000000000000000e+02 -1.9703960997947361e+00 -4.2993069812989466e+00 2.3289108815042106e+00 555 9.9962146663595490e+01 9.9911348956840797e+01 -5.2783824398671997e-01 -1.9761050106130497e+02 1.0000000000000003e+02 -1.9761050106130491e+00 -4.3027524988571457e+00 2.3266474882440971e+00 556 9.9976923746242491e+01 9.9928003518960011e+01 -5.2644469989416076e-01 -1.9727727886290091e+02 1.0000000000000001e+02 -1.9727727886290087e+00 -4.3034019097468406e+00 2.3306291211178318e+00 557 9.9966384351408308e+01 1.0042448793177054e+02 -5.1817994642756127e-01 -1.9792531125787738e+02 1.0000000000000001e+02 -1.9792531125787736e+00 -4.2984776376960943e+00 2.3192245251173209e+00 558 9.9967106156354987e+01 9.9934637467839636e+01 -5.1695373935776101e-01 -1.9753422512476402e+02 9.9999999999999986e+01 -1.9753422512476406e+00 -4.3038583875895569e+00 2.3285161363419156e+00 559 9.9987176543458759e+01 1.0043572850341009e+02 -5.2890372660930218e-01 -1.9750115105930035e+02 1.0000000000000003e+02 -1.9750115105930028e+00 -4.3044874726067341e+00 2.3294759620137326e+00 560 9.9966271171282770e+01 9.9922605519314445e+01 -5.2612544843273157e-01 -1.9746085238623616e+02 1.0000000000000000e+02 -1.9746085238623616e+00 -4.3044705383107393e+00 2.3298620144483784e+00 561 9.9966463150300697e+01 9.9929713707726265e+01 -5.1551191104986560e-01 -1.9761662663200164e+02 9.9999999999999986e+01 -1.9761662663200168e+00 -4.3116802146184803e+00 2.3355139482984644e+00 562 9.9992300920402272e+01 9.9988946980175896e+01 -5.3635150399043008e-01 -1.9750015863626948e+02 1.0000000000000000e+02 -1.9750015863626948e+00 -4.3128542340467728e+00 2.3378526476840795e+00 563 9.9965318665191845e+01 9.9917577014843303e+01 -5.1805389785024436e-01 -1.9796903226755057e+02 1.0000000000000003e+02 -1.9796903226755052e+00 -4.3161773483757857e+00 2.3364870257002814e+00 564 9.9983825070550864e+01 9.9963431847914379e+01 -5.2643325449717704e-01 -1.9817784715854449e+02 9.9999999999999986e+01 -1.9817784715854454e+00 -4.3108529861004348e+00 2.3290745145149887e+00 565 9.9959173132311392e+01 9.9898772956222530e+01 -5.0628257371057306e-01 -1.9802268716914949e+02 1.0000000000000003e+02 -1.9802268716914944e+00 -4.3114974335004224e+00 2.3312705618089282e+00 566 9.9999365513982852e+01 9.9971753869796444e+01 -5.2638783440756054e-01 -1.9812107516476345e+02 1.0000000000000000e+02 -1.9812107516476345e+00 -4.3059400979304332e+00 2.3247293462827994e+00 567 9.9979953480445857e+01 9.9984724939076060e+01 -5.4200212042409845e-01 -1.9813025756328318e+02 1.0000000000000000e+02 -1.9813025756328317e+00 -4.3089102484224089e+00 2.3276076727895778e+00 568 9.9959796149008582e+01 9.9927833173491194e+01 -5.4010506888398779e-01 -1.9760063276048896e+02 1.0000000000000000e+02 -1.9760063276048896e+00 -4.3035250711074484e+00 2.3275187435025586e+00 569 9.9962322787546043e+01 9.9902016940125762e+01 -5.3255750524934431e-01 -1.9845157622752023e+02 1.0000000000000001e+02 -1.9845157622752021e+00 -4.3092105074857212e+00 2.3246947452105191e+00 570 9.9933044049457337e+01 9.9835488055727367e+01 -5.0753121335623275e-01 -1.9844257550050980e+02 9.9999999999999986e+01 -1.9844257550050983e+00 -4.3078432989882076e+00 2.3234175439831088e+00 571 9.9978136710922030e+01 9.9935813309326420e+01 -5.3424935735128221e-01 -1.9770423540491873e+02 1.0000000000000000e+02 -1.9770423540491875e+00 -4.3075639614469310e+00 2.3305216073977428e+00 572 9.9962021942561861e+01 9.9882998106612874e+01 -5.1991404931938412e-01 -1.9738183932780257e+02 1.0000000000000000e+02 -1.9738183932780258e+00 -4.3107708199606929e+00 2.3369524266826671e+00 573 9.9979547552597325e+01 9.9948064688353270e+01 -5.2458463324747140e-01 -1.9761266427892662e+02 1.0000000000000001e+02 -1.9761266427892659e+00 -4.3047430850608484e+00 2.3286164422715823e+00 574 9.9969274810910250e+01 9.9913294211742482e+01 -5.1927145304526023e-01 -1.9767178903187926e+02 1.0000000000000001e+02 -1.9767178903187923e+00 -4.2978591590852364e+00 2.3211412687664454e+00 575 9.9963077066396409e+01 9.9940652480141949e+01 -5.3105401401540275e-01 -1.9727465524902038e+02 1.0000000000000001e+02 -1.9727465524902035e+00 -4.2962516162420084e+00 2.3235050637518047e+00 576 9.9935879361996228e+01 1.0030641281776775e+02 -5.2530617947836156e-01 -1.9612528929075788e+02 9.9999999999999986e+01 -1.9612528929075792e+00 -4.2900976606431378e+00 2.3288447677355602e+00 577 9.9954543220853992e+01 9.9890667200554958e+01 -5.1949164665912861e-01 -1.9578021291101572e+02 1.0000000000000000e+02 -1.9578021291101573e+00 -4.2934219813283940e+00 2.3356198522182372e+00 578 9.9960619192607524e+01 9.9907580048507029e+01 -5.1300274534947476e-01 -1.9605602034147350e+02 1.0000000000000001e+02 -1.9605602034147347e+00 -4.2930013156817637e+00 2.3324411122670288e+00 579 9.9972913059600202e+01 9.9945340128382554e+01 -5.1839114848885315e-01 -1.9713627956662421e+02 1.0000000000000001e+02 -1.9713627956662418e+00 -4.2945295139609243e+00 2.3231667182946825e+00 580 9.9993373084533431e+01 9.9953500613091407e+01 -5.2922477247733546e-01 -1.9649069650931278e+02 9.9999999999999957e+01 -1.9649069650931286e+00 -4.2981241919024225e+00 2.3332172268092943e+00 581 9.9947401509850394e+01 9.9892753274868781e+01 -5.0418335937939807e-01 -1.9697620787887712e+02 1.0000000000000001e+02 -1.9697620787887709e+00 -4.2962852221559631e+00 2.3265231433671927e+00 582 9.9974153315624449e+01 9.9932255780789887e+01 -5.1107157478117771e-01 -1.9686941296304627e+02 1.0000000000000001e+02 -1.9686941296304625e+00 -4.2972620248216336e+00 2.3285678951911706e+00 583 9.9977767511318604e+01 9.9960472240990612e+01 -5.1632938874310608e-01 -1.9593928485566801e+02 1.0000000000000000e+02 -1.9593928485566801e+00 -4.3018969566735574e+00 2.3425041081168767e+00 584 9.9983521208577628e+01 9.9946481181538658e+01 -5.1672639724680014e-01 -1.9589617342185701e+02 1.0000000000000000e+02 -1.9589617342185701e+00 -4.3014873477717943e+00 2.3425256135532240e+00 585 9.9967214758528741e+01 9.9914341269388856e+01 -5.0090129349177825e-01 -1.9619668560284998e+02 1.0000000000000000e+02 -1.9619668560285000e+00 -4.3007768367078958e+00 2.3388099806793963e+00 586 9.9977394986800164e+01 1.0039714497263358e+02 -5.0762802610152413e-01 -1.9618876295879349e+02 1.0000000000000000e+02 -1.9618876295879348e+00 -4.3029260675739893e+00 2.3410384379860534e+00 587 9.9971376705486918e+01 9.9934619580238561e+01 -4.9890133467406889e-01 -1.9654135909386636e+02 1.0000000000000001e+02 -1.9654135909386634e+00 -4.2974489608770607e+00 2.3320353699383984e+00 588 9.9982564512836689e+01 9.9959131550262740e+01 -5.1560229782100819e-01 -1.9625818341472873e+02 1.0000000000000003e+02 -1.9625818341472867e+00 -4.2874312489443351e+00 2.3248494147970482e+00 589 9.9968311260394429e+01 9.9945075540279760e+01 -5.1549023358832702e-01 -1.9625023450266974e+02 1.0000000000000003e+02 -1.9625023450266967e+00 -4.2867348904740812e+00 2.3242325454473858e+00 590 9.9962605661299804e+01 9.9916546447747947e+01 -5.0696013717275468e-01 -1.9611880133259564e+02 1.0000000000000001e+02 -1.9611880133259560e+00 -4.2899555324028871e+00 2.3287675190769317e+00 591 9.9990404296364346e+01 9.9969782951368671e+01 -5.1705913202397291e-01 -1.9633680033176705e+02 1.0000000000000003e+02 -1.9633680033176699e+00 -4.2958834700969453e+00 2.3325154667792760e+00 592 9.9974760247328888e+01 9.9952606935487438e+01 -5.2397584123988439e-01 -1.9653555744431003e+02 1.0000000000000001e+02 -1.9653555744430999e+00 -4.3034413768594773e+00 2.3380858024163778e+00 593 9.9958981989350974e+01 9.9904174186292011e+01 -5.1354118274475502e-01 -1.9745561816207368e+02 1.0000000000000003e+02 -1.9745561816207362e+00 -4.3070340985129691e+00 2.3324779168922332e+00 594 9.9996602715620384e+01 9.9977151012110539e+01 -5.3268178706195402e-01 -1.9738372814092040e+02 9.9999999999999986e+01 -1.9738372814092044e+00 -4.3095856009699780e+00 2.3357483195607744e+00 595 9.9975349341560559e+01 9.9951814373367654e+01 -5.3899566170806834e-01 -1.9757290381724616e+02 1.0000000000000003e+02 -1.9757290381724608e+00 -4.3098751835934417e+00 2.3341461454209815e+00 596 9.9944636645869423e+01 9.9888346348031305e+01 -5.1406302240652524e-01 -1.9734463906722942e+02 1.0000000000000000e+02 -1.9734463906722943e+00 -4.3029818007682366e+00 2.3295354100959424e+00 597 9.9976262557026843e+01 9.9935006471811576e+01 -5.2573613769599647e-01 -1.9690275187219578e+02 1.0000000000000000e+02 -1.9690275187219579e+00 -4.3122754222552002e+00 2.3432479035332419e+00 598 9.9958049619477038e+01 1.0038315712075557e+02 -5.1510200661466476e-01 -1.9711794550547486e+02 1.0000000000000000e+02 -1.9711794550547488e+00 -4.3077696485601216e+00 2.3365901935053732e+00 599 9.9971498082354401e+01 9.9934392139787775e+01 -5.2080495515989489e-01 -1.9786759247069372e+02 9.9999999999999986e+01 -1.9786759247069376e+00 -4.3086667345616156e+00 2.3299908098546771e+00 600 9.9978691087224817e+01 9.9946905596289525e+01 -5.2623345988105485e-01 -1.9713500018016509e+02 1.0000000000000004e+02 -1.9713500018016499e+00 -4.3111923496414191e+00 2.3398423478397694e+00 601 9.9954742096333177e+01 9.9896773676369904e+01 -5.1621285295236796e-01 -1.9728957912541657e+02 1.0000000000000001e+02 -1.9728957912541654e+00 -4.3085866643153796e+00 2.3356908730612140e+00 602 9.9972411983437183e+01 9.9927733905587360e+01 -5.1512596425229784e-01 -1.9670310774122348e+02 1.0000000000000001e+02 -1.9670310774122344e+00 -4.3101408780495714e+00 2.3431098006373374e+00 603 9.9972920896743020e+01 9.9920194829897909e+01 -5.0811149285803459e-01 -1.9651362569103614e+02 1.0000000000000000e+02 -1.9651362569103614e+00 -4.3126784609193249e+00 2.3475422040089633e+00 604 9.9982240049891033e+01 9.9953804403206121e+01 -5.1920424284584255e-01 -1.9697080741612027e+02 1.0000000000000000e+02 -1.9697080741612027e+00 -4.3056078853099820e+00 2.3358998111487801e+00 605 9.9974070592581867e+01 9.9959581472218929e+01 -5.2417090945356348e-01 -1.9677430645456579e+02 1.0000000000000001e+02 -1.9677430645456575e+00 -4.3023581104891901e+00 2.3346150459435324e+00 606 9.9969175202345767e+01 9.9938027783153018e+01 -5.2526626077499161e-01 -1.9665045533324985e+02 9.9999999999999986e+01 -1.9665045533324990e+00 -4.3031466938957870e+00 2.3366421405632880e+00 607 9.9964801220146398e+01 9.9905610768090000e+01 -5.1700346437429845e-01 -1.9631591516108656e+02 1.0000000000000003e+02 -1.9631591516108651e+00 -4.3022714213633417e+00 2.3391122697524755e+00 608 9.9968614965314686e+01 9.9922360862141403e+01 -5.0659001019433036e-01 -1.9618786219507567e+02 1.0000000000000001e+02 -1.9618786219507565e+00 -4.3031030527266854e+00 2.3412244307759300e+00 609 9.9992353220714165e+01 9.9964923024772006e+01 -5.1548626364931271e-01 -1.9651605806915131e+02 1.0000000000000000e+02 -1.9651605806915131e+00 -4.3013356616495964e+00 2.3361750809580832e+00 610 9.9953732325290090e+01 9.9913756715656277e+01 -5.1280478993454759e-01 -1.9621531693927253e+02 1.0000000000000001e+02 -1.9621531693927250e+00 -4.3011406640841292e+00 2.3389874946914038e+00 611 9.9979845748262491e+01 9.9922805219409639e+01 -5.1784403731372886e-01 -1.9680669238239744e+02 9.9999999999999972e+01 -1.9680669238239752e+00 -4.3040045529064823e+00 2.3359376290825078e+00 612 9.9969821403093718e+01 9.9926787533496721e+01 -5.1680991457877667e-01 -1.9722745597023734e+02 1.0000000000000001e+02 -1.9722745597023732e+00 -4.3039779410281831e+00 2.3317033813258101e+00 613 9.9962249353038374e+01 9.9921906064434523e+01 -5.2642036587602992e-01 -1.9735778846790606e+02 1.0000000000000000e+02 -1.9735778846790606e+00 -4.2905706910784378e+00 2.3169928063993770e+00 614 9.9911786850515753e+01 9.9816474908875506e+01 -4.8845692881741726e-01 -1.9718823985250643e+02 1.0000000000000000e+02 -1.9718823985250644e+00 -4.2989224970756066e+00 2.3270400985505417e+00 615 9.9986934746268858e+01 9.9932362126555532e+01 -5.2531218383189981e-01 -1.9704112565872600e+02 9.9999999999999986e+01 -1.9704112565872605e+00 -4.2912731867468503e+00 2.3208619301595901e+00 616 9.9936780242469467e+01 1.0042974205789172e+02 -5.0674525915479685e-01 -1.9674818465319558e+02 1.0000000000000000e+02 -1.9674818465319559e+00 -4.2906793174625379e+00 2.3231974709305829e+00 617 9.9973919372170187e+01 9.9905297153462115e+01 -5.0788897383928711e-01 -1.9693989447550749e+02 1.0000000000000001e+02 -1.9693989447550746e+00 -4.2949941255489783e+00 2.3255951807939037e+00 618 9.9982520029154188e+01 9.9953117903148069e+01 -5.2234615860667344e-01 -1.9729799153423218e+02 1.0000000000000001e+02 -1.9729799153423215e+00 -4.2979601759450494e+00 2.3249802606027274e+00 619 9.9884292706039687e+01 9.9789877211614126e+01 -4.9277566774762616e-01 -1.9913374481132462e+02 1.0000000000000000e+02 -1.9913374481132462e+00 -4.2849385196183309e+00 2.2936010715050852e+00 620 9.9913048092714803e+01 9.9876207319538949e+01 -5.2995718722826679e-01 -1.9704403725374638e+02 1.0000000000000000e+02 -1.9704403725374640e+00 -4.2731325623356806e+00 2.3026921897982167e+00 621 9.9952340404241895e+01 1.0027575976191001e+02 -5.1817405471009825e-01 -1.9667678442084372e+02 1.0000000000000001e+02 -1.9667678442084369e+00 -4.2837275807876685e+00 2.3169597365792325e+00 622 9.9960907698697497e+01 9.9914302029405533e+01 -5.1805165367733275e-01 -1.9645315520249892e+02 1.0000000000000000e+02 -1.9645315520249893e+00 -4.2739052348693214e+00 2.3093736828443316e+00 623 9.9972676169250988e+01 9.9901195445187227e+01 -5.3432879799276012e-01 -1.9664256120087271e+02 1.0000000000000001e+02 -1.9664256120087267e+00 -4.2804833315831345e+00 2.3140577195744072e+00 624 9.9948869710802242e+01 9.9898590968228078e+01 -5.2513652788809007e-01 -1.9735469155815036e+02 9.9999999999999986e+01 -1.9735469155815040e+00 -4.2806606068623436e+00 2.3071136912808394e+00 625 9.9946945661488385e+01 9.9863619350838349e+01 -5.0312926716647710e-01 -1.9628197241022363e+02 9.9999999999999986e+01 -1.9628197241022367e+00 -4.2879018330509364e+00 2.3250821089486990e+00 626 9.9979291869903577e+01 9.9939079431067952e+01 -5.1738628174196166e-01 -1.9697911160727557e+02 1.0000000000000001e+02 -1.9697911160727555e+00 -4.2777622632315948e+00 2.3079711471588400e+00 627 9.9956407325824188e+01 9.9896184014232276e+01 -5.2021046134344906e-01 -1.9717591403133974e+02 1.0000000000000003e+02 -1.9717591403133967e+00 -4.2868558659412823e+00 2.3150967256278858e+00 628 9.9944066681734554e+01 1.0034543725291087e+02 -5.5352509140932693e-01 -1.9796282690040289e+02 1.0000000000000000e+02 -1.9796282690040290e+00 -4.2858016343699727e+00 2.3061733653659444e+00 629 9.9913763672718432e+01 9.9831049263067328e+01 -5.4275853490448178e-01 -1.9851774700586574e+02 9.9999999999999986e+01 -1.9851774700586577e+00 -4.2890790213971313e+00 2.3039015513384729e+00 630 9.9942382582835364e+01 9.9835948468004105e+01 -5.2786521787762097e-01 -1.9752565767649648e+02 1.0000000000000001e+02 -1.9752565767649646e+00 -4.2873836524387574e+00 2.3121270756737924e+00 631 9.9940887061331765e+01 9.9886325647810963e+01 -5.2078680386180420e-01 -1.9799528774412576e+02 1.0000000000000000e+02 -1.9799528774412576e+00 -4.2821429215513405e+00 2.3021900441100831e+00 632 9.9955711699438496e+01 9.9891385831467147e+01 -5.2009396339615765e-01 -1.9739897223646733e+02 1.0000000000000003e+02 -1.9739897223646727e+00 -4.2905114746310851e+00 2.3165217522664121e+00 633 9.9954953393240103e+01 9.9906479535291439e+01 -5.1065560249149944e-01 -1.9693477902019166e+02 9.9999999999999986e+01 -1.9693477902019170e+00 -4.2925987157487908e+00 2.3232509255468736e+00 634 9.9980409702505355e+01 9.9945191898435539e+01 -5.2226322794725621e-01 -1.9668924716187971e+02 9.9999999999999972e+01 -1.9668924716187979e+00 -4.2941959920060118e+00 2.3273035203872139e+00 635 9.9966969083790289e+01 9.9925732671962749e+01 -5.2783808425784096e-01 -1.9647195505419438e+02 1.0000000000000003e+02 -1.9647195505419432e+00 -4.2948290665240565e+00 2.3301095159821128e+00 636 9.9963324363733861e+01 9.9907174221034040e+01 -5.1399083218967412e-01 -1.9590269558575375e+02 1.0000000000000000e+02 -1.9590269558575375e+00 -4.2924222907717215e+00 2.3333953349141847e+00 637 9.9964418373659854e+01 9.9901871642293628e+01 -5.1495891878496791e-01 -1.9579882500154216e+02 1.0000000000000001e+02 -1.9579882500154213e+00 -4.2951551429285333e+00 2.3371668929131117e+00 638 9.9939261128545823e+01 1.0074983013258482e+02 -5.0087894243481124e-01 -1.9538858498475366e+02 1.0000000000000003e+02 -1.9538858498475360e+00 -4.2984250552723706e+00 2.3445392054248346e+00 639 9.9956061974963120e+01 9.9888713889235220e+01 -4.8748787510941499e-01 -1.9532743794859863e+02 1.0000000000000000e+02 -1.9532743794859864e+00 -4.3027415131121147e+00 2.3494671336261272e+00 640 9.9995452934891617e+01 9.9958531145438371e+01 -5.0514148004256287e-01 -1.9505793468218320e+02 1.0000000000000004e+02 -1.9505793468218311e+00 -4.3040889234586865e+00 2.3535095766368554e+00 641 9.9969353667682284e+01 9.9924018828960143e+01 -4.9364032305353545e-01 -1.9542562046028155e+02 1.0000000000000003e+02 -1.9542562046028149e+00 -4.3069454324614087e+00 2.3526892278585940e+00 642 9.9996394005547614e+01 9.9981054241806405e+01 -5.1601085753974751e-01 -1.9520484843967083e+02 9.9999999999999986e+01 -1.9520484843967087e+00 -4.3057388894938464e+00 2.3536904050971383e+00 643 9.9966313875215263e+01 9.9946920963739572e+01 -5.0617710073320532e-01 -1.9491140720182310e+02 1.0000000000000000e+02 -1.9491140720182309e+00 -4.3049067706859292e+00 2.3557926986676980e+00 644 9.9970895492549943e+01 9.9917284854224462e+01 -4.9523980931623252e-01 -1.9486334139056910e+02 9.9999999999999972e+01 -1.9486334139056918e+00 -4.3050669953416856e+00 2.3564335814359940e+00 645 9.9987951147276547e+01 9.9949209124059607e+01 -4.9798507104118156e-01 -1.9475677264511171e+02 9.9999999999999986e+01 -1.9475677264511175e+00 -4.3018851095031989e+00 2.3543173830520812e+00 646 9.9970059624089060e+01 9.9932987478367366e+01 -4.9424170112024257e-01 -1.9474291603608393e+02 1.0000000000000001e+02 -1.9474291603608389e+00 -4.3048085567834393e+00 2.3573793964226009e+00 647 9.9976601980152523e+01 9.9955024092310794e+01 -5.0177220421691004e-01 -1.9465433914841049e+02 1.0000000000000000e+02 -1.9465433914841048e+00 -4.3074476376101360e+00 2.3609042461260299e+00 648 9.9972928187435016e+01 9.9919514950180499e+01 -4.9496546976008782e-01 -1.9542677151957301e+02 1.0000000000000000e+02 -1.9542677151957302e+00 -4.3016579265456194e+00 2.3473902113498895e+00 649 9.9985500792647258e+01 9.9966374232304901e+01 -5.0655502071403902e-01 -1.9504488249763631e+02 9.9999999999999972e+01 -1.9504488249763638e+00 -4.2989339330893044e+00 2.3484851081129405e+00 650 9.9979937194767430e+01 9.9953767768346040e+01 -5.0516337292002678e-01 -1.9563859829056304e+02 1.0000000000000000e+02 -1.9563859829056305e+00 -4.2854369888935064e+00 2.3290510059878775e+00 651 9.9968158269965699e+01 9.9912659653549184e+01 -5.2363638042027039e-01 -1.9620635113730069e+02 1.0000000000000000e+02 -1.9620635113730069e+00 -4.2841240179394733e+00 2.3220605065664666e+00 652 9.9957193658574866e+01 9.9890216204403458e+01 -5.1378558969787558e-01 -1.9651388885062724e+02 1.0000000000000001e+02 -1.9651388885062722e+00 -4.2834184988234298e+00 2.3182796103171577e+00 653 9.9957747135563480e+01 9.9884038457502157e+01 -5.0806452517266576e-01 -1.9670573533220036e+02 1.0000000000000001e+02 -1.9670573533220033e+00 -4.2930751575486896e+00 2.3260178042266868e+00 654 9.9974726952026018e+01 9.9918360802793913e+01 -5.1152937845947177e-01 -1.9625762588296911e+02 1.0000000000000001e+02 -1.9625762588296909e+00 -4.2891424655101522e+00 2.3265662066804609e+00 655 9.9970960295185819e+01 9.9923860319895070e+01 -5.0861224380433501e-01 -1.9680346666566703e+02 1.0000000000000001e+02 -1.9680346666566699e+00 -4.2878184152128282e+00 2.3197837485561585e+00 656 9.9985483374771633e+01 9.9963175161917007e+01 -5.3081898113140591e-01 -1.9725994340136552e+02 1.0000000000000000e+02 -1.9725994340136552e+00 -4.2845389785043260e+00 2.3119395444906714e+00 657 9.9942102137751021e+01 9.9867760427631254e+01 -5.1304134641994714e-01 -1.9699889527647875e+02 9.9999999999999972e+01 -1.9699889527647882e+00 -4.2915743380480773e+00 2.3215853852832895e+00 658 9.9968209931073545e+01 9.9892221163078389e+01 -5.1272316028133902e-01 -1.9719376476373063e+02 9.9999999999999986e+01 -1.9719376476373067e+00 -4.2928893134776471e+00 2.3209516658403411e+00 659 9.9958455888821405e+01 9.9894792935088560e+01 -5.0498369088492245e-01 -1.9699224862402889e+02 9.9999999999999986e+01 -1.9699224862402893e+00 -4.2977509788312682e+00 2.3278284925909789e+00 660 9.9993536032515465e+01 9.9969788627318181e+01 -5.1851711354511509e-01 -1.9688055605034521e+02 9.9999999999999986e+01 -1.9688055605034525e+00 -4.2969305481068458e+00 2.3281249876033931e+00 661 9.9946575722818849e+01 9.9901843723292274e+01 -5.0499042354798851e-01 -1.9634386975463366e+02 1.0000000000000001e+02 -1.9634386975463363e+00 -4.2886075501108829e+00 2.3251688525645458e+00 662 9.9983437953503781e+01 9.9957353311178792e+01 -5.1904045839308888e-01 -1.9634129299423120e+02 9.9999999999999986e+01 -1.9634129299423124e+00 -4.2921700270572982e+00 2.3287570971149854e+00 663 9.9986479329170180e+01 1.0035036346892669e+02 -5.2437979986680305e-01 -1.9745391945729500e+02 9.9999999999999972e+01 -1.9745391945729507e+00 -4.2900005302485020e+00 2.3154613356755513e+00 664 9.9955628721082846e+01 9.9906065332993819e+01 -5.1033939382560700e-01 -1.9758954286002390e+02 1.0000000000000001e+02 -1.9758954286002386e+00 -4.2956239872528075e+00 2.3197285586525695e+00 665 9.9983033526869917e+01 9.9939698589631860e+01 -5.1944393934499644e-01 -1.9768083165165802e+02 1.0000000000000000e+02 -1.9768083165165804e+00 -4.2892719908059016e+00 2.3124636742893214e+00 666 9.9968995244917267e+01 9.9916403947296700e+01 -5.2091922170750016e-01 -1.9763226643219465e+02 1.0000000000000000e+02 -1.9763226643219467e+00 -4.2891418295938140e+00 2.3128191652718675e+00 667 9.9986845113930855e+01 9.9966386328095126e+01 -5.3147193524116809e-01 -1.9675114152345941e+02 1.0000000000000001e+02 -1.9675114152345938e+00 -4.2904537918600187e+00 2.3229423766254258e+00 668 9.9959412180068909e+01 9.9900711599655949e+01 -5.1825723906654542e-01 -1.9623983792092181e+02 1.0000000000000000e+02 -1.9623983792092181e+00 -4.2874927789945101e+00 2.3250943997852924e+00 669 9.9965487510727471e+01 1.0032862533645739e+02 -5.0758841990113257e-01 -1.9633071762654134e+02 1.0000000000000001e+02 -1.9633071762654131e+00 -4.2855156461055666e+00 2.3222084698401537e+00 670 9.9962673919918458e+01 9.9914017284454758e+01 -5.0403920867303398e-01 -1.9650193430196813e+02 1.0000000000000000e+02 -1.9650193430196814e+00 -4.2819257892569667e+00 2.3169064462372848e+00 671 9.9990567390207559e+01 9.9974967964046527e+01 -5.2597602628955187e-01 -1.9691365741223731e+02 1.0000000000000000e+02 -1.9691365741223732e+00 -4.2827581849435665e+00 2.3136216108211944e+00 672 9.9968431045427067e+01 9.9921223083307908e+01 -5.1497645933398339e-01 -1.9692682633185331e+02 9.9999999999999986e+01 -1.9692682633185334e+00 -4.2759418537990070e+00 2.3066735904804734e+00 673 9.9976813226151549e+01 1.0040110016393193e+02 -5.3936995099922591e-01 -1.9823793237370941e+02 1.0000000000000001e+02 -1.9823793237370939e+00 -4.2780123995169443e+00 2.2956330757798504e+00 674 9.9942932280757105e+01 9.9886984626877464e+01 -5.2026922207059778e-01 -1.9802664079627309e+02 1.0000000000000000e+02 -1.9802664079627308e+00 -4.2879492087432487e+00 2.3076828007805186e+00 675 9.9953209444254554e+01 9.9884760364199664e+01 -5.1681895732673000e-01 -1.9788318646937648e+02 1.0000000000000001e+02 -1.9788318646937646e+00 -4.2959579966449040e+00 2.3171261319511394e+00 676 9.9961642351900309e+01 1.0028380733535811e+02 -5.3193584532936944e-01 -1.9800422824122145e+02 1.0000000000000000e+02 -1.9800422824122146e+00 -4.2915212872803536e+00 2.3114790048681391e+00 677 9.9955657046511874e+01 9.9921850281343140e+01 -5.1793186033534910e-01 -1.9752389176249685e+02 1.0000000000000001e+02 -1.9752389176249681e+00 -4.2953664848139725e+00 2.3201275671890045e+00 678 9.9970890933899980e+01 9.9913712616908143e+01 -5.1294938984142435e-01 -1.9644995578539641e+02 1.0000000000000000e+02 -1.9644995578539641e+00 -4.2954331295057164e+00 2.3309335716517525e+00 679 9.9977989273122404e+01 9.9943155916701969e+01 -5.2064652742946871e-01 -1.9722720290375571e+02 1.0000000000000000e+02 -1.9722720290375571e+00 -4.2924556672424350e+00 2.3201836382048784e+00 680 9.9936188622234667e+01 9.9859535421079343e+01 -4.9966152187629270e-01 -1.9585571827102515e+02 1.0000000000000000e+02 -1.9585571827102515e+00 -4.2985686805572207e+00 2.3400114978469690e+00 681 9.9978616604013510e+01 9.9935672509346972e+01 -5.0817214487367157e-01 -1.9571833556754879e+02 1.0000000000000001e+02 -1.9571833556754876e+00 -4.2996854364133483e+00 2.3425020807378614e+00 682 9.9964412273629080e+01 9.9927323837622367e+01 -5.0971436749589705e-01 -1.9655797102201385e+02 1.0000000000000003e+02 -1.9655797102201378e+00 -4.3014078666013518e+00 2.3358281563812131e+00 683 9.9976318366738312e+01 9.9949667263142871e+01 -5.1645606568505198e-01 -1.9737674885487635e+02 1.0000000000000001e+02 -1.9737674885487633e+00 -4.3053257050568829e+00 2.3315582165081206e+00 684 9.9911851467693921e+01 9.9810192620523850e+01 -4.9904643641601998e-01 -1.9537788231605290e+02 9.9999999999999986e+01 -1.9537788231605295e+00 -4.3016328361385430e+00 2.3478540129780141e+00 685 9.9906655137588984e+01 1.0013016531009634e+02 -5.2780442089803747e-01 -1.9623225185287845e+02 9.9999999999999972e+01 -1.9623225185287851e+00 -4.3115986764373071e+00 2.3492761579085211e+00 686 9.9967983126623636e+01 9.9933489554619925e+01 -5.2237278028536105e-01 -1.9649001244144227e+02 9.9999999999999972e+01 -1.9649001244144235e+00 -4.3114144581595832e+00 2.3465143337451604e+00 687 9.9942961385928541e+01 9.9904341361308468e+01 -5.0905979426920822e-01 -1.9708330561233782e+02 1.0000000000000001e+02 -1.9708330561233780e+00 -4.3170179038456906e+00 2.3461848477223124e+00 688 9.9984052000011090e+01 9.9921988472262726e+01 -5.2797638307113892e-01 -1.9713835497840884e+02 9.9999999999999986e+01 -1.9713835497840888e+00 -4.3119560519329019e+00 2.3405725021488135e+00 689 9.9956004845280177e+01 9.9926477765728691e+01 -5.2703730817423211e-01 -1.9650124408770748e+02 9.9999999999999986e+01 -1.9650124408770751e+00 -4.3087478349940538e+00 2.3437353941169783e+00 690 9.9952910489855199e+01 9.9887379501712175e+01 -5.0438020661941585e-01 -1.9691497177745379e+02 1.0000000000000003e+02 -1.9691497177745372e+00 -4.3048874015779521e+00 2.3357376838034147e+00 691 9.9947049946699195e+01 9.9883606033506965e+01 -5.1261838770632229e-01 -1.9615196536188941e+02 1.0000000000000000e+02 -1.9615196536188941e+00 -4.3060389540946522e+00 2.3445193004757576e+00 692 9.9961553236449006e+01 9.9869790294695704e+01 -5.1418896168868600e-01 -1.9672714149750215e+02 1.0000000000000001e+02 -1.9672714149750212e+00 -4.3044419689689031e+00 2.3371705539938827e+00 693 9.9975896658721453e+01 1.0030269615945534e+02 -5.1810816186782960e-01 -1.9645746069009351e+02 1.0000000000000001e+02 -1.9645746069009349e+00 -4.3101052597760177e+00 2.3455306528750826e+00 694 9.9957698028139902e+01 9.9901691983186197e+01 -4.9986009268306986e-01 -1.9597674412338867e+02 9.9999999999999986e+01 -1.9597674412338870e+00 -4.3068403899108372e+00 2.3470729486769497e+00 695 9.9976074844072272e+01 9.9948923502851429e+01 -5.0899592541881744e-01 -1.9670576581050898e+02 1.0000000000000000e+02 -1.9670576581050898e+00 -4.2993941028427392e+00 2.3323364447376496e+00 696 9.9960750295653042e+01 9.9910210790885671e+01 -5.0374568758485361e-01 -1.9629186947919325e+02 9.9999999999999972e+01 -1.9629186947919333e+00 -4.3018742113077124e+00 2.3389555165157794e+00 697 9.9980817508411477e+01 9.9942895944436586e+01 -5.2778153292000596e-01 -1.9730251503417492e+02 9.9999999999999986e+01 -1.9730251503417495e+00 -4.3091910051190849e+00 2.3361658547773363e+00 698 9.9949956580144558e+01 9.9904310556862242e+01 -5.0971267831942602e-01 -1.9760967120944142e+02 9.9999999999999986e+01 -1.9760967120944146e+00 -4.3152783797257772e+00 2.3391816676313626e+00 699 9.9961818736057651e+01 9.9871894625900282e+01 -5.2830330710032869e-01 -1.9612291039241228e+02 1.0000000000000001e+02 -1.9612291039241225e+00 -4.3064218338055866e+00 2.3451927298814641e+00 700 9.9954337009314258e+01 9.9873500153723981e+01 -5.1301644412564373e-01 -1.9651528408193431e+02 9.9999999999999986e+01 -1.9651528408193435e+00 -4.3081414731475984e+00 2.3429886323282552e+00 701 9.9986245817467065e+01 9.9961316075217255e+01 -5.2256778436677520e-01 -1.9675883841332106e+02 1.0000000000000000e+02 -1.9675883841332107e+00 -4.3043606328565760e+00 2.3367722487233649e+00 702 9.9968197491724951e+01 9.9937878142039281e+01 -5.1723447315179105e-01 -1.9612366803149959e+02 1.0000000000000003e+02 -1.9612366803149952e+00 -4.3064022983565291e+00 2.3451656180415350e+00 703 9.9963324965384274e+01 9.9917009191332752e+01 -5.0869354397960276e-01 -1.9587830687529902e+02 9.9999999999999986e+01 -1.9587830687529906e+00 -4.3067703937115152e+00 2.3479873249585244e+00 704 9.9964005082565450e+01 9.9916790857799086e+01 -4.9960607887084485e-01 -1.9698586988393831e+02 9.9999999999999986e+01 -1.9698586988393834e+00 -4.2990623024864290e+00 2.3292036036470463e+00 705 9.9978814644552429e+01 9.9943418854144113e+01 -5.1452547713744046e-01 -1.9668749294776151e+02 1.0000000000000001e+02 -1.9668749294776149e+00 -4.3010863193662052e+00 2.3342113898885910e+00 706 9.9961006101121029e+01 9.9905691809347431e+01 -5.0882975067419156e-01 -1.9678155850832670e+02 9.9999999999999986e+01 -1.9678155850832673e+00 -4.2902423975943291e+00 2.3224268125110612e+00 707 9.9981972211575197e+01 9.9949185223545271e+01 -5.1722382452789784e-01 -1.9631829421619574e+02 9.9999999999999986e+01 -1.9631829421619578e+00 -4.2964077831502134e+00 2.3332248409882559e+00 708 9.9972489707979278e+01 9.9909885721913000e+01 -5.0654143219046832e-01 -1.9612768602180341e+02 1.0000000000000001e+02 -1.9612768602180339e+00 -4.3037419385638156e+00 2.3424650783457821e+00 709 9.9980938538732943e+01 9.9963147870829346e+01 -5.1321873064149315e-01 -1.9682134784331970e+02 1.0000000000000000e+02 -1.9682134784331971e+00 -4.3026234649845252e+00 2.3344099865513286e+00 710 9.9986006726571944e+01 9.9945969940320026e+01 -5.2602958162975477e-01 -1.9704856056680188e+02 1.0000000000000001e+02 -1.9704856056680184e+00 -4.3012384939621553e+00 2.3307528882941364e+00 711 9.9955859503377908e+01 9.9930567388391466e+01 -5.1154944490388365e-01 -1.9642291468567532e+02 9.9999999999999972e+01 -1.9642291468567539e+00 -4.3023087174636681e+00 2.3380795706069137e+00 712 9.9984306986520110e+01 9.9945422986189030e+01 -5.1571253709980258e-01 -1.9611141637364591e+02 1.0000000000000001e+02 -1.9611141637364589e+00 -4.3006737864374305e+00 2.3395596227009721e+00 713 9.9965393676073987e+01 9.9913017883801203e+01 -5.1116268263084885e-01 -1.9650625300691433e+02 9.9999999999999986e+01 -1.9650625300691438e+00 -4.2971592951738407e+00 2.3320967651046973e+00 714 9.9969850272995117e+01 9.9931717079745667e+01 -5.1316711459074549e-01 -1.9631614807295068e+02 1.0000000000000000e+02 -1.9631614807295068e+00 -4.2904199576564386e+00 2.3272584769269322e+00 715 9.9964593483851431e+01 9.9916401869332745e+01 -5.1265565052592832e-01 -1.9647265000298293e+02 1.0000000000000003e+02 -1.9647265000298286e+00 -4.2930615980149689e+00 2.3283350979851392e+00 716 9.9974638979146917e+01 9.9939419458455575e+01 -5.1783066986246828e-01 -1.9597853878190529e+02 1.0000000000000000e+02 -1.9597853878190530e+00 -4.2943746401825784e+00 2.3345892523635259e+00 717 9.9950346024818643e+01 9.9885716827649063e+01 -5.0566302968695720e-01 -1.9599849676356220e+02 1.0000000000000000e+02 -1.9599849676356220e+00 -4.2909258849757945e+00 2.3309409173401723e+00 718 9.9935361569434477e+01 9.9855979330411088e+01 -4.9921250621782504e-01 -1.9625176715727312e+02 9.9999999999999986e+01 -1.9625176715727315e+00 -4.2789894194660185e+00 2.3164717478932864e+00 719 9.9972875319874944e+01 9.9931475743739270e+01 -5.2775709614643107e-01 -1.9712548408672683e+02 1.0000000000000000e+02 -1.9712548408672683e+00 -4.2852908528555194e+00 2.3140360119882519e+00 720 9.9950219114100619e+01 9.9888395182672213e+01 -5.2236111277496688e-01 -1.9748940179033070e+02 1.0000000000000001e+02 -1.9748940179033068e+00 -4.2814366423023991e+00 2.3065426243990914e+00 721 9.9937178207670854e+01 1.0062791758528800e+02 -5.2334083298168910e-01 -1.9665541904231551e+02 1.0000000000000003e+02 -1.9665541904231545e+00 -4.2803997777149485e+00 2.3138455872917940e+00 722 9.9948371685925963e+01 9.9879919673826123e+01 -5.0564688878318564e-01 -1.9593010258571570e+02 9.9999999999999986e+01 -1.9593010258571575e+00 -4.2746690285365645e+00 2.3153680026794063e+00 723 9.9932701608848873e+01 9.9830580582012189e+01 -4.8447509368947123e-01 -1.9491069358435746e+02 9.9999999999999986e+01 -1.9491069358435751e+00 -4.2723812184242895e+00 2.3232742825807149e+00 724 9.9915030162780511e+01 9.9787545662872603e+01 -5.0862230663295127e-01 -1.9578144097079070e+02 1.0000000000000000e+02 -1.9578144097079071e+00 -4.2897260289130275e+00 2.3319116192051208e+00 725 9.9946051558163077e+01 9.9898889192856061e+01 -5.0271670201099317e-01 -1.9676418497724890e+02 1.0000000000000001e+02 -1.9676418497724888e+00 -4.2751255496979566e+00 2.3074836999254678e+00 726 9.9917142713890883e+01 9.9816117783616889e+01 -5.0420098912698796e-01 -1.9655760722705725e+02 9.9999999999999986e+01 -1.9655760722705728e+00 -4.2783184877977778e+00 2.3127424155272056e+00 727 9.9968239473752519e+01 9.9940976826558312e+01 -5.1275191801099007e-01 -1.9656629038835413e+02 1.0000000000000001e+02 -1.9656629038835409e+00 -4.2791709749922333e+00 2.3135080711086919e+00 728 9.9963019338806760e+01 9.9911966033535919e+01 -5.0428276434477626e-01 -1.9772168843846782e+02 1.0000000000000000e+02 -1.9772168843846782e+00 -4.2799259633402347e+00 2.3027090789555560e+00 729 9.9936847887317143e+01 9.9834770572372491e+01 -5.1139087530401228e-01 -1.9640139551178902e+02 1.0000000000000001e+02 -1.9640139551178899e+00 -4.2955362066600493e+00 2.3315222515421588e+00 730 9.9994551693237753e+01 9.9969098364671140e+01 -5.2287620085907249e-01 -1.9642192206664379e+02 1.0000000000000000e+02 -1.9642192206664379e+00 -4.2959162420557764e+00 2.3316970213893393e+00 731 9.9956116540929969e+01 9.9886312831299605e+01 -4.9748388414026479e-01 -1.9682387646620987e+02 1.0000000000000000e+02 -1.9682387646620987e+00 -4.2902766558652576e+00 2.3220378912031587e+00 732 9.9988239096211004e+01 9.9957676735895191e+01 -5.1904769231216341e-01 -1.9692394682333537e+02 1.0000000000000001e+02 -1.9692394682333534e+00 -4.2899462670917670e+00 2.3207067988584140e+00 733 9.9956460031473497e+01 9.9914769330741237e+01 -5.1826327720670695e-01 -1.9801299424582626e+02 1.0000000000000003e+02 -1.9801299424582619e+00 -4.2888692066405598e+00 2.3087392641822984e+00 734 9.9965801780573997e+01 9.9922831384394541e+01 -5.2171216469533499e-01 -1.9786850010660740e+02 9.9999999999999986e+01 -1.9786850010660744e+00 -4.2887137161543443e+00 2.3100287150882703e+00 735 9.9987123420105732e+01 9.9956343208862620e+01 -5.2559279132552583e-01 -1.9710470046310041e+02 1.0000000000000000e+02 -1.9710470046310042e+00 -4.2912872611091286e+00 2.3202402564781237e+00 736 9.9981630318608893e+01 9.9933507604292515e+01 -5.3093525798559094e-01 -1.9699905732212312e+02 1.0000000000000001e+02 -1.9699905732212308e+00 -4.2977484618604391e+00 2.3277578886392085e+00 737 9.9948622167792095e+01 9.9910343847245230e+01 -5.1097069688753394e-01 -1.9651820363760413e+02 1.0000000000000000e+02 -1.9651820363760413e+00 -4.2926723684816412e+00 2.3274903321056004e+00 738 9.9988644236055123e+01 9.9948116084088213e+01 -5.1773161860811667e-01 -1.9690795573115236e+02 9.9999999999999972e+01 -1.9690795573115243e+00 -4.2970806750581909e+00 2.3280011177466657e+00 739 9.9973342121894021e+01 9.9931820892760342e+01 -5.1836608526592876e-01 -1.9644676548217782e+02 1.0000000000000001e+02 -1.9644676548217779e+00 -4.3000336230390275e+00 2.3355659682172489e+00 740 9.9978615741113103e+01 9.9944044342273926e+01 -5.1859778167733539e-01 -1.9634361151236618e+02 1.0000000000000001e+02 -1.9634361151236615e+00 -4.2983334613150168e+00 2.3348973461913545e+00 741 9.9969383811171028e+01 9.9921604898940814e+01 -5.1537089520340329e-01 -1.9615566757596198e+02 9.9999999999999986e+01 -1.9615566757596203e+00 -4.2980124260129022e+00 2.3364557502532826e+00 742 9.9972675242334589e+01 9.9942870315086950e+01 -5.1082737179436699e-01 -1.9575180814471830e+02 9.9999999999999986e+01 -1.9575180814471833e+00 -4.2963727673916896e+00 2.3388546859445065e+00 743 9.9971064106640426e+01 9.9928890521423000e+01 -5.0541206221196100e-01 -1.9567642387721699e+02 1.0000000000000000e+02 -1.9567642387721700e+00 -4.3046656536446228e+00 2.3479014148724522e+00 744 9.9972557680107840e+01 9.9940555527534613e+01 -5.0378867095866098e-01 -1.9570680941975505e+02 1.0000000000000000e+02 -1.9570680941975505e+00 -4.3042433400169102e+00 2.3471752458193591e+00 745 9.9981195051905800e+01 9.9960231443842090e+01 -5.1177632722859212e-01 -1.9627814984188527e+02 1.0000000000000001e+02 -1.9627814984188523e+00 -4.3032548701331095e+00 2.3404733717142565e+00 746 9.9968244735878713e+01 9.9927153139890450e+01 -4.9964549489336246e-01 -1.9668989375304784e+02 1.0000000000000001e+02 -1.9668989375304782e+00 -4.3019570739253608e+00 2.3350581363948826e+00 747 9.9993163536792963e+01 9.9952396797240766e+01 -5.1844967596351199e-01 -1.9648694789170472e+02 1.0000000000000001e+02 -1.9648694789170469e+00 -4.3087075543844273e+00 2.3438380754673793e+00 748 9.9967911285066478e+01 9.9944803973769268e+01 -5.1000846650036469e-01 -1.9589639932747298e+02 1.0000000000000001e+02 -1.9589639932747294e+00 -4.3057421266217224e+00 2.3467781333469921e+00 749 9.9969085792737047e+01 9.9906811026443322e+01 -5.0183511239721612e-01 -1.9637739406776163e+02 1.0000000000000000e+02 -1.9637739406776162e+00 -4.3072575594024984e+00 2.3434836187248815e+00 750 9.9996909619374264e+01 1.0042473324109297e+02 -5.2072997035149426e-01 -1.9605808184312434e+02 1.0000000000000003e+02 -1.9605808184312428e+00 -4.3053826269806175e+00 2.3448018085493754e+00 751 9.9966819194440873e+01 9.9925213764541738e+01 -5.0438993702095114e-01 -1.9526620245200249e+02 1.0000000000000000e+02 -1.9526620245200250e+00 -4.3080468393492417e+00 2.3553848148292165e+00 752 9.9971897476177858e+01 9.9914944754599915e+01 -4.9601208666973112e-01 -1.9508241056677494e+02 1.0000000000000001e+02 -1.9508241056677491e+00 -4.3064142140919168e+00 2.3555901084241673e+00 753 9.9988865674055759e+01 9.9953045410841696e+01 -5.0523294713277789e-01 -1.9526056154381712e+02 1.0000000000000003e+02 -1.9526056154381706e+00 -4.2982586784865724e+00 2.3456530630484016e+00 754 9.9981238607150246e+01 9.9952325696699248e+01 -5.1163970397305270e-01 -1.9510745302973098e+02 1.0000000000000000e+02 -1.9510745302973098e+00 -4.2951171027006021e+00 2.3440425724032923e+00 755 9.9978808554455426e+01 9.9945788607886442e+01 -5.1430259292240932e-01 -1.9555295471101431e+02 9.9999999999999986e+01 -1.9555295471101435e+00 -4.3004080238587639e+00 2.3448784767486193e+00 756 9.9958872626815605e+01 9.9913415985701235e+01 -5.0633038778790085e-01 -1.9609859986508849e+02 1.0000000000000001e+02 -1.9609859986508846e+00 -4.2947471468061433e+00 2.3337611481552591e+00 757 9.9966906703324440e+01 9.9927713263360275e+01 -5.0111179191175714e-01 -1.9584522543652116e+02 1.0000000000000000e+02 -1.9584522543652116e+00 -4.3001174631301966e+00 2.3416652087649847e+00 758 9.9984166563042564e+01 9.9943253626057199e+01 -5.1230029746502503e-01 -1.9630998704417888e+02 9.9999999999999972e+01 -1.9630998704417895e+00 -4.2962361657925632e+00 2.3331362953507737e+00 759 9.9987662943087216e+01 9.9947455959864897e+01 -5.1485848537175127e-01 -1.9699577122309350e+02 9.9999999999999986e+01 -1.9699577122309353e+00 -4.2963450325642283e+00 2.3263873203332932e+00 760 9.9967748989991691e+01 9.9915517242683350e+01 -5.1312265285768810e-01 -1.9699603338490417e+02 1.0000000000000003e+02 -1.9699603338490410e+00 -4.2961414606223967e+00 2.3261811267733554e+00 761 9.9968121990830966e+01 9.9927413281881570e+01 -5.1573938558856336e-01 -1.9642227078521702e+02 1.0000000000000000e+02 -1.9642227078521703e+00 -4.3038865600289000e+00 2.3396638521767295e+00 762 9.9968594571222283e+01 9.9911822091321298e+01 -5.0815938583408882e-01 -1.9603085350560858e+02 1.0000000000000001e+02 -1.9603085350560854e+00 -4.2922176794769076e+00 2.3319091444208215e+00 763 9.9973049710270757e+01 9.9915063509913693e+01 -5.1704247171459849e-01 -1.9603730014654829e+02 9.9999999999999986e+01 -1.9603730014654832e+00 -4.2926369232643653e+00 2.3322639217988823e+00 764 9.9961411541195972e+01 1.0030104930230669e+02 -5.1212236634961616e-01 -1.9724915317983383e+02 1.0000000000000001e+02 -1.9724915317983380e+00 -4.2984961731788145e+00 2.3260046413804751e+00 765 9.9971912270122644e+01 9.9944289012048245e+01 -5.2324295813005206e-01 -1.9657819756056870e+02 1.0000000000000000e+02 -1.9657819756056869e+00 -4.2967569161111880e+00 2.3309749405055009e+00 766 9.9974795695530617e+01 9.9927551921076088e+01 -5.2155058942662580e-01 -1.9657374220133661e+02 1.0000000000000001e+02 -1.9657374220133659e+00 -4.3013687327928514e+00 2.3356313107794864e+00 767 9.9943780831361991e+01 9.9880658593402785e+01 -5.0272674489785718e-01 -1.9630462291365018e+02 1.0000000000000000e+02 -1.9630462291365018e+00 -4.2995944656924818e+00 2.3365482365559793e+00 768 9.9980657892028944e+01 9.9927454405122248e+01 -5.0750709819727269e-01 -1.9707266338923810e+02 1.0000000000000001e+02 -1.9707266338923808e+00 -4.2949997978325944e+00 2.3242731639402132e+00 769 9.9978337548834276e+01 9.9959977019910866e+01 -5.2591365532165957e-01 -1.9763058713208230e+02 1.0000000000000001e+02 -1.9763058713208226e+00 -4.3061004492900903e+00 2.3297945779692677e+00 770 9.9971713382023552e+01 9.9933313340065865e+01 -5.3405405053545163e-01 -1.9709613443043008e+02 1.0000000000000001e+02 -1.9709613443043006e+00 -4.3013249574762042e+00 2.3303636131719045e+00 771 9.9953747413537357e+01 9.9887007442677842e+01 -5.2138452564230753e-01 -1.9691151777899486e+02 1.0000000000000000e+02 -1.9691151777899487e+00 -4.3013889008465540e+00 2.3322737230566051e+00 772 9.9969242278927382e+01 9.9933070804516120e+01 -5.1940859030211173e-01 -1.9755616553360917e+02 1.0000000000000003e+02 -1.9755616553360911e+00 -4.3015912618792855e+00 2.3260296065431949e+00 773 9.9967854528521045e+01 9.9926979720425592e+01 -5.2746452673366662e-01 -1.9745984646990118e+02 1.0000000000000000e+02 -1.9745984646990118e+00 -4.3035605765941423e+00 2.3289621118951307e+00 774 9.9981350333519515e+01 9.9946699859700587e+01 -5.3183526155586425e-01 -1.9749053318860032e+02 1.0000000000000001e+02 -1.9749053318860030e+00 -4.3026235914569693e+00 2.3277182595709665e+00 775 9.9957590217393033e+01 9.9910862983460888e+01 -5.1371140309473151e-01 -1.9683028709027982e+02 9.9999999999999972e+01 -1.9683028709027990e+00 -4.3011805663793750e+00 2.3328776954765758e+00 776 9.9971190343503537e+01 9.9921774317519976e+01 -5.1501140169260284e-01 -1.9649754268674528e+02 1.0000000000000001e+02 -1.9649754268674524e+00 -4.3038803024211427e+00 2.3389048755536903e+00 777 9.9981901146325995e+01 9.9939443944672007e+01 -5.1424001650997919e-01 -1.9656556984869704e+02 1.0000000000000001e+02 -1.9656556984869700e+00 -4.3008100508622098e+00 2.3351543523752389e+00 778 9.9982003332119348e+01 9.9942785624949721e+01 -5.1640017971617247e-01 -1.9639993943438211e+02 1.0000000000000000e+02 -1.9639993943438212e+00 -4.3068623753786239e+00 2.3428629810348029e+00 779 9.9992158686018755e+01 9.9952309932721633e+01 -5.2561293051460523e-01 -1.9622798514277810e+02 9.9999999999999986e+01 -1.9622798514277813e+00 -4.3075788679157654e+00 2.3452990164879850e+00 780 9.9959428813163797e+01 9.9910510859434694e+01 -4.9984929869235295e-01 -1.9649278430407983e+02 1.0000000000000000e+02 -1.9649278430407984e+00 -4.3056976579429529e+00 2.3407698149021541e+00 781 9.9982769665849574e+01 9.9936337550527867e+01 -5.1020696628703355e-01 -1.9654497419546587e+02 1.0000000000000000e+02 -1.9654497419546588e+00 -4.3064476214542919e+00 2.3409978794996342e+00 782 9.9976235383290913e+01 9.9943466367896917e+01 -5.1242980320329135e-01 -1.9679684564939672e+02 9.9999999999999986e+01 -1.9679684564939675e+00 -4.3127998746341838e+00 2.3448314181402159e+00 783 9.9963667009872808e+01 9.9920583606011249e+01 -5.0576656136821663e-01 -1.9728997392436065e+02 9.9999999999999972e+01 -1.9728997392436072e+00 -4.3089335713452943e+00 2.3360338321016876e+00 784 9.9844080074613203e+01 9.9768626938623314e+01 -5.1023486739416579e-01 -1.9762295678956630e+02 9.9999999999999986e+01 -1.9762295678956634e+00 -4.2997329887947053e+00 2.3235034208990410e+00 785 9.9973000455025542e+01 1.0021503951535080e+02 -5.1853529251933606e-01 -1.9712282875070764e+02 1.0000000000000000e+02 -1.9712282875070763e+00 -4.3024306595347213e+00 2.3312023720276454e+00 786 9.9947972965991028e+01 9.9895837688472554e+01 -5.2993494488460613e-01 -1.9753727349684448e+02 1.0000000000000001e+02 -1.9753727349684445e+00 -4.3032369824441545e+00 2.3278642474757105e+00 787 9.9935610430655842e+01 9.9837067445990414e+01 -5.1622211018632946e-01 -1.9716154829665803e+02 1.0000000000000001e+02 -1.9716154829665800e+00 -4.3050272758863990e+00 2.3334117929198182e+00 788 9.9980932101742937e+01 9.9917542885300278e+01 -5.2070092522881239e-01 -1.9774045136201607e+02 9.9999999999999972e+01 -1.9774045136201615e+00 -4.3032682060220786e+00 2.3258636924019176e+00 789 9.9950439818106858e+01 9.9933770064465449e+01 -5.1373826359892816e-01 -1.9699267395749521e+02 1.0000000000000000e+02 -1.9699267395749522e+00 -4.3004941009541389e+00 2.3305673613791855e+00 790 9.9989398664617070e+01 9.9939888361415086e+01 -5.2391699206917153e-01 -1.9646628946696870e+02 1.0000000000000000e+02 -1.9646628946696871e+00 -4.3022142660405658e+00 2.3375513713708789e+00 791 9.9976927393508277e+01 9.9941318817564877e+01 -5.2410781171829079e-01 -1.9747056192253174e+02 1.0000000000000001e+02 -1.9747056192253172e+00 -4.3044467371945183e+00 2.3297411179692009e+00 792 9.9978986744936577e+01 9.9954594379189302e+01 -5.2723650636382402e-01 -1.9739650924332878e+02 1.0000000000000000e+02 -1.9739650924332879e+00 -4.3007253468509896e+00 2.3267602544177026e+00 793 9.9951240983493051e+01 9.9892310989572962e+01 -5.0634057571971791e-01 -1.9653626951724578e+02 1.0000000000000001e+02 -1.9653626951724577e+00 -4.2988142197402626e+00 2.3334515245678045e+00 794 9.9977085960541785e+01 9.9940117793631913e+01 -5.0697690251063698e-01 -1.9681429225864522e+02 1.0000000000000000e+02 -1.9681429225864522e+00 -4.3007928001346558e+00 2.3326498775482039e+00 795 9.9989676465348310e+01 9.9959571333737188e+01 -5.1669875113590946e-01 -1.9731363068649088e+02 9.9999999999999986e+01 -1.9731363068649093e+00 -4.2974132474913080e+00 2.3242769406263992e+00 796 9.9988757306058702e+01 9.9956883965376221e+01 -5.3275306983783854e-01 -1.9938625520587101e+02 1.0000000000000003e+02 -1.9938625520587094e+00 -4.2938184325836914e+00 2.2999558805249829e+00 797 9.9978679577725472e+01 9.9962740350480743e+01 -5.5998717073322002e-01 -1.9916337538988083e+02 9.9999999999999972e+01 -1.9916337538988089e+00 -4.3038865141830929e+00 2.3122527602842839e+00 798 9.9939258566059053e+01 9.9862260701441954e+01 -5.3197129698452261e-01 -1.9871154713197933e+02 1.0000000000000001e+02 -1.9871154713197929e+00 -4.3058631068733932e+00 2.3187476355536001e+00 799 9.9957406929474345e+01 9.9895888417374181e+01 -5.1943681303359635e-01 -1.9796111210420773e+02 1.0000000000000000e+02 -1.9796111210420773e+00 -4.3112994176482617e+00 2.3316882966061829e+00 800 9.9985787040310825e+01 9.9947301089260833e+01 -5.3245217387202959e-01 -1.9838206193096394e+02 9.9999999999999986e+01 -1.9838206193096397e+00 -4.3131560842408971e+00 2.3293354649312570e+00 801 9.9970024761420817e+01 9.9923503341759584e+01 -5.3282990582592560e-01 -1.9763273476211259e+02 1.0000000000000000e+02 -1.9763273476211261e+00 -4.3144491013669413e+00 2.3381217537458148e+00 802 9.9943406299736097e+01 9.9887910782002805e+01 -5.1245250683797661e-01 -1.9918555241508176e+02 1.0000000000000000e+02 -1.9918555241508176e+00 -4.3115825577949396e+00 2.3197270336441211e+00 803 9.9989152612716566e+01 9.9967378080748077e+01 -5.3575626352307293e-01 -1.9743825858494105e+02 9.9999999999999986e+01 -1.9743825858494108e+00 -4.3190447741389866e+00 2.3446621882895760e+00 804 9.9944633963970844e+01 9.9884501362624619e+01 -5.1561046002783462e-01 -1.9686941781015375e+02 1.0000000000000000e+02 -1.9686941781015375e+00 -4.3184503240984933e+00 2.3497561459969569e+00 805 9.9971523707613613e+01 9.9922741818502601e+01 -5.1355221192673306e-01 -1.9747978717539041e+02 9.9999999999999986e+01 -1.9747978717539045e+00 -4.3156149389290483e+00 2.3408170671751436e+00 806 9.9980929029265724e+01 9.9962521980409946e+01 -5.2618580047926844e-01 -1.9629360061102540e+02 1.0000000000000003e+02 -1.9629360061102534e+00 -4.3143400712446089e+00 2.3514040651343553e+00 807 9.9946647002468126e+01 9.9890417175881765e+01 -5.1269773373850980e-01 -1.9609040815935899e+02 9.9999999999999986e+01 -1.9609040815935903e+00 -4.3167511239154956e+00 2.3558470423219044e+00 808 9.9963499208909980e+01 9.9893186825415484e+01 -4.9999979637018194e-01 -1.9603753331526894e+02 1.0000000000000000e+02 -1.9603753331526894e+00 -4.3117710051821376e+00 2.3513956720294487e+00 809 9.9779666721240318e+01 9.9065444682132437e+01 -5.2665248940006681e-01 -1.9549964547284057e+02 9.9999999999999986e+01 -1.9549964547284060e+00 -4.3291942092316651e+00 2.3741977545032600e+00 810 9.9960194677251749e+01 9.9878736811610622e+01 -5.3129904944002337e-01 -1.9586159898685608e+02 1.0000000000000000e+02 -1.9586159898685609e+00 -4.3154064628239928e+00 2.3567904729554319e+00 811 9.9943698091184501e+01 9.9846694926614362e+01 -4.9863292193702691e-01 -1.9611496651050140e+02 1.0000000000000000e+02 -1.9611496651050140e+00 -4.3145590508387830e+00 2.3534093857337686e+00 812 9.9974906069863152e+01 9.9903628227490458e+01 -5.0867598639686251e-01 -1.9574685611034238e+02 9.9999999999999986e+01 -1.9574685611034242e+00 -4.3028437046794483e+00 2.3453751435760242e+00 813 9.9956117649415489e+01 9.9935511618036600e+01 -5.3809084944005481e-01 -1.9527100934449518e+02 1.0000000000000000e+02 -1.9527100934449519e+00 -4.3050226668743008e+00 2.3523125734293489e+00 814 9.9915046585236823e+01 9.9754428301967707e+01 -4.8693618354835461e-01 -1.9537919772838131e+02 1.0000000000000001e+02 -1.9537919772838128e+00 -4.3087868196327745e+00 2.3549948423489617e+00 815 9.9978317434049757e+01 1.0002918071835683e+02 -5.1641665490508659e-01 -1.9722610574967840e+02 1.0000000000000001e+02 -1.9722610574967836e+00 -4.3045565471409803e+00 2.3322954896441974e+00 816 9.9972393319192804e+01 1.0027854444731155e+02 -5.3161944699657626e-01 -1.9618579109192783e+02 1.0000000000000000e+02 -1.9618579109192782e+00 -4.3098828432339671e+00 2.3480249323146887e+00 817 9.9952990342945583e+01 9.9887991854240497e+01 -5.1554496135014460e-01 -1.9587305678149494e+02 1.0000000000000000e+02 -1.9587305678149494e+00 -4.3054451127029152e+00 2.3467145448879658e+00 818 9.9948939643085538e+01 9.9885688102950780e+01 -5.0166496884759104e-01 -1.9619483570113078e+02 1.0000000000000001e+02 -1.9619483570113077e+00 -4.3085876742330926e+00 2.3466393172217850e+00 819 9.9966991263571259e+01 9.9900069291357966e+01 -4.9223862653956890e-01 -1.9614261757609361e+02 1.0000000000000000e+02 -1.9614261757609361e+00 -4.3023065115300430e+00 2.3408803357691061e+00 820 9.9951965400109430e+01 1.0002240824264999e+02 -5.2390778662310122e-01 -1.9645058633072588e+02 1.0000000000000000e+02 -1.9645058633072590e+00 -4.3093396135310558e+00 2.3448337502237977e+00 821 9.9987244167698250e+01 1.0026322736781215e+02 -5.2986728326798349e-01 -1.9754574198213916e+02 9.9999999999999986e+01 -1.9754574198213921e+00 -4.3044435743916862e+00 2.3289861545702939e+00 822 9.9974503511339208e+01 9.9933087637972662e+01 -5.3310571436351140e-01 -1.9784624683217712e+02 1.0000000000000001e+02 -1.9784624683217709e+00 -4.3060089046327672e+00 2.3275464363109970e+00 823 9.9966745966860145e+01 9.9895026816951940e+01 -5.1681770774042035e-01 -1.9759942565963246e+02 1.0000000000000000e+02 -1.9759942565963247e+00 -4.3079220625835069e+00 2.3319278059871822e+00 824 9.9971823348576507e+01 9.9954184338807906e+01 -5.2032363013443050e-01 -1.9709321533088072e+02 9.9999999999999986e+01 -1.9709321533088076e+00 -4.3012595587427551e+00 2.3303274054339473e+00 825 9.9957231949400310e+01 9.9899090579147924e+01 -5.0432436331255037e-01 -1.9656788683341466e+02 1.0000000000000001e+02 -1.9656788683341464e+00 -4.2952113941724477e+00 2.3295325258383004e+00 826 9.9969515493645829e+01 9.9921402482677408e+01 -5.0179348146925040e-01 -1.9644596833926539e+02 1.0000000000000000e+02 -1.9644596833926540e+00 -4.2877982132741028e+00 2.3233385298814500e+00 827 9.9964410914178174e+01 9.9874870427844115e+01 -5.2429454436966549e-01 -1.9668067823367500e+02 1.0000000000000001e+02 -1.9668067823367497e+00 -4.2980374320468293e+00 2.3312306497100796e+00 828 9.9956637945808453e+01 9.9913398452760717e+01 -5.1795393400107748e-01 -1.9658538395551039e+02 9.9999999999999972e+01 -1.9658538395551046e+00 -4.2972243562319417e+00 2.3313705166768361e+00 829 9.9973114838334467e+01 9.9926988473222664e+01 -5.1921765465251135e-01 -1.9618723247628350e+02 9.9999999999999986e+01 -1.9618723247628354e+00 -4.2944782071419354e+00 2.3326058823790996e+00 830 9.9964721950727380e+01 9.9892465603952076e+01 -5.1226831980124699e-01 -1.9600843912704403e+02 1.0000000000000000e+02 -1.9600843912704404e+00 -4.2903287946553208e+00 2.3302444033848801e+00 831 9.9949280084716889e+01 9.9865167112860988e+01 -4.9851164623010696e-01 -1.9619528122065591e+02 1.0000000000000000e+02 -1.9619528122065593e+00 -4.2920656979845546e+00 2.3301128857779951e+00 832 9.9988075918451813e+01 1.0037716994826613e+02 -5.2043049121221630e-01 -1.9589619212553802e+02 1.0000000000000000e+02 -1.9589619212553802e+00 -4.2947771115501068e+00 2.3358151902947264e+00 833 9.9959994591308657e+01 9.9916260994707486e+01 -5.0600063383587657e-01 -1.9618207533359492e+02 9.9999999999999986e+01 -1.9618207533359495e+00 -4.2951893431103079e+00 2.3333685897743579e+00 834 9.9962894602242486e+01 9.9904304723447297e+01 -4.9909917831354478e-01 -1.9612277292241180e+02 9.9999999999999986e+01 -1.9612277292241183e+00 -4.2930767366926217e+00 2.3318490074685032e+00 835 9.9970550597137660e+01 9.9920591238394309e+01 -5.0735879258487715e-01 -1.9559064187583226e+02 1.0000000000000000e+02 -1.9559064187583226e+00 -4.2963119951548965e+00 2.3404055763965737e+00 836 9.9910345545864203e+01 1.0018432453648475e+02 -4.8047191325369998e-01 -1.9591568786628588e+02 1.0000000000000000e+02 -1.9591568786628588e+00 -4.3015109943071739e+00 2.3423541156443153e+00 837 9.9993666219160517e+01 9.9975951494838270e+01 -5.0956918084606018e-01 -1.9612414607053890e+02 1.0000000000000001e+02 -1.9612414607053887e+00 -4.3004472611965188e+00 2.3392058004911305e+00 838 9.9976848976551778e+01 9.9951952392576345e+01 -5.1170843198581983e-01 -1.9651128392726829e+02 1.0000000000000000e+02 -1.9651128392726831e+00 -4.2974171113752275e+00 2.3323042721025455e+00 839 9.9986588467573782e+01 9.9957772417432238e+01 -5.2305963935565247e-01 -1.9685945595209324e+02 1.0000000000000000e+02 -1.9685945595209324e+00 -4.2836067934176816e+00 2.3150122338967485e+00 840 9.9962630421526910e+01 9.9906107786249009e+01 -5.1323939413528297e-01 -1.9687592585044939e+02 1.0000000000000001e+02 -1.9687592585044935e+00 -4.2980018516212803e+00 2.3292425931167862e+00 841 9.9981878516597021e+01 9.9935589228270999e+01 -5.2209906511275816e-01 -1.9683165624768671e+02 1.0000000000000000e+02 -1.9683165624768670e+00 -4.3017223381302827e+00 2.3334057756534157e+00 842 9.9965241733353636e+01 9.9926366980319642e+01 -5.1855091461224068e-01 -1.9659226652810901e+02 1.0000000000000000e+02 -1.9659226652810902e+00 -4.2957638357744496e+00 2.3298411704933595e+00 843 9.9959166684143270e+01 9.9916752652415440e+01 -5.0839415876504390e-01 -1.9548213808076602e+02 9.9999999999999986e+01 -1.9548213808076607e+00 -4.2976938152563271e+00 2.3428724344486662e+00 844 9.9963071339715967e+01 9.9904026364469615e+01 -5.0161874966424580e-01 -1.9638719777057702e+02 1.0000000000000000e+02 -1.9638719777057703e+00 -4.2972734928174772e+00 2.3334015151117069e+00 845 9.9989835580542803e+01 9.9955556589842971e+01 -5.1288898981722320e-01 -1.9631726684460654e+02 1.0000000000000001e+02 -1.9631726684460651e+00 -4.3006226113852755e+00 2.3374499429392106e+00 846 9.9968053496183899e+01 9.9933287792112992e+01 -5.0557567389799329e-01 -1.9674016220585298e+02 1.0000000000000000e+02 -1.9674016220585300e+00 -4.2993787596485307e+00 2.3319771375900014e+00 847 9.9983288535570551e+01 9.9947315727559982e+01 -5.1255893203169067e-01 -1.9752033603525118e+02 9.9999999999999986e+01 -1.9752033603525121e+00 -4.2972693567374769e+00 2.3220659963849637e+00 848 9.9973779094279564e+01 9.9956730149945187e+01 -5.2071931795812765e-01 -1.9781906331041466e+02 1.0000000000000001e+02 -1.9781906331041463e+00 -4.2921115485262353e+00 2.3139209154220892e+00 849 9.9977924083034068e+01 9.9929610508493923e+01 -5.2103248156200310e-01 -1.9804658036634086e+02 9.9999999999999972e+01 -1.9804658036634093e+00 -4.2971457549715275e+00 2.3166799513081191e+00 850 9.9989065095770883e+01 9.9946500202146979e+01 -5.3196373190246682e-01 -1.9804806604698342e+02 1.0000000000000001e+02 -1.9804806604698340e+00 -4.3026504160473351e+00 2.3221697555775007e+00 851 9.9961031384375730e+01 9.9908876706313094e+01 -5.3033352488774455e-01 -1.9765590539184612e+02 1.0000000000000001e+02 -1.9765590539184610e+00 -4.3086897179964128e+00 2.3321306640779520e+00 852 9.9971402448820896e+01 9.9929279741516282e+01 -5.3057409890950258e-01 -1.9792393782629415e+02 9.9999999999999986e+01 -1.9792393782629418e+00 -4.3069412891830616e+00 2.3277019109201200e+00 853 9.9965365979061616e+01 9.9921956966342975e+01 -5.2905452419724219e-01 -1.9846279032806706e+02 9.9999999999999957e+01 -1.9846279032806713e+00 -4.3043074605044014e+00 2.3196795572237305e+00 854 9.9974032421051618e+01 9.9935462186625486e+01 -5.3513199988075155e-01 -1.9869053358362424e+02 9.9999999999999986e+01 -1.9869053358362427e+00 -4.3029270777015203e+00 2.3160217418652769e+00 855 9.9966833213673908e+01 9.9920907063536276e+01 -5.2975929224335605e-01 -1.9887004834438960e+02 1.0000000000000000e+02 -1.9887004834438962e+00 -4.2984373714535691e+00 2.3097368880096734e+00 856 9.9959316769781978e+01 9.9901919201137460e+01 -5.2736071887971703e-01 -1.9897540821599699e+02 1.0000000000000000e+02 -1.9897540821599700e+00 -4.2944226512934227e+00 2.3046685691334527e+00 857 9.9967021239131299e+01 9.9924787635515372e+01 -5.2495653118267604e-01 -1.9831182659111332e+02 9.9999999999999972e+01 -1.9831182659111339e+00 -4.2948423705580305e+00 2.3117241046468973e+00 858 9.9979111108733775e+01 9.9911568907979529e+01 -5.3695757467461813e-01 -1.9803147885660385e+02 9.9999999999999986e+01 -1.9803147885660388e+00 -4.2882354889739993e+00 2.3079207004079612e+00 859 9.9950892803057144e+01 9.9874307203041553e+01 -5.3655658219767455e-01 -1.9770729556113065e+02 9.9999999999999972e+01 -1.9770729556113071e+00 -4.2909992434053938e+00 2.3139262877940854e+00 860 9.9932096202410335e+01 9.9845184558891702e+01 -5.1913763413430081e-01 -1.9757239429829843e+02 1.0000000000000000e+02 -1.9757239429829845e+00 -4.2975119904372843e+00 2.3217880474542985e+00 861 9.9964595398851088e+01 9.9905406401046278e+01 -5.2958397483090836e-01 -1.9751180305307733e+02 9.9999999999999972e+01 -1.9751180305307741e+00 -4.2993816171219814e+00 2.3242635865912069e+00 862 9.9948317020493732e+01 9.9853266847285809e+01 -5.3479112742940027e-01 -1.9762684425846655e+02 9.9999999999999986e+01 -1.9762684425846659e+00 -4.3100361883341103e+00 2.3337677457494435e+00 863 9.9926831369074534e+01 9.9826802492745557e+01 -5.2998336712253136e-01 -1.9890742052501776e+02 1.0000000000000000e+02 -1.9890742052501775e+00 -4.3096950575092956e+00 2.3206208522591187e+00 864 9.9903347344243500e+01 9.9783166497480352e+01 -5.6250244376599068e-01 -1.9671660505889528e+02 9.9999999999999986e+01 -1.9671660505889532e+00 -4.2896547701562886e+00 2.3224887195673358e+00 865 9.9911131211189684e+01 9.9731967897840264e+01 -5.3405550108830468e-01 -1.9679199083226516e+02 1.0000000000000003e+02 -1.9679199083226508e+00 -4.3047742680282779e+00 2.3368543597056268e+00 866 9.9941923682480933e+01 9.9855422857898475e+01 -5.3939839853895211e-01 -1.9704341979905391e+02 1.0000000000000000e+02 -1.9704341979905391e+00 -4.3045719889617740e+00 2.3341377909712349e+00 867 9.9950518911013546e+01 9.9880041087379709e+01 -5.2396127532051706e-01 -1.9688789150383295e+02 9.9999999999999986e+01 -1.9688789150383299e+00 -4.3032749826661787e+00 2.3343960676278499e+00 868 9.9948716702042745e+01 9.9877341846527926e+01 -5.1000244763424085e-01 -1.9727537336849082e+02 1.0000000000000000e+02 -1.9727537336849081e+00 -4.2976467491352910e+00 2.3248930154503831e+00 869 9.9962023478661337e+01 9.9895184094995429e+01 -5.2465982246350484e-01 -1.9806243236838989e+02 1.0000000000000000e+02 -1.9806243236838990e+00 -4.2961308180403419e+00 2.3155064943564425e+00 870 9.9886285422151857e+01 1.0035429034857707e+02 -5.4877662464640942e-01 -1.9742992724813377e+02 9.9999999999999986e+01 -1.9742992724813380e+00 -4.3144177211553876e+00 2.3401184486740503e+00 871 9.9934886057688317e+01 9.9866379030035091e+01 -5.3211670484120621e-01 -1.9695916568783784e+02 1.0000000000000000e+02 -1.9695916568783784e+00 -4.3158288635763116e+00 2.3462372066979333e+00 872 9.9963679195953176e+01 9.9868149303142317e+01 -5.2100765783263581e-01 -1.9716664814197821e+02 1.0000000000000003e+02 -1.9716664814197815e+00 -4.3066619141856330e+00 2.3349954327658518e+00 873 9.9974530022364021e+01 9.9931228115571415e+01 -5.2573597877982603e-01 -1.9701581899179970e+02 9.9999999999999986e+01 -1.9701581899179974e+00 -4.3047758857429619e+00 2.3346176958249658e+00 874 9.9944971122939549e+01 9.9878235958907297e+01 -5.0544676534962318e-01 -1.9620472045285555e+02 1.0000000000000000e+02 -1.9620472045285555e+00 -4.3106910104667087e+00 2.3486438059381523e+00 875 9.9974810208501111e+01 9.9916071801188394e+01 -5.1309632177326359e-01 -1.9619003390797607e+02 1.0000000000000001e+02 -1.9619003390797605e+00 -4.3122367005801108e+00 2.3503363615003523e+00 876 9.9974991337221624e+01 9.9946958665162811e+01 -5.1292498332703285e-01 -1.9612594471197033e+02 1.0000000000000001e+02 -1.9612594471197031e+00 -4.3151995543739057e+00 2.3539401072542030e+00 877 9.9963876933233081e+01 1.0040880599715202e+02 -5.0927628381909051e-01 -1.9672347545910750e+02 9.9999999999999986e+01 -1.9672347545910753e+00 -4.3077131358449900e+00 2.3404783812539156e+00 878 9.9972484732297914e+01 9.9924505779778826e+01 -5.1729611093946315e-01 -1.9685448692395502e+02 1.0000000000000001e+02 -1.9685448692395500e+00 -4.3050117245865804e+00 2.3364668553470307e+00 879 9.9978320542690383e+01 9.9953425918336109e+01 -5.3491657617461574e-01 -1.9664603883885539e+02 1.0000000000000000e+02 -1.9664603883885539e+00 -4.3033139628099581e+00 2.3368535744214034e+00 880 9.9944054893930257e+01 9.9830187433987831e+01 -5.1184412888418429e-01 -1.9566385504461110e+02 1.0000000000000000e+02 -1.9566385504461110e+00 -4.2936629496667296e+00 2.3370243992206192e+00 881 9.9959216530545390e+01 9.9887559066714218e+01 -5.0314179355593769e-01 -1.9466139191009944e+02 1.0000000000000000e+02 -1.9466139191009943e+00 -4.2981659913735966e+00 2.3515520722726024e+00 882 9.9948628805963239e+01 9.9872653647635957e+01 -4.9667678169182955e-01 -1.9473185986357589e+02 1.0000000000000001e+02 -1.9473185986357586e+00 -4.2975863464612232e+00 2.3502677478254652e+00 883 9.9961466284135810e+01 9.9914558891434496e+01 -4.9490176865996338e-01 -1.9453921842065958e+02 1.0000000000000003e+02 -1.9453921842065951e+00 -4.3022846197180193e+00 2.3568924355114245e+00 884 9.9787702562729862e+01 9.9915456376087207e+01 -4.7785819428487664e-01 -1.9494805998583303e+02 1.0000000000000000e+02 -1.9494805998583302e+00 -4.2989441445357661e+00 2.3494635446774357e+00 885 9.9968204682031853e+01 1.0016745268885218e+02 -4.9026584493212838e-01 -1.9541122226145856e+02 1.0000000000000000e+02 -1.9541122226145857e+00 -4.2993829026291630e+00 2.3452706800145773e+00 886 9.9972934648030702e+01 9.9939044437581970e+01 -5.0383265106598296e-01 -1.9611540502418416e+02 1.0000000000000000e+02 -1.9611540502418416e+00 -4.2924453528674524e+00 2.3312913026256110e+00 887 9.9971752318188933e+01 9.9925343099349888e+01 -5.0568764411724232e-01 -1.9569105499241454e+02 1.0000000000000000e+02 -1.9569105499241455e+00 -4.2991507491023686e+00 2.3422401991782236e+00 888 9.9969531968300331e+01 9.9907986910087047e+01 -5.0962053756862147e-01 -1.9605746367777792e+02 1.0000000000000000e+02 -1.9605746367777792e+00 -4.3039964396997217e+00 2.3434218029219425e+00 889 9.9973951025587610e+01 9.9951719384236554e+01 -5.3076163204065385e-01 -1.9606016466468435e+02 1.0000000000000001e+02 -1.9606016466468432e+00 -4.3011836235357617e+00 2.3405819768889180e+00 890 9.9947454582001626e+01 9.9880544760016818e+01 -5.0952225153729491e-01 -1.9603251059041170e+02 1.0000000000000001e+02 -1.9603251059041167e+00 -4.3050216105955812e+00 2.3446965046914636e+00 891 9.9975835227147996e+01 9.9912923153883114e+01 -5.1144294915843069e-01 -1.9658937125847612e+02 1.0000000000000000e+02 -1.9658937125847613e+00 -4.3056435028468405e+00 2.3397497902620787e+00 892 9.9976875070305184e+01 9.9924436321295275e+01 -5.1484291614449496e-01 -1.9661642323770164e+02 1.0000000000000001e+02 -1.9661642323770161e+00 -4.3114849465755567e+00 2.3453207141985413e+00 893 9.9961550233470433e+01 9.9918324229358959e+01 -4.9832437204053592e-01 -1.9625900031141430e+02 1.0000000000000000e+02 -1.9625900031141430e+00 -4.3161216698989850e+00 2.3535316667848427e+00 894 9.9964198496376852e+01 9.9906169785006213e+01 -4.9988265162202777e-01 -1.9596975549834974e+02 1.0000000000000000e+02 -1.9596975549834974e+00 -4.3159280594403393e+00 2.3562305044568421e+00 895 9.9984506779334168e+01 9.9970830530249032e+01 -5.1805967988665658e-01 -1.9623162032712946e+02 9.9999999999999986e+01 -1.9623162032712951e+00 -4.3035597437454616e+00 2.3412435404741663e+00 896 9.9979657071527868e+01 9.9951472669384884e+01 -5.4014179596643308e-01 -1.9685556491087817e+02 9.9999999999999986e+01 -1.9685556491087821e+00 -4.3095569850803530e+00 2.3410013359715709e+00 897 9.9935889875427719e+01 9.9876628307822244e+01 -5.2219468362574961e-01 -1.9712000260247152e+02 1.0000000000000000e+02 -1.9712000260247151e+00 -4.2982014952163743e+00 2.3270014691916585e+00 898 9.9963929383602718e+01 9.9899007795650249e+01 -5.1835541671102392e-01 -1.9683875147325884e+02 1.0000000000000001e+02 -1.9683875147325880e+00 -4.3037155495032433e+00 2.3353280347706553e+00 899 9.9968773905494075e+01 9.9910355324329743e+01 -5.1156702568809831e-01 -1.9613966750477329e+02 1.0000000000000001e+02 -1.9613966750477325e+00 -4.3097688130545118e+00 2.3483721380067792e+00 900 9.9972345568946565e+01 9.9945012677124438e+01 -5.1790432229691041e-01 -1.9648498504647281e+02 1.0000000000000000e+02 -1.9648498504647283e+00 -4.3042691672741284e+00 2.3394193168094009e+00 901 9.9941973843453141e+01 9.9864317844932245e+01 -5.0573696961698666e-01 -1.9655693247042154e+02 1.0000000000000000e+02 -1.9655693247042154e+00 -4.3094747828618862e+00 2.3439054581576708e+00 902 9.9961807230308523e+01 9.9865318898539684e+01 -5.1157868736758261e-01 -1.9541525564534723e+02 1.0000000000000000e+02 -1.9541525564534723e+00 -4.3079583493302813e+00 2.3538057928768095e+00 903 9.9977736591734242e+01 9.9921316411736299e+01 -5.1258996565111614e-01 -1.9522711121867673e+02 1.0000000000000001e+02 -1.9522711121867669e+00 -4.3083196004509707e+00 2.3560484882642041e+00 904 9.9961172130107059e+01 9.9925145675333439e+01 -5.0617180619174662e-01 -1.9584813985199952e+02 1.0000000000000000e+02 -1.9584813985199951e+00 -4.3102966740251452e+00 2.3518152755051496e+00 905 9.9959476618934858e+01 9.9907620524570589e+01 -5.0367059146169224e-01 -1.9597523409218709e+02 9.9999999999999957e+01 -1.9597523409218716e+00 -4.3023744587177246e+00 2.3426221177958535e+00 906 9.9976207441699231e+01 9.9941571963105076e+01 -5.1850946588007452e-01 -1.9587685278679393e+02 9.9999999999999986e+01 -1.9587685278679396e+00 -4.3035716465486962e+00 2.3448031186807570e+00 907 9.9936078967467907e+01 9.9866218120777233e+01 -5.0430566396148913e-01 -1.9584284444694524e+02 9.9999999999999986e+01 -1.9584284444694526e+00 -4.3010315020547161e+00 2.3426030575852632e+00 908 9.9977276572182987e+01 9.9942371992848734e+01 -5.0500394394750547e-01 -1.9642028344031769e+02 9.9999999999999986e+01 -1.9642028344031772e+00 -4.3027905617572317e+00 2.3385877273540538e+00 909 9.9990012464569048e+01 9.9943672739415291e+01 -5.2916482108942831e-01 -1.9654849074811992e+02 1.0000000000000001e+02 -1.9654849074811989e+00 -4.3014329510320746e+00 2.3359480435508764e+00 910 9.9946393541205708e+01 9.9888335419727824e+01 -5.0462602039614346e-01 -1.9659316084858563e+02 1.0000000000000001e+02 -1.9659316084858560e+00 -4.3064850511119328e+00 2.3405534426260770e+00 911 9.9959660962614180e+01 9.9886677249325786e+01 -4.9440606175772939e-01 -1.9647889057606614e+02 1.0000000000000001e+02 -1.9647889057606611e+00 -4.3106443461936959e+00 2.3458554404330347e+00 912 9.9985610593189620e+01 9.9960541610204217e+01 -5.1079644828866633e-01 -1.9661449429169653e+02 1.0000000000000000e+02 -1.9661449429169653e+00 -4.3080406201428607e+00 2.3418956772258959e+00 913 9.9977095229447571e+01 9.9943735004053295e+01 -5.1185327973411998e-01 -1.9652262171716447e+02 1.0000000000000000e+02 -1.9652262171716448e+00 -4.3123906920026878e+00 2.3471644748310432e+00 914 9.9981169022780435e+01 9.9967628605090397e+01 -5.2231993817799238e-01 -1.9677847095174161e+02 9.9999999999999972e+01 -1.9677847095174168e+00 -4.3081544418791813e+00 2.3403697323617645e+00 915 9.9946621913947126e+01 9.9897869845170788e+01 -5.0361179884413554e-01 -1.9620962696054718e+02 1.0000000000000000e+02 -1.9620962696054718e+00 -4.3164228112985201e+00 2.3543265416930472e+00 916 9.9992749654779146e+01 1.0049375354319402e+02 -5.1837805659744363e-01 -1.9645098666649818e+02 1.0000000000000000e+02 -1.9645098666649818e+00 -4.3107668693139374e+00 2.3462570026489566e+00 917 9.9977835938120862e+01 9.9941743647551519e+01 -5.1695904052214536e-01 -1.9690156356876659e+02 1.0000000000000000e+02 -1.9690156356876660e+00 -4.3095072252460218e+00 2.3404915895583565e+00 918 9.9992688643481131e+01 9.9973353554544829e+01 -5.3732970683452741e-01 -1.9731768377470237e+02 1.0000000000000001e+02 -1.9731768377470233e+00 -4.3017543069076121e+00 2.3285774691605887e+00 919 9.9955076952995640e+01 9.9911695758925489e+01 -5.1400511503913338e-01 -1.9750484458624186e+02 1.0000000000000000e+02 -1.9750484458624187e+00 -4.3014703454723566e+00 2.3264218996099375e+00 920 9.9987405919813355e+01 9.9950036288213340e+01 -5.2292762758552047e-01 -1.9722820754407545e+02 9.9999999999999986e+01 -1.9722820754407548e+00 -4.3005918450051066e+00 2.3283097695643522e+00 921 9.9973196560014770e+01 9.9944674567383970e+01 -5.2711271932307591e-01 -1.9797211344231923e+02 1.0000000000000001e+02 -1.9797211344231920e+00 -4.3050344476913889e+00 2.3253133132681962e+00 922 9.9988492289539067e+01 9.9949064885241697e+01 -5.3001741542672165e-01 -1.9741014815651519e+02 9.9999999999999972e+01 -1.9741014815651527e+00 -4.3073489772420670e+00 2.3332474956769143e+00 923 9.9985897596245493e+01 9.9964973152131606e+01 -5.3668597954068020e-01 -1.9719165335672236e+02 9.9999999999999986e+01 -1.9719165335672240e+00 -4.3059670808498893e+00 2.3340505472826649e+00 924 9.9961376963069327e+01 9.9913552486746553e+01 -5.1862108520012595e-01 -1.9779294253857350e+02 1.0000000000000001e+02 -1.9779294253857347e+00 -4.3013267058775035e+00 2.3233972804917689e+00 925 9.9978360712131746e+01 9.9942727029796373e+01 -5.2563950468755449e-01 -1.9735171336480497e+02 1.0000000000000001e+02 -1.9735171336480493e+00 -4.2975358630102685e+00 2.3240187293622196e+00 926 9.9965037801625272e+01 9.9910935861985706e+01 -5.1731261304984610e-01 -1.9741412483799576e+02 1.0000000000000001e+02 -1.9741412483799572e+00 -4.2970573783204244e+00 2.3229161299404670e+00 927 9.9974699718837570e+01 9.9939491493780210e+01 -5.1546276897231813e-01 -1.9713331888568609e+02 9.9999999999999986e+01 -1.9713331888568613e+00 -4.2985297839441214e+00 2.3271965950872593e+00 928 9.9985698518505728e+01 9.9965418165900019e+01 -5.2690803947877118e-01 -1.9731905991240333e+02 1.0000000000000001e+02 -1.9731905991240331e+00 -4.2991843117483128e+00 2.3259937126242800e+00 929 9.9958263316402295e+01 9.9907063834813911e+01 -5.1320890078057579e-01 -1.9690849484643275e+02 9.9999999999999972e+01 -1.9690849484643282e+00 -4.2975613108124646e+00 2.3284763623481370e+00 930 9.9966915176975149e+01 9.9913090666944186e+01 -5.1830653196445386e-01 -1.9773330470566663e+02 1.0000000000000000e+02 -1.9773330470566663e+00 -4.2958440255444748e+00 2.3185109784878088e+00 931 9.9973040959542885e+01 9.9935853949252646e+01 -5.2295957959042483e-01 -1.9827448839653417e+02 9.9999999999999986e+01 -1.9827448839653421e+00 -4.2880938049080690e+00 2.3053489209427265e+00 932 9.9980127469752262e+01 9.9967066143206068e+01 -5.3826286128344236e-01 -1.9820954469684000e+02 9.9999999999999986e+01 -1.9820954469684005e+00 -4.2825093156155072e+00 2.3004138686471070e+00 933 9.9970816335093218e+01 9.9928593977275412e+01 -5.3181671829075472e-01 -1.9831062618532962e+02 1.0000000000000000e+02 -1.9831062618532962e+00 -4.2723595354911863e+00 2.2892532736378901e+00 934 9.9972914819847304e+01 9.9921798441127251e+01 -5.2957354509556143e-01 -1.9730960908423390e+02 9.9999999999999986e+01 -1.9730960908423394e+00 -4.2836683799520152e+00 2.3105722891096749e+00 935 9.9956763565859291e+01 9.9905075848674116e+01 -5.1569718862277780e-01 -1.9740641419407297e+02 1.0000000000000001e+02 -1.9740641419407294e+00 -4.2823021543590789e+00 2.3082380124183501e+00 936 9.9979381252486093e+01 9.9935948291298445e+01 -5.3984593354111576e-01 -1.9839624066029316e+02 1.0000000000000000e+02 -1.9839624066029315e+00 -4.2862039247959123e+00 2.3022415181929805e+00 937 9.9954038266167899e+01 9.9941059723027792e+01 -5.4954828481962048e-01 -1.9989618907834773e+02 1.0000000000000000e+02 -1.9989618907834774e+00 -4.2730706984672633e+00 2.2741088076837856e+00 938 9.9911165365771922e+01 9.9800253999124124e+01 -5.2278852024264511e-01 -1.9992073580659900e+02 9.9999999999999972e+01 -1.9992073580659908e+00 -4.2710183161692177e+00 2.2718109581032264e+00 939 9.9808771161877090e+01 9.9585875702224257e+01 -5.3846853630873170e-01 -1.9956297461447278e+02 9.9999999999999986e+01 -1.9956297461447281e+00 -4.2844284591550590e+00 2.2887987130103307e+00 940 9.9958846581600397e+01 9.9910946429558749e+01 -5.3714404990627063e-01 -1.9984163518973108e+02 9.9999999999999972e+01 -1.9984163518973115e+00 -4.2809329009963415e+00 2.2825165490990305e+00 941 9.9963410329622846e+01 9.9910831935994253e+01 -5.3777367284565325e-01 -1.9950741695508037e+02 1.0000000000000001e+02 -1.9950741695508034e+00 -4.2887201807845807e+00 2.2936460112337760e+00 942 9.9972099374922024e+01 9.9907902077964806e+01 -5.3690355953965185e-01 -1.9936708310135228e+02 1.0000000000000001e+02 -1.9936708310135225e+00 -4.2904455114696409e+00 2.2967746804561182e+00 943 9.9989125939280555e+01 9.9962646886304370e+01 -5.6724555552100286e-01 -1.9957069364113272e+02 1.0000000000000001e+02 -1.9957069364113269e+00 -4.2936987000667903e+00 2.2979917636554643e+00 944 9.9943282301211582e+01 9.9885365288378310e+01 -5.4325761047920607e-01 -1.9884079128882212e+02 9.9999999999999986e+01 -1.9884079128882215e+00 -4.2929792002177134e+00 2.3045712873294923e+00 945 9.9950644491863201e+01 9.9831474158954649e+01 -5.4063925993271145e-01 -1.9947049610288244e+02 1.0000000000000003e+02 -1.9947049610288237e+00 -4.2940308643797085e+00 2.2993259033508844e+00 946 9.9972501430514910e+01 9.9920881521234065e+01 -5.3947961462964844e-01 -1.9850040910257542e+02 1.0000000000000000e+02 -1.9850040910257543e+00 -4.2952819323231086e+00 2.3102778412973550e+00 947 9.9954007391345911e+01 9.9870684584767673e+01 -5.2935696223472728e-01 -1.9841033991389722e+02 1.0000000000000000e+02 -1.9841033991389723e+00 -4.2968376959362633e+00 2.3127342967972910e+00 948 9.9965414485032824e+01 9.9919380652949201e+01 -5.1919119677216163e-01 -1.9780164495316598e+02 9.9999999999999986e+01 -1.9780164495316601e+00 -4.3058679385841083e+00 2.3278514890524478e+00 949 9.9986129861439167e+01 9.9950122610622401e+01 -5.2906547199037490e-01 -1.9774009291945586e+02 9.9999999999999986e+01 -1.9774009291945589e+00 -4.3056637504866080e+00 2.3282628212920495e+00 950 9.9981128127111006e+01 9.9955708419608655e+01 -5.3315000830894033e-01 -1.9726877528961347e+02 9.9999999999999972e+01 -1.9726877528961355e+00 -4.3113948251510221e+00 2.3387070722548868e+00 951 9.9950860679593205e+01 9.9893817434006891e+01 -5.1463451217648437e-01 -1.9884004508344185e+02 1.0000000000000003e+02 -1.9884004508344180e+00 -4.3038337236954227e+00 2.3154332728610045e+00 952 9.9993745670166405e+01 9.9953538931793233e+01 -5.3342748556835584e-01 -1.9868395406683325e+02 1.0000000000000000e+02 -1.9868395406683326e+00 -4.3084589012558148e+00 2.3216193605874831e+00 953 9.9955662947275798e+01 1.0056897914719949e+02 -5.3313485495993018e-01 -1.9805433407212297e+02 1.0000000000000000e+02 -1.9805433407212298e+00 -4.3039441359255779e+00 2.3234007952043485e+00 954 9.9957676572228365e+01 9.9900721239890771e+01 -5.1051197445653795e-01 -1.9773358123093084e+02 9.9999999999999986e+01 -1.9773358123093088e+00 -4.2982229498299311e+00 2.3208871375206224e+00 955 9.9978000833199118e+01 9.9947545786204685e+01 -5.2110424497560093e-01 -1.9754730153732658e+02 1.0000000000000001e+02 -1.9754730153732654e+00 -4.2984274807733263e+00 2.3229544654000618e+00 956 9.9956508245800933e+01 9.9915055565824431e+01 -5.0962145944690995e-01 -1.9709924846734108e+02 9.9999999999999986e+01 -1.9709924846734113e+00 -4.3013568869568806e+00 2.3303644022834691e+00 957 9.9976994293545502e+01 9.9950449929191279e+01 -5.1764745663696976e-01 -1.9761053270715598e+02 1.0000000000000001e+02 -1.9761053270715596e+00 -4.2947330042630263e+00 2.3186276771914667e+00 958 9.9971213492570357e+01 9.9915183697898527e+01 -5.2513934822179498e-01 -1.9778418070473927e+02 1.0000000000000003e+02 -1.9778418070473920e+00 -4.2813987540077667e+00 2.3035569469603741e+00 959 9.9960298713108685e+01 9.9894780862958470e+01 -5.1929135117395386e-01 -1.9671365995256627e+02 9.9999999999999986e+01 -1.9671365995256631e+00 -4.2935963680724045e+00 2.3264597685467425e+00 960 9.9961516629201981e+01 9.9894473708017671e+01 -5.1011039659920310e-01 -1.9725064016819357e+02 9.9999999999999986e+01 -1.9725064016819360e+00 -4.2860527082725861e+00 2.3135463065906507e+00 961 1.0000003696916298e+02 9.9956533633060488e+01 -5.2821853328723201e-01 -1.9696209096864891e+02 1.0000000000000001e+02 -1.9696209096864887e+00 -4.2882289448899344e+00 2.3186080352034466e+00 962 9.9935194515034055e+01 9.9895948700583645e+01 -5.0485613000625429e-01 -1.9664102885007486e+02 9.9999999999999986e+01 -1.9664102885007491e+00 -4.2964714826164094e+00 2.3300611941156610e+00 963 9.9988284283505237e+01 9.9938991889198718e+01 -5.1188358358065333e-01 -1.9661085883431497e+02 9.9999999999999986e+01 -1.9661085883431502e+00 -4.3021037665869963e+00 2.3359951782438459e+00 964 9.9977488483687793e+01 9.9962756982708243e+01 -5.1751273285611832e-01 -1.9684906505161905e+02 9.9999999999999986e+01 -1.9684906505161910e+00 -4.2995090900181889e+00 2.3310184395019977e+00 965 9.9954287557369867e+01 9.9914199382907626e+01 -5.0137174774287652e-01 -1.9695805631662176e+02 1.0000000000000001e+02 -1.9695805631662173e+00 -4.2966447184099374e+00 2.3270641552437201e+00 966 9.9983234031360979e+01 9.9960436091153611e+01 -5.2002061247079179e-01 -1.9686801600813567e+02 1.0000000000000003e+02 -1.9686801600813562e+00 -4.2927606284243209e+00 2.3240804683429657e+00 967 9.9955588618666354e+01 9.9903051729965568e+01 -5.0557080162178458e-01 -1.9680725260990454e+02 1.0000000000000000e+02 -1.9680725260990455e+00 -4.2986021265796204e+00 2.3305296004805749e+00 968 9.9986063464444641e+01 1.0064383199007924e+02 -5.1120037446701916e-01 -1.9652489160715263e+02 9.9999999999999972e+01 -1.9652489160715270e+00 -4.3011987554865625e+00 2.3359498394150364e+00 969 9.9971273158553785e+01 9.9915225366367693e+01 -5.1139030813264985e-01 -1.9585354495596440e+02 1.0000000000000001e+02 -1.9585354495596436e+00 -4.3077692897627662e+00 2.3492338402031230e+00 970 9.9959169517448004e+01 9.9900122493895651e+01 -5.0015987160190256e-01 -1.9583782043452811e+02 1.0000000000000004e+02 -1.9583782043452802e+00 -4.3048790600517499e+00 2.3465008557064695e+00 971 9.9980712173632853e+01 9.9936510244672249e+01 -5.0516569470264128e-01 -1.9652993639056328e+02 9.9999999999999986e+01 -1.9652993639056331e+00 -4.3001539689286101e+00 2.3348546050229779e+00 972 9.9957493857231697e+01 9.9920152494661650e+01 -5.0557760341523383e-01 -1.9694606589534598e+02 1.0000000000000000e+02 -1.9694606589534598e+00 -4.2994618806173603e+00 2.3300012216639012e+00 973 9.9975817197363781e+01 9.9911952121172817e+01 -5.2233997592759274e-01 -1.9648059862259905e+02 1.0000000000000001e+02 -1.9648059862259901e+00 -4.2872999047656455e+00 2.3224939185396551e+00 974 9.9939012228251087e+01 9.9861605091513610e+01 -5.0280258927399346e-01 -1.9509753369663241e+02 1.0000000000000000e+02 -1.9509753369663241e+00 -4.2876495653158662e+00 2.3366742283495414e+00 975 9.9967693019354400e+01 9.9924323788441711e+01 -5.0957662291284189e-01 -1.9472898193234195e+02 1.0000000000000000e+02 -1.9472898193234196e+00 -4.2909662477451711e+00 2.3436764284217508e+00 976 9.9942956556041466e+01 1.0046800358362111e+02 -4.9105629255845362e-01 -1.9474184614627984e+02 1.0000000000000003e+02 -1.9474184614627978e+00 -4.2967022769373537e+00 2.3492838154745557e+00 977 9.9982499137923540e+01 9.9927585674792482e+01 -5.0225244327393992e-01 -1.9531496967807746e+02 9.9999999999999986e+01 -1.9531496967807749e+00 -4.2974116451252469e+00 2.3442619483444722e+00 978 9.9967017511777797e+01 9.9931962592784402e+01 -5.0688196239965833e-01 -1.9581209765988095e+02 1.0000000000000001e+02 -1.9581209765988092e+00 -4.2958243855200617e+00 2.3377034089212532e+00 979 9.9957689427441167e+01 9.9905708720816037e+01 -4.9052064119170807e-01 -1.9473680721458831e+02 1.0000000000000003e+02 -1.9473680721458824e+00 -4.2961320632926334e+00 2.3487639911467522e+00 980 9.9983843595554433e+01 9.9951575488282145e+01 -4.9363235352655455e-01 -1.9493708641321621e+02 1.0000000000000003e+02 -1.9493708641321614e+00 -4.3026762499559208e+00 2.3533053858237594e+00 981 9.9986319550594146e+01 9.9973084610359464e+01 -5.0455860391154084e-01 -1.9464107081595671e+02 9.9999999999999986e+01 -1.9464107081595674e+00 -4.2995992484965129e+00 2.3531885403369444e+00 982 9.9982661220852975e+01 9.9941711397241860e+01 -5.0763627089841956e-01 -1.9559406968709985e+02 9.9999999999999986e+01 -1.9559406968709989e+00 -4.2869153934376989e+00 2.3309746965667002e+00 983 9.9985785015175537e+01 9.9956902580826139e+01 -5.1856712309844266e-01 -1.9686096244390444e+02 1.0000000000000000e+02 -1.9686096244390445e+00 -4.2859330116116485e+00 2.3173233871726038e+00 984 9.9971159107510857e+01 9.9948842054282181e+01 -5.2142328711387742e-01 -1.9704544162325948e+02 9.9999999999999986e+01 -1.9704544162325952e+00 -4.2837232526113631e+00 2.3132688363787679e+00 985 9.9968713681685429e+01 9.9937895943548611e+01 -5.2226890566083406e-01 -1.9709719737454537e+02 1.0000000000000000e+02 -1.9709719737454539e+00 -4.2857145323055796e+00 2.3147425585601260e+00 986 9.9969983510305724e+01 9.9938285824157575e+01 -5.2102435162158178e-01 -1.9669614257915197e+02 1.0000000000000000e+02 -1.9669614257915198e+00 -4.2924743420974218e+00 2.3255129163059021e+00 987 9.9972217841054629e+01 9.9915867787653738e+01 -5.2861076448334976e-01 -1.9717637293162576e+02 1.0000000000000001e+02 -1.9717637293162573e+00 -4.2887862351519237e+00 2.3170225058356664e+00 988 9.9956642623257920e+01 9.9910585355043239e+01 -5.1485852905554541e-01 -1.9653037815899441e+02 9.9999999999999986e+01 -1.9653037815899446e+00 -4.2924787335301753e+00 2.3271749519402309e+00 989 9.9976277745714640e+01 9.9373651164972387e+01 -5.2686846237466511e-01 -1.9663423912122440e+02 1.0000000000000000e+02 -1.9663423912122440e+00 -4.2913262764881619e+00 2.3249838852759170e+00 990 9.9974739216422719e+01 9.9953900190139777e+01 -5.2682666513749854e-01 -1.9803149028487940e+02 1.0000000000000000e+02 -1.9803149028487941e+00 -4.2826294694365634e+00 2.3023145665877696e+00 991 9.9952482418495535e+01 9.9841029333339250e+01 -5.3475294458903977e-01 -1.9888629977024473e+02 1.0000000000000001e+02 -1.9888629977024470e+00 -4.2846888117469337e+00 2.2958258140444867e+00 992 9.9938855770369102e+01 9.9910830581427675e+01 -5.2729355950586332e-01 -1.9795551224156375e+02 1.0000000000000000e+02 -1.9795551224156376e+00 -4.2769095510955877e+00 2.2973544286799514e+00 993 9.9938061240477396e+01 9.9849120752032618e+01 -4.9851996805879639e-01 -1.9765575127272001e+02 1.0000000000000001e+02 -1.9765575127271997e+00 -4.2822149332904695e+00 2.3056574205632692e+00 994 9.9962288877655098e+01 9.9935869764650619e+01 -5.2846237908717564e-01 -1.9732883183951299e+02 9.9999999999999986e+01 -1.9732883183951302e+00 -4.2873147004136376e+00 2.3140263820185063e+00 995 9.9948613642325185e+01 1.0049939107016129e+02 -5.3979948577707537e-01 -1.9828091042652051e+02 1.0000000000000000e+02 -1.9828091042652052e+00 -4.2868334461362956e+00 2.3040243418710915e+00 996 9.9937946269257608e+01 9.9866473263495379e+01 -5.1732665359948959e-01 -1.9727060529075371e+02 1.0000000000000000e+02 -1.9727060529075371e+00 -4.2980399360222261e+00 2.3253338831146899e+00 997 9.9969623500320438e+01 9.9916440157145416e+01 -5.2764799846176536e-01 -1.9821471150336282e+02 9.9999999999999986e+01 -1.9821471150336285e+00 -4.2944654357054901e+00 2.3123183206718627e+00 998 9.9953048284609665e+01 9.9913256354427105e+01 -5.2140435151544962e-01 -1.9754856896756468e+02 1.0000000000000001e+02 -1.9754856896756465e+00 -4.2944641807283839e+00 2.3189784910527371e+00 999 9.9950455094158485e+01 9.9886804594938781e+01 -5.1785360835541250e-01 -1.9794691499459393e+02 1.0000000000000003e+02 -1.9794691499459387e+00 -4.2843674522847852e+00 2.3048983023388456e+00 1000 9.9929119535178103e+01 1.0042266167132173e+02 -5.3573556540972211e-01 -1.9849788959686617e+02 1.0000000000000001e+02 -1.9849788959686614e+00 -4.2888078003657677e+00 2.3038289043971063e+00 Finally we can analyze the result and compare it to the literature value which we agree with within error bars. from ipie.analysis.extraction import extract_observable import matplotlib.pyplot as plt from ipie.analysis.blocking import reblock_minimal paper_result = -1.96922 analyzed_result = reblock_minimal(afqmc.estimators.filename, start_block=100) notebook_energy = analyzed_result.ETotal_ac.values[0] notebook_error = analyzed_result.ETotal_error_ac.values[0] data = extract_observable(afqmc.estimators.filename) plt.plot(data.ETotal, marker='o', label=\"AFQMC\", color=\"C0\") plt.axhline(paper_result, label=\"Exact Result\", color=\"C1\") plt.axhline(notebook_energy, label=\"Notebook result\", color=\"C2\") plt.legend() plt.xlabel(\"Block number\") plt.ylabel(\"Total Energy (Ha)\") print(f\"paper result = {paper_result}\") print(f\"notebook result = {notebook_energy} +/ {notebook_error}\") paper result = -1.96922 notebook result = -1.9696941240705792 +/ 0.000800931388380705 Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-02-16 UTC.",
    "url": "https://quantumai.google/cirq/experiments/qcqmc/experimental_wavefunctions",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 10432,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:45.905173"
  },
  {
    "id": "cirq_-1784815364207883020_0",
    "title": "Toric Code Ground State \u00a0|\u00a0 Cirq \u00a0|\u00a0 Google Quantum AI",
    "content": "Google Quantum AI Software Cirq Experiments Toric Code Ground State View on QuantumAI Run in Google Colab View source on GitHub Download notebook Before beginning, we will import the necessary modules into the colab. try: import recirq except ImportError: !pip install --quiet git+https://github.com/quantumlib/ReCirq import recirq try: import qsimcirq except ImportError: !pip install qsimcirq --quiet import qsimcirq import cirq import matplotlib.pyplot as plt import recirq.toric_code.toric_code_plaquettes as tcp import recirq.toric_code.toric_code_plotter as tcplot import recirq.toric_code.toric_code_rectangle as tcr import recirq.toric_code.toric_code_state_prep as tcsp plt.rcParams['figure.dpi'] = 144 Toric code Hamiltonian The toric code Hamiltonian \\begin{equation} H = -\\sum_s A_s - \\sum_p B_p \\end{equation} involves local four-qubit parity operators, where each qubit lives on an edge in a square lattice. Here, the \"star\" operators \\(A_s\\) are products of Pauli \\(Z\\) operators around a vertex, while the \"plaquette\" operators \\(B_p\\) are products of \\(X\\) operators around a square, for example, \\begin{equation} A_s = Z_i \\otimes Z_j \\otimes Z_k \\otimes Z_l \\end{equation} \\begin{equation} B_p = X_a \\otimes X_b \\otimes X_c \\otimes X_d. \\end{equation} These local parity operators all commute with each other: all \\(A_s\\) commute, all \\(B_p\\) commute, and \\(A_s\\) and \\(B_p\\) commute with each other because they overlap on an even number of qubits. They can thus all be simultaneously diagonalized, and those shared eigenstates are also the eigenstates of \\(H\\). In our paper, we mostly work with the 31-qubit lattice above. With these boundary conditions, there is a unique ground state that has a \\(+1\\) eigenvalue for all \\(A_s\\) and \\(B_p\\). Note for different boundary conditions, we can have degeneracies that are locally-indistinguishable (for example on a torus, or with the \"surface code\" logical qubits we explore in Figure 4 of our paper). In this module, we will primarily work with the smaller 22-qubit to avoid time and memory constraints associated with the larger rectangle. Understanding the ground state In this example, we focus on reproducing our first figure, where we create this unique ground state \\(|G\\rangle\\) using a shallow unitary circuit. The general idea is to start out with \\(|0\\rangle^{\\otimes 22}\\), so all \\(\\langle A_s \\rangle = +1\\). We then apply projection operators \\(\\mathbb{I} + B_p\\) which project the state into a \\(+1\\) eigenstate of \\(B_p\\), after which all the local parities are \\(+1\\): \\begin{equation} |G\\rangle \\propto \\prod_p (\\mathbb{I} + B_p)|0\\rangle^{\\otimes 22}. \\end{equation} To create this state, we assign a \"team captain\" qubit to each plaquette \\(B_p\\). Starting from \\(|0\\rangle^{\\otimes n}\\), we perform a Hadamard on each team captain, and then each team captain is responsible for performing a CNOT to each of its team mates. We have to be careful with the ordering to keep things efficient and avoid the captains stepping on each other's toes. This is easier to visualize for a smaller system, for example the 12-qubit version in Figure S2, reproduced below. Note the superposition of \\(2^4\\) states, as there are four plaquettes \\(B_p\\). Creating \\(|G\\rangle\\) with ReCirq Basics: 22-qubit circuit First, we can create a example 22-qubit grid by instantiate it using a ToricCodeRectangle object and then plot a visualization using a ToricCodePlotter object, both found in the ReCirq repository. short_rectangle = tcr.ToricCodeRectangle( origin_qubit=cirq.GridQubit(3, 0), row_vector=(1, 1), rows=2, cols=4 ) plotter = tcplot.ToricCodePlotter() plotter.plot_code(short_rectangle) <Axes: > We can also see the full circuit of how to create this code (using CNOT gates) using these objects as well. By printing out the circuit moment by moment, we can see the gates lined up in a visual manner. full_circuit = tcsp.toric_code_cnot_circuit(short_rectangle) for idx, moment in enumerate(full_circuit): print(f'moment {idx}\\n{moment}\\n') moment 0 \u2577 0 1 2 3 4 \u2576\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0 \u2502 H \u2502 1 \u2502 H H \u2502 2 \u2502 H H \u2502 3 \u2502 H H \u2502 4 \u2502 H \u2502 moment 1 \u2577 1 2 3 \u2576\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1 \u2502 @ \u2502 \u2502 2 \u2502 @ X @ \u2502 \u2502 \u2502 3 \u2502 X @ X \u2502 \u2502 4 \u2502 X \u2502 moment 2 \u2577 1 2 3 4 \u2576\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1 \u2502 @\u2500X \u2502 2 \u2502 @\u2500X @\u2500X \u2502 3 \u2502 @\u2500X \u2502 moment 3 \u2577 0 1 2 3 4 5 \u2576\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0 \u2502 @\u2500X \u2502 1 \u2502 @ @\u2500X \u2502 \u2502 2 \u2502 X @ \u2502 \u2502 3 \u2502 @ @\u2500X X \u2502 \u2502 4 \u2502 X @ @\u2500X \u2502 \u2502 5 \u2502 X \u2502 moment 4 \u2577 0 1 2 3 4 \u2576\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0 \u2502 @ \u2502 \u2502 1 \u2502 X @ \u2502 \u2502 2 \u2502 X \u2502 3 \u2502 @\u2500X \u2502 4 \u2502 @\u2500X \u2502 moment 5 \u2577 0 1 2 4 5 \u2576\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0 \u2502 @ \u2502 \u2502 1 \u2502 X @ \u2502 \u2502 2 \u2502 X \u2502 4 \u2502 @\u2500X \u2502 5 \u2502 @\u2500X \u2502 Simulating the parities For a given circuit, we can determine all the parity expectation values \\(\\langle A_s\\rangle\\) by sampling 22-qubit bitstrings and then computing each expectation value. We do the same thing with for \\(\\langle B_p \\rangle\\), but we include a layer of Hadamards before measurement to effectively \"measure in \\(X\\) basis.\" def partial_circuit( n_moments_to_include: int, *, x_basis: bool ) -> cirq.Circuit: \"\"\"Create the first N moments of a toric in Z or X basis. Args: n_moments_to_include: number of moments to include x_basis: If True, add Hadamards to effectively measure in the X basis. If False, measure in the computational (Z) basis. Returns: First N moments of a toric code circuit plus an optional layer of Hadamard gates to effectively measure in the X basis. This circuit also includes measurement gates. \"\"\" sliced_circuit = full_circuit[:n_moments_to_include] qubits = sorted(short_rectangle.qubits) if x_basis: sliced_circuit += cirq.Moment(cirq.H.on_each(*qubits)) return sliced_circuit + cirq.measure(*qubits) def get_plaquettes( n_moment_to_include: int, repetitions: int = 1000, sampler: cirq.Sampler = qsimcirq.QSimSimulator() ) -> tcp.ToricCodePlaquettes: \"\"\"Simulates the results in both bases and determine plaquette values. Args: n_moments_to_include: number of moments to include repetitions: number of repetitions (shots) to sample sampler: Sampler (simulator) to execute circuits. Defaults to qsim. \"\"\" x_data = sampler.run( partial_circuit(n_moment_to_include, x_basis=True), repetitions=repetitions ) z_data = sampler.run( partial_circuit(n_moment_to_include, x_basis=False), repetitions=repetitions ) return tcp.ToricCodePlaquettes.from_global_measurements( short_rectangle, x_data.data, z_data.data ) We can step through the circuit one moment at a time to see how the parities \\(A_s\\) and \\(B_p\\) evolve through the circuit. This is similar to Figure 1B in paper (but simulating instead of using experimental data). We begin with \\(|0\\rangle^{\\otimes 22}\\), which corresponds to n_moments_to_include=0. There, all \\(\\langle A_s \\rangle = +1\\) but \\(\\langle B_p \\rangle = 0\\) (see colorbars below). The subsequent moments apply Hadamard and CNOT gates to stitch entanglement across the device and create \\(|G\\rangle\\). for n in range(len(tcsp.toric_code_cnot_circuit(short_rectangle)) + 1): p = get_plaquettes(n) ax = plotter.plot_expectation_values(p) ax.set_title(f'n_moments_to_include={n}') plt.pause(0.001) /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:112: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead. parities = data.applymap( /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:115: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead return float(parities.mean()) /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:112: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead. parities = data.applymap( /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:115: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead return float(parities.mean()) /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:112: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead. parities = data.applymap( /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:115: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead return float(parities.mean()) /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:112: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead. parities = data.applymap( /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:115: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead return float(parities.mean()) /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:112: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead. parities = data.applymap( /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:115: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead return float(parities.mean()) /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:112: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead. parities = data.applymap( /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:115: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead return float(parities.mean()) /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:112: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead. parities = data.applymap( /tmpfs/src/tf_docs_env/lib/python3.10/site-packages/recirq/toric_code/toric_code_plaquettes.py:115: FutureWarning: Calling float on a single element Series is deprecated and will raise a TypeError in the future. Use float(ser.iloc[0]) instead return float(parities.mean()) After the final step, all the parities are \\(+1\\) (see colorbars below), indicating we have successfully created \\(|G\\rangle\\). ax_z = plotter.make_colorbar(x_basis=False, orientation='horizontal') ax_z.set_label(r'Z parity, $\\langle A\\rangle$') ax_x = plotter.make_colorbar(x_basis=True, orientation='horizontal') ax_x.set_label(r'X parity, $\\langle B\\rangle$') Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-10-18 UTC.",
    "url": "https://quantumai.google/cirq/experiments/toric_code/toric_code_ground_state",
    "source": "cirq",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 1413,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:47.669781"
  },
  {
    "id": "pennylane_1709790396986268548_0",
    "title": "PennyLane-Rigetti Plugin \u2014 PennyLane-Rigetti 0.40.0 documentation",
    "content": "Why PennyLane Why PennyLane Features Demos Compilation Datasets Performance Devices Teach Getting Started Getting Started Install Demos Codebook Challenges Support Documentation Documentation How-to demos Development guide Catalyst API GitHub Ecosystem Ecosystem Blog Glossary Videos FAQs GitHub Support Install Navigation index modules | next | PennyLane-Rigetti 0.40.0 documentation \u00bb PennyLane-Rigetti Plugin Table of contents Search PennyLane-Rigetti Overview Installation Support Usage The Numpy-Wavefunction device The Wavefunction device The QVM device The QPU device API pennylane-rigetti Docs PennyLane-Rigetti Plugin PennyLane-Rigetti Plugin\u00b6 Warning The PennyLane-Rigetti plugin is only compatible with PennyLane v0.40 or below. To use Rigetti hardware with newer versions of PennyLane please use the PennyLane-Braket plugin instead. Release 0.40.0 The PennyLane Rigetti plugin allows different Rigetti devices to work with PennyLane \u2014 the wavefunction simulator, the Quantum Virtual Machine (QVM), and Quantum Processing Units (QPUs). pyQuil is a Python library for quantum programming using the quantum instruction language (Quil) \u2014 resulting quantum programs can be executed using the Rigetti Forest SDK and Rigetti Quantum Cloud Services (QCS). PennyLane is a cross-platform Python library for quantum machine learning, automatic differentiation, and optimization of hybrid quantum-classical computations. Once Pennylane-Rigetti is installed, the provided Rigetti devices can be accessed straight away in PennyLane, without the need to import any additional packages. Devices\u00b6 Currently, PennyLane-Rigetti provides these Rigetti devices for PennyLane: 'rigetti.numpy_wavefunction' pyQuil's Numpy wavefunction simulator backend. 'rigetti.wavefunction' The QCS wavefunction simulator backend. 'rigetti.qvm' QCS QVM and pyQuil pyQVM simulator. 'rigetti.qpu' QCS QPU. Tutorials\u00b6 Check out these demos to see the PennyLane-Rigetti plugin in action: Ensemble classification with QCS and Qiskit devices PyTorch and noisy devices You can also try it out using any of the qubit based demos from the PennyLane documentation, for example the tutorial on qubit rotation. Simply replace 'default.qubit' with a 'rigetti.XXX' device if you have an API key for hardware access. dev = qml.device('rigetti.XXX', wires=XXX) index Download Python script Download Notebook View on GitHub Next Contents PennyLane-Rigetti Plugin Devices Tutorials Downloads index Download Python script Download Notebook View on GitHub Related Navigation index modules | next | PennyLane-Rigetti 0.40.0 documentation \u00bb PennyLane-Rigetti Plugin",
    "url": "https://docs.pennylane.ai/projects/rigetti/en/stable/",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 342,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:53.693498"
  },
  {
    "id": "pennylane_6832013386542563083_0",
    "title": "Codebook \u2014 PennyLane",
    "content": "CodebookLearn quantum computing with PennyLane \u2014 the leading tool for programming quantum computers. Explore a specific module or follow a guided path to build your skills step-by-step.Open Codebook MapBrowse ModulesEASILY NAVIGATE THE PENNYLANE CODEBOOKDelve into the advanced topic you've been searching for, or explore some of the most popular learning paths taught by over 110 universities across 34 countries worldwide!Start here! PENNYLANE FUNDAMENTALS CODEBOOK MODULEAccelerate your quantum research breakthroughs with PennyLane! Quickly learn fundamental functions and practical applications of theoretical concepts in this brand-new module.Learn more EASILY NAVIGATE THE PENNYLANE CODEBOOKDelve into the advanced topic you've been searching for, or explore some of the most popular learning paths taught by over 110 universities across 34 countries worldwide!Start here! PENNYLANE FUNDAMENTALS CODEBOOK MODULEAccelerate your quantum research breakthroughs with PennyLane! Quickly learn fundamental functions and practical applications of theoretical concepts in this brand-new module.Learn more EASILY NAVIGATE THE PENNYLANE CODEBOOKDelve into the advanced topic you've been searching for, or explore some of the most popular learning paths taught by over 110 universities across 34 countries worldwide!Start here! Loading...ModulesSelect an area of quantum computing and enhance your expertise through a blend of theory and hands-on codercises with PennyLane.PennyLane FundamentalsLoading...Introduction to Quantum ComputingLoading...Single-Qubit GatesLoading...Circuits with Many QubitsLoading...Hamiltonian Time EvolutionLoading...Noisy Quantum TheoryLoading...Distance MeasuresLoading...Quantum Error CorrectionLoading...Basic Quantum AlgorithmsLoading...Grover's AlgorithmLoading...Quantum Fourier TransformLoading...Quantum Phase EstimationLoading...Shor's AlgorithmLoading...Variational Quantum AlgorithmsLoading...Hamiltonian SimulationLoading...Need help?The Codebook was written, developed, and reviewed by members of the PennyLane team, so we can help.ForumHave a technical question? Join our discussion forum.FeedbackLet us know how we can improve the Codebook.DocumentationGet started with PennyLane using our quickstart guides.",
    "url": "https://pennylane.ai/codebook",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 260,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-16T23:59:57.681963"
  },
  {
    "id": "pennylane_2658740975802064655_0",
    "title": "Discussion Forum \u2014 PennyLane",
    "content": "Category Topics PennyLane Help For help with PennyLane, including questions and help debugging. 1570 Demos Use this category for questions related to PennyLane Demos! 38 Codebook Use this category for questions about the content of the PennyLane Codebook! 254 Quantum Compilation Use this category for questions about topics, techniques, or software implementations. See the Quantum Compilation wiki for more information. 1 Catalyst For all posts related to Catalyst, the package that enables just-in-time (JIT) compilation of PennyLane programs. This includes usage, help, and development. See the Catalyst GitHub (https://github.com/pennylaneai/catalyst) and Documentation (https://docs.pennylane.ai/projects/catalyst/en/latest) for more details. 17 PennyLane Challenges Use this category for questions about the PennyLane Challenges! You can find them at pennylane.ai/challenges. 47 PennyLane Plugins For posts discussing the PennyLane plugins, including questions about usage, help, and development. See the documentation for all currently available plugins. 37 PennyLane Feedback Discussion about PennyLane, how it works, and how we can improve it. 27 PennyLane Development For topics discussing PennyLane development. For bug reports, please use the GitHub issue tracker. 54 Announcements For announcing things 7 Photonic Software For discussion and questions regarding Xanadu\u2019s photonic software offerings. 15 Borealis Use this category for questions about Borealis \u2013 Xanadu\u2019s quantum computer which achieved quantum computational advantage in 2022. 24 FlamingPy For all posts related to FlamingPy, the Python library for efficient simulations of error correction in fault-tolerant quantum computers developed by Xanadu. This includes usage, help, and development. See the FlamingPy GitHub and Documentation for more details. 0",
    "url": "https://discuss.pennylane.ai",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 246,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:02.155047"
  },
  {
    "id": "pennylane_-8517051988128527343_0",
    "title": "Catalyst \u2014 Catalyst 0.13.0-dev9 documentation",
    "content": "Why PennyLane Why PennyLane Features Demos Compilation Datasets Performance Devices Teach Getting Started Getting Started Install Demos Codebook Challenges Support Documentation Documentation How-to demos Development guide Catalyst API GitHub Ecosystem Ecosystem Blog Glossary Videos FAQs GitHub Support Install Navigation index modules | next | Catalyst 0.13.0-dev9 documentation \u00bb Catalyst Table of contents Search Catalyst Overview Installation Quick Start Supported devices AutoGraph guide Sharp bits and debugging tips JAX integration Callbacks and GPUs Release notes Development Architecture PennyLane Frontend Compiler Core MLIR Dialects Compiler Passes Compiler Plugins Quantum Runtime Debugging Tips Custom Devices Roadmap Examples Magic State Distillation Variational Quantum Eigensolver Qubit Rotation QML Optimization with Optax API PennyLane Python Frontend Catalyst Command Line Interface Runtime Device Interface Docs Catalyst Catalyst\u00b6 Release: 0.13.0-dev9 Catalyst is an experimental package that enables just-in-time (JIT) compilation of PennyLane programs. Compile the entire quantum-classical workflow. Installation Learn how to install Catalyst Quickstart Get started using Catalyst with PennyLane GitHub View the Catalyst source code on GitHub Catalyst is currently under heavy development \u2014 if you have suggestions on the API or use-cases you\u2019d like to be covered, please open an GitHub issue or reach out. We\u2019d love to hear about how you\u2019re using the library, collaborate on development, or integrate additional devices and frontends. Key Features\u00b6 Compile the entire quantum-classical workflow, including any optimization loops. Use Catalyst alongside PennyLane directly from Python. Simply decorate quantum code and hybrid functions with @qjit, leading to significant performance improvements over standard Python execution. Access advanced control flow that supports both quantum and classical instructions. Infrastructure for both quantum and classical compilation, allowing you to compile quantum circuits that contain control flow. Built to be end-to-end differentiable. Support for PennyLane-Lightning high performance simulators, and Amazon Braket devices. Additional hardware support, including QPUs, to come. Overview\u00b6 Catalyst currently consists of the following components: Catalyst Compiler. The core Catalyst compiler is built using MLIR, with the addition of a quantum dialect used to represent quantum instructions. This allows for a high-level intermediate representation of the classical and quantum components of the program, resulting in advantages during optimization. Once optimized, the compiler lowers the representation down to LLVM + QIR, and a machine binary is produced. Catalyst Runtime. The runtime is a C++ runtime with multiple-device support based on QIR that enables the execution of Catalyst-compiled quantum programs. A complete list of all backend devices along with the quantum instruction set supported by these runtime implementations can be found by visiting the runtime documentation. In addition, we also provide a Python frontend for PennyLane and JAX: PennyLane JAX frontend. A Python library that provides a @qjit decorator to just-in-time compile PennyLane hybrid quantum-classical programs. In addition, the frontend package provides Python functions for defining Catalyst-compatible control flow structures, gradient, and mid-circuit measurement. Source Code: https://github.com/PennyLaneAI/catalyst Issue Tracker: https://github.com/PennyLaneAI/catalyst/issues If you are having issues, please let us know by posting the issue on our GitHub issue tracker. We also have a PennyLane discussion forum\u2014come join the community and chat with the PennyLane team. Note that we are committed to providing a friendly, safe, and welcoming environment for all. Please read and respect the Code of Conduct. Authors\u00b6 Catalyst is the work of many contributors. If you are doing research using Catalyst, please cite our paper: @article{ Ittah2024, doi = {10.21105/joss.06720}, url = {https://doi.org/10.21105/joss.06720}, year = {2024}, publisher = {The Open Journal}, volume = {9}, number = {99}, pages = {6720}, author = {David Ittah and Ali Asadi and Erick Ochoa Lopez and Sergei Mironov and Samuel Banning and Romain Moyard and Mai Jacob Peng and Josh Izaac}, title = {Catalyst: a Python JIT compiler for auto-differentiable hybrid quantum programs}, journal = {Journal of Open Source Software} } index Download Python script Download Notebook View on GitHub Next Contents Installation Quick Start Supported devices AutoGraph guide Sharp bits and debugging tips JAX integration Callbacks and GPUs Release notes Development Architecture PennyLane Frontend Compiler Core MLIR Dialects Compiler Passes Compiler Plugins Quantum Runtime Debugging Tips Custom Devices Roadmap Examples Magic State Distillation Variational Quantum Eigensolver Qubit Rotation QML Optimization with Optax API PennyLane Python Frontend Catalyst Command Line Interface Runtime Device Interface Navigation index modules | next | Catalyst 0.13.0-dev9 documentation \u00bb Catalyst",
    "url": "https://docs.pennylane.ai/projects/catalyst/en/latest/",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 698,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:04.179323"
  },
  {
    "id": "pennylane_-5201281069281036394_0",
    "title": "Blog \u2014 PennyLane",
    "content": "BlogKeep up with the newest PennyLane features and events, while learning the latest and greatest in quantum programming from quantum coding experts.Search our blog postsAll Blog PostsAlgorithmsAnnouncementsCoding EventsCommunityCompilationHigh-Performance ComputingHow-toPluginsQHackQuantum ChemistryQuantum ComputingQuantum Machine LearningReleasesTalksPennyLane v0.42 and Catalyst v0.12 releasedJuly 15, 2025Category:Releases|Authors:Diego GualaIsaac De VlugtAnton Naim IbrahimJosh IzaacPennyLane v0.42 and Catalyst v0.12 are out, with features including a state-of-the-art Select decomposition, a new QSVT/QSP angle solver for large polynomials, additional Qualtran integration, a more efficient Clifford + T decomposition, compilation down to Pauli product measurements, and more!Top quantum algorithms papers \u2014 Spring 2025 editionJune 26, 2025Category:Algorithms|Authors:Juan Miguel ArrazolaDanial MotlaghWe've selected our favourite papers from the second quarter of 2025. Read our takeaways from the top quantum algorithms papers that we admire and that have been influential to our research.From summer school to state-of-the-art: Xanadu, LANL, and quantum compilationJune 20, 2025Category:Compilation|Authors:David WierichsCelebrating our partnership with Los Alamos National Laboratory.Collaborating with top researchers: How Yale's Quantum Institute created new PennyLane features to fuel their researchJune 09, 2025Category:Announcements|Authors:Isaac De VlugtDantong LiBreakthrough research and collaboration drives PennyLane development. In this blog post, read how researchers at Yale's Quantum Institute collaborated with the PennyLane team to bring their latest research results to users of PennyLane.Quantum Compilation wiki: A modern overview on the unsung hero of quantum computingApril 15, 2025Category:Announcements|Authors:Korbinian KottmannJosh IzaacLorraine YoungThe Quantum Compilation wiki includes overviews and implementations of key compilation techniques for reducing the size of your circuits to run them on next-generation quantum computing hardware.Current page of0",
    "url": "https://pennylane.ai/blog/?page=1",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 243,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:06.602413"
  },
  {
    "id": "pennylane_-7494160340621629527_0",
    "title": "Development guide \u2014 PennyLane 0.42.0 documentation",
    "content": "Why PennyLane Why PennyLane Features Demos Compilation Datasets Performance Devices Teach Getting Started Getting Started Install Demos Codebook Challenges Support Documentation Documentation How-to demos Development guide Catalyst API GitHub Ecosystem Ecosystem Blog Glossary Videos FAQs GitHub Support Install Navigation index modules | next | previous | PennyLane 0.42.0 documentation \u00bb Development guide Table of contents Search Using PennyLane What is PennyLane? Quantum circuits Gradients and training Quantum operators Measurements Dynamic quantum circuits Templates Inspecting circuits Compiling circuits Compiling workflows Importing workflows Quantum Chemistry Quantum Datasets Logging Release news Release notes Deprecations Updated Operators Program capture sharp bits Development Development guide Building a plugin Adding new operators API qml qml.bose qml.compiler qml.data qml.decomposition qml.debugging qml.drawer qml.fermi qml.fourier qml.gradients qml.io qml.kernels qml.labs qml.liealg qml.logging qml.math qml.noise qml.numpy qml.ops.op_math qml.pauli qml.pulse qml.qaoa qml.qchem qml.qcut qml.qnn qml.resource qml.shadows qml.spin qml.transforms Internals qml.capture qml.concurrency qml.devices qml.ftqc qml.measurements qml.pytrees qml.operation qml.queuing qml.tape qml.wires qml.workflow Docs Development guide Development guide\u00b6 The Development guide contains information regarding how to contribute to the PennyLane codebase. The guides below are aimed towards developers and cover how to install PennyLane and its dependencies in development mode, run and add tests, write documentation, as well as general best practices and an architectural overview of PennyLane, plugins, and devices. Installation Installation and dependencies of the PennyLane source code using development mode. Contribution guide How to get involved in the PennyLane community and help improve PennyLane. Software tests Installing dependencies, running the PennyLane test suite and measuring coverage. Documentation Building and contributing modules and packages to the PennyLane documentation. Submitting a pull request Creating and submitting a pull request to the PennyLane repository. Architecture Design Records Proposing important PennyLane architectural decisions. Logging guidelines Defining how to develop using logging supports in PennyLane. Architectural overview Architectural overview of PennyLane, its plugins and devices. Deprecations and Removals Ensuring safety when introducing breaking changes to PennyLane. development/guide Download Python script Download Notebook View on GitHub Previous Next Using PennyLane What is PennyLane? Quantum circuits Gradients and training Quantum operators Measurements Dynamic quantum circuits Templates Inspecting circuits Compiling circuits Compiling workflows Importing workflows Quantum Chemistry Quantum Datasets Logging Release news Release notes Deprecations Updated Operators Program capture sharp bits Development Development guide Installation and dependencies Contributing to PennyLane Software tests Documentation Submitting a pull request Architecture Design Records Architectural overview Logging development guidelines Deprecations and Removals Building a plugin Adding new operators API qml qml.bose qml.compiler qml.data qml.decomposition qml.debugging qml.drawer qml.fermi qml.fourier qml.gradients qml.io qml.kernels qml.labs qml.liealg qml.logging qml.math qml.noise qml.numpy qml.ops.op_math qml.pauli qml.pulse qml.qaoa qml.qchem qml.qcut qml.qnn qml.resource qml.shadows qml.spin qml.transforms Internals qml.capture qml.concurrency qml.devices qml.ftqc qml.measurements qml.pytrees qml.operation qml.queuing qml.tape qml.wires qml.workflow Navigation index modules | next | previous | PennyLane 0.42.0 documentation \u00bb Development guide",
    "url": "https://docs.pennylane.ai/en/stable/development/guide.html",
    "source": "pennylane",
    "doc_type": "guide",
    "metadata": {
      "word_count": 450,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:12.357534"
  },
  {
    "id": "pennylane_4031940183117481008_0",
    "title": "Coding Challenges \u2014 PennyLane",
    "content": "Coding ChallengesGet hands-on experience with quantum computing in PennyLane\u2013from quantum chemistry to quantum machine learning\u2013using our exclusive coding challenges.Search challengesChoose a categoryAll ChallengesGetting StartedAlgorithmsError CorrectionHamiltoniansOptimizationQuantum ChemistryQuantum CircuitsQuantum InformationQuantum Machine LearningNewest Coding Challenges PreviousBeginnerA Shor ThingProgram Shor's 9-qubit code.AdvancedChanging QubitsRoute a quantum state through the virus-ridden channel.IntermediateDon't Hit the GroundCalculate the half-life of an excited state.AdvancedReaching for the RatioOptimize the efficiency of your QAOA routine.BeginnerHydro BondingCalculate the ground energy of a Hydrogen molecule.AdvancedAn Itch to SwitchSwitch basis state qubits with your friend.BeginnerA Shor ThingProgram Shor's 9-qubit code.AdvancedChanging QubitsRoute a quantum state through the virus-ridden channel.IntermediateDon't Hit the GroundCalculate the half-life of an excited state.AdvancedReaching for the RatioOptimize the efficiency of your QAOA routine.BeginnerHydro BondingCalculate the ground energy of a Hydrogen molecule.AdvancedAn Itch to SwitchSwitch basis state qubits with your friend.BeginnerA Shor ThingProgram Shor's 9-qubit code.AdvancedChanging QubitsRoute a quantum state through the virus-ridden channel.IntermediateDon't Hit the GroundCalculate the half-life of an excited state. NextSee challenges by difficulty:BeginnerIntermediateAdvancedGetting Started See all (7)BeginnerBegin HereSolve a simple challenge to become familiar with this platform.IntermediateCertificate Challenge: Introduction to PennyLaneTest your basics of PennyLane and earn a certificate.BeginnerReturning Expectation ValuesBuild a PennyLane circuit that returns the expectation value.BeginnerReturning Tensor Product ObservablesReturn the expectation value of a 2-qubit observable.BeginnerComparing Expectation ValuesInvestigate how gate orderings affect measurement outcomes.BeginnerReturning ProbabilitiesBuild a PennyLane circuit that returns measurement probabilities.BeginnerStates and ProbabilitiesPrepare a two-qubit state and measure output probabilities. 1234 See all (7)Algorithms See all (7)AdvancedReaching for the RatioOptimize the efficiency of your QAOA routine.BeginnerIntroduction to LCUsApply a non-unitary operator to a quantum state.AdvancedThe Lazy ColleagueIdentify a lazy co-worker using an oracle.AdvancedThe False ProofUse a quantum circuit to debunk a flawed proof.AdvancedCounting MountainsCount peaks and valleys using quantum circuits.AdvancedNoisy QAOAFind the approximation ratio of a noisy QAOA circuit.AdvancedThe Oracle of the Exact DistanceBuild an oracle that verifies state distances. 1234 See all (7)Error Correction See all (2)BeginnerA Shor ThingProgram Shor's 9-qubit code.AdvancedChanging QubitsRoute a quantum state through the virus-ridden channel.See all (2)Hamiltonians See all (3)AdvancedA Noisy Heisenberg ModelSimulate the Heisenberg Hamiltonian with added noise.BeginnerA Simple TrotterizationImplement the unitary evolution of a Hamiltonian.IntermediateHamiltonians and Operator ArithmeticCreate a given Hamiltonian using operator arithmetic.See all (3)Optimization See all (5)IntermediateSecrets in SpacetimeDevelop a method to test a noisy encrypter.BeginnerKeeping Expectations LowUse an optimization routine to minimize an expectation value.BeginnerThe Hessian of a CircuitUse the parameter-shift rule to calculate the Hessian.BeginnerThe Parameter-Shift RuleCalculate the gradient of a variational circuit.IntermediateRevisiting Schrodinger's CatDesign an experiment to make a zombie cat. 12 See all (5)Quantum Chemistry See all (2)BeginnerHydro BondingCalculate the ground energy of a Hydrogen molecule.IntermediateIsing UprisingUse the VQE on the Transverse Ising Model.See all (2)Quantum Circuits See all (4)BeginnerMid-Circuit MeasurementsConstruct a circuit with mid-circuit measurements.BeginnerUndo that ComputationImplement a reversible computation.BeginnerMy First Quantum SimulationBuild a toy version of PennyLane using numpy.BeginnerUniversality of Single-Qubit GatesCreate an arbitrary single-qubit gate using rotations. 1 See all (4)Quantum Information See all (5)AdvancedAn Itch to SwitchSwitch basis state qubits with your friend.IntermediateDon't Hit the GroundCalculate the half-life of an excited state.IntermediateA Pauli-Worded ProblemIdentify a state from noisy copies of it.IntermediateQuantum State DiscriminationDistinguish two qubit states using one measurement.IntermediateRecoherenceFind the recoherence time for a simple 5-spin system 12 See all (5)Quantum Machine Learning See all (1)IntermediateThe Super ParameterExplore the concept of expressivity in QML.See all (1)",
    "url": "https://pennylane.ai/challenges",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 530,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:15.459478"
  },
  {
    "id": "pennylane_-7699126493480206148_0",
    "title": "PennyLane-Qiskit Plugin \u2014 PennyLane-Qiskit 0.42.0 documentation",
    "content": "Why PennyLane Why PennyLane Features Demos Compilation Datasets Performance Devices Teach Getting Started Getting Started Install Demos Codebook Challenges Support Documentation Documentation How-to demos Development guide Catalyst API GitHub Ecosystem Ecosystem Blog Glossary Videos FAQs GitHub Support Install Navigation index modules | next | PennyLane-Qiskit 0.42.0 documentation \u00bb PennyLane-Qiskit Plugin Table of contents Search PennyLane-Qiskit Overview Installation Support Usage The Aer device The BasicSim device The Remote device API pennylane-qiskit Docs PennyLane-Qiskit Plugin Show on GitHub PennyLane-Qiskit Plugin\u00b6 Release: 0.42.0 The PennyLane-Qiskit plugin integrates the Qiskit quantum computing framework with PennyLane\u2019s quantum machine learning capabilities. PennyLane is a cross-platform Python library for quantum machine learning, automatic differentiation, and optimization of hybrid quantum-classical computations. Qiskit is an open-source framework for quantum computing. Once the PennyLane-Qiskit plugin is installed, the Qiskit devices can be accessed straightaway in PennyLane, without the need to import new packages. Devices\u00b6 The following devices are available: 'qiskit.aer' Qiskit's staple simulator with great features such as noise models. 'qiskit.basicsim' A simple local Python simulator running the Qiskit ``BasicSimulator``. 'qiskit.remote' Allows integration with any Qiskit backend. For example, the 'qiskit.aer' device with two wires is called like this: import pennylane as qml dev = qml.device('qiskit.aer', wires=2) Backends\u00b6 Qiskit devices have different backends, which define the actual simulator or hardware used by the device. A backend instance should be initalized and passed to the device. Different simulator backends are optimized for different purposes. To change what backend is used, a simulator backend can be defined as follows: from qiskit_aer import UnitarySimulator dev = qml.device('qiskit.aer', wires=<num_qubits>, backend=UnitarySimulator()) Note For 'qiskit.aer', PennyLane chooses the aer_simulator as the default backend if no backend is specified. For more details on the aer_simulator, including available backend options, see Qiskit Aer Simulator documentation. To access a real device, we can use the 'qiskit.remote' device. A real hardware backend can be defined as follows: from qiskit_ibm_runtime import QiskitRuntimeService QiskitRuntimeService.save_account(channel=\"ibm_quantum\", token=\"<IQP_TOKEN>\") # To access saved credentials for the IBM quantum channel and select an instance service = QiskitRuntimeService(channel=\"ibm_quantum\", instance=\"my_hub/my_group/my_project\") backend = service.least_busy(operational=True, simulator=False, min_num_qubits=<num_qubits>) # passing a string in backend would result in an error dev = qml.device('qiskit.remote', wires=<num_qubits>, backend=backend) Tutorials\u00b6 Check out these demos to see the PennyLane-Qiskit plugin in action: Ensemble classification with Forest and Qiskit devices Quantum volume Using PennyLane with IBM's quantum devices and Qiskit You can also try it out using any of the qubit based demos from the PennyLane documentation, for example the tutorial on qubit rotation. Simply replace 'default.qubit' with any of the available Qiskit devices, such as 'qiskit.aer', or 'qiskit.remote' if you have an API key for hardware access. index Download Python script Download Notebook View on GitHub Next Installation Support Usage The Aer device The BasicSim device The Remote device API pennylane-qiskit Navigation index modules | next | PennyLane-Qiskit 0.42.0 documentation \u00bb PennyLane-Qiskit Plugin",
    "url": "https://docs.pennylane.ai/projects/qiskit/en/stable/",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 465,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:18.264258"
  },
  {
    "id": "pennylane_-5654848085524373426_0",
    "title": "qml \u2014 PennyLane 0.42.0 documentation",
    "content": "Why PennyLane Why PennyLane Features Demos Compilation Datasets Performance Devices Teach Getting Started Getting Started Install Demos Codebook Challenges Support Documentation Documentation How-to demos Development guide Catalyst API GitHub Ecosystem Ecosystem Blog Glossary Videos FAQs GitHub Support Install Navigation index modules | next | previous | PennyLane 0.42.0 documentation \u00bb qml Table of contents Search Using PennyLane What is PennyLane? Quantum circuits Gradients and training Quantum operators Measurements Dynamic quantum circuits Templates Inspecting circuits Compiling circuits Compiling workflows Importing workflows Quantum Chemistry Quantum Datasets Logging Release news Release notes Deprecations Updated Operators Program capture sharp bits Development Development guide Building a plugin Adding new operators API qml qml.bose qml.compiler qml.data qml.decomposition qml.debugging qml.drawer qml.fermi qml.fourier qml.gradients qml.io qml.kernels qml.labs qml.liealg qml.logging qml.math qml.noise qml.numpy qml.ops.op_math qml.pauli qml.pulse qml.qaoa qml.qchem qml.qcut qml.qnn qml.resource qml.shadows qml.spin qml.transforms Internals qml.capture qml.concurrency qml.devices qml.ftqc qml.measurements qml.pytrees qml.operation qml.queuing qml.tape qml.wires qml.workflow Docs qml qml\u00b6 This is the top level module from which all basic functions and classes of PennyLane can be directly imported. Functions\u00b6 about() Prints the information for pennylane installation. add_decomps(op_type, *decomps) Globally registers new decomposition rules with an operator class. add_noise(tape, noise_model[, level]) Insert operations according to a provided noise model. adjoint(fn[, lazy]) Create the adjoint of an Operator or a function that applies the adjoint of the provided function. adjoint_metric_tensor(tape) Implements the adjoint method outlined in Jones to compute the metric tensor. apply(op[, context]) Apply an instantiated operator or measurement to a queuing context. apply_controlled_Q(tape, wires, target_wire, ...) Applies the transform that performs a controlled version of the \\(\\mathcal{Q}\\) unitary defined in this paper. assert_equal(op1, op2[, check_interface, ...]) Function to assert that two operators, measurements, or tapes are equal batch_input(tape, argnum) Transform a circuit to support an initial batch dimension for gate inputs. batch_params(tape[, all_operations]) Transform a QNode to support an initial batch dimension for operation parameters. batch_partial(qnode[, all_operations, ...]) Create a batched partial callable object from the QNode specified. binary_mapping(bose_operator[, n_states, ...]) Convert a bosonic operator to a qubit operator using the standard-binary mapping. bloq_registers(bloq) Reads a Qualtran Bloq signature and returns a dictionary mapping the Bloq's register names to Wires. bravyi_kitaev(fermi_operator, n[, ps, ...]) Convert a fermionic operator to a qubit operator using the Bravyi-Kitaev mapping. breakpoint() A function which freezes execution and launches the PennyLane debugger (PLDB). center(g[, pauli]) Compute the center of a Lie algebra. christiansen_mapping(bose_operator[, ps, ...]) Convert a bosonic operator to a qubit operator using the Christiansen mapping. classical_shadow(wires[, seed]) The classical shadow measurement protocol. clifford_t_decomposition(tape[, epsilon, ...]) Decomposes a circuit into the Clifford+T basis. comm(op1, op2[, pauli]) Compute commutator between two operators in PennyLane commutation_dag(tape) Construct the pairwise-commutation DAG (directed acyclic graph) representation of a quantum circuit. commutator(op1, op2[, pauli]) Compute commutator between two operators in PennyLane compile(tape[, pipeline, basis_set, num_passes]) Compile a circuit by applying a series of transforms to a quantum function. cond(condition[, true_fn, false_fn, elifs]) Quantum-compatible if-else conditionals --- condition quantum operations on parameters such as the results of mid-circuit qubit measurements. counts([op, wires, all_outcomes]) Sample from the supplied observable, with the number of shots determined from the dev.shots attribute of the corresponding device, returning the number of counts for each sample. ctrl(op, control[, control_values, ...]) Create a method that applies a controlled version of the provided op. cut_circuit(tape[, auto_cutter, ...]) Cut up a quantum circuit into smaller circuit fragments. cut_circuit_mc(tape[, ...]) Cut up a circuit containing sample measurements into smaller fragments using a Monte Carlo method. debug_expval(op) Compute the expectation value of an observable at the current point in the quantum circuit. debug_probs([wires, op]) Compute the probability distribution for the state at the current point in the quantum circuit. debug_state() Compute the quantum state at the current point in the quantum circuit. debug_tape() Access the tape of the quantum circuit. defer_measurements(tape[, ...]) Quantum function transform that substitutes operations conditioned on measurement outcomes to controlled operations. density_matrix(wires) Quantum density matrix in the computational basis. device(name, *args, **kwargs) Load a device and return the instance. dot(coeffs, ops[, pauli, grouping_type, method]) Returns the dot product between the coeffs vector and the ops list of operators. draw(qnode[, wire_order, show_all_wires, ...]) Create a function that draws the given QNode or quantum function. draw_mpl(qnode[, wire_order, ...]) Draw a qnode with matplotlib dynamic_one_shot(tape, **kwargs) Transform a QNode to into several one-shot tapes to support dynamic circuit execution. eigvals(op[, k, which]) The eigenvalues of one or more operations. equal(op1, op2[, check_interface, ...]) Function for determining operator, measurement, and tape equality. evolve() This method is dispatched and its functionality depends on the type of the input op. execute(tapes, device[, diff_method, ...]) A function for executing a batch of tapes on a device with compatibility for auto-differentiation. exp(op[, coeff, num_steps, id]) Take the exponential of an Operator times a coefficient. expval(op) Expectation value of the supplied observable. for_loop([start, ]stop[, step]) A qjit() compatible for-loop for PennyLane programs. from_openfermion(openfermion_op[, wires, tol]) Convert OpenFermion FermionOperator to PennyLane FermiWord or FermiSentence and OpenFermion QubitOperator to PennyLane LinearCombination. from_pyquil(pyquil_program) Loads pyQuil Program objects by using the converter in the PennyLane-Rigetti plugin. from_qasm(quantum_circuit[, measurements]) Loads quantum circuits from a QASM string using the converter in the PennyLane-Qiskit plugin. from_qasm3(quantum_circuit[, wire_map]) Converts an OpenQASM 3.0 circuit into a quantum function that can be used within a QNode. from_qiskit(quantum_circuit[, measurements]) Converts a Qiskit QuantumCircuit into a PennyLane quantum function. from_qiskit_noise(noise_model[, verbose, ...]) Converts a Qiskit NoiseModel into a PennyLane NoiseModel. from_qiskit_op(qiskit_op[, params, wires]) Converts a Qiskit SparsePauliOp into a PennyLane Operator. from_quil(quil) Loads quantum circuits from a Quil string using the converter in the PennyLane-Rigetti plugin. from_quil_file(quil_filename) Loads quantum circuits from a Quil file using the converter in the PennyLane-Rigetti plugin. generator(op[, format]) Returns the generator of an operation. import_operator(qubit_observable[, format, ...]) Convert an external operator to a PennyLane operator. is_commuting(operation1, operation2) Check if two operations are commuting using a lookup table. is_hermitian(op) Check if the operation is hermitian. is_unitary(op) Check if the operation is unitary. iterative_qpe(base, aux_wire, iters) Performs the iterative quantum phase estimation circuit. jacobian(func[, argnum, method, h]) Returns the Jacobian as a callable function of vector-valued (functions of) QNodes. jordan_wigner(fermi_operator[, ps, ...]) Convert a fermionic operator to a qubit operator using the Jordan-Wigner mapping. jvp(f, params, tangents[, method, h, argnum]) A qjit() compatible Jacobian-vector product of PennyLane programs. layer(template, depth, *args, **kwargs) Repeatedly applies a unitary a given number of times. lie_closure(generators, *[, max_iterations, ...]) Compute the (dynamical) Lie algebra from a set of generators. list_decomps(op_type) Lists all stored decomposition rules for an operator class. map_wires(input, wire_map[, queue, replace]) Changes the wires of an operator, tape, qnode or quantum function according to the given wire map. matrix(op[, wire_order]) The dense matrix representation of an operation or quantum circuit. measure(wires[, reset, postselect]) Perform a mid-circuit measurement in the computational basis on the supplied qubit. metric_tensor(tape[, argnum, approx, ...]) Returns a function that computes the metric tensor of a given QNode or quantum tape. mutual_info(wires0, wires1[, log_base]) Mutual information between the subsystems prior to measurement: parity_transform(fermi_operator, n[, ps, ...]) Convert a fermionic operator to a qubit operator using the parity mapping. pattern_matching(circuit_dag, pattern_dag) Function that applies the pattern matching algorithm and returns the list of maximal matches. pattern_matching_optimization(tape, ...[, ...]) Quantum function transform to optimize a circuit given a list of patterns (templates). pauli_decompose(H[, hide_identity, ...]) Decomposes a Hermitian matrix into a linear combination of Pauli operators. paulix_ops(generators, num_qubits) Generate the single qubit Pauli-X operators \\(\\sigma^{x}_{i}\\) for each symmetry \\(\\tau_j\\), such that it anti-commutes with \\(\\tau_j\\) and commutes with all others symmetries \\(\\tau_{k\\neq j}\\). poly_to_angles(poly, routine[, angle_solver]) Computes the angles needed to implement a polynomial transformation with quantum signal processing (QSP), quantum singular value transformation (QSVT) or generalized quantum signal processing (GQSP). pow(base[, z, lazy, id]) Raise an Operator to a power. probs([wires, op]) Probability of each computational basis state. prod(*ops[, id, lazy]) Construct an operator which represents the generalized product of the operators provided. purity(wires) The purity of the system prior to measurement. qjit([fn, compiler]) A decorator for just-in-time compilation of hybrid quantum programs in PennyLane. qnode(func, device[, interface, ...]) Represents a quantum node in the hybrid computational graph. qsvt(A, poly, encoding_wires[, ...]) Implements the Quantum Singular Value Transformation (QSVT) for a matrix or Hamiltonian A, using a polynomial defined by poly and a block encoding specified by block_encoding. quantum_monte_carlo(tape, wires, ...) Applies the transform quantum Monte Carlo estimation algorithm. refresh_devices() Scan installed PennyLane plugins to refresh the device list. register_condition(condition[, qfunc]) Binds a condition to a decomposition rule for when it is applicable. register_resources(resources[, qfunc]) Binds a quantum function to its required resources. registers(register_dict) Returns a dictionary that maps register names to Wires. resource_rep(op_type, **params) Binds an operator type with additional resource parameters. right_canonicalize_mps(mps) Transform a matrix product state (MPS) into its right-canonical form. s_prod(scalar, operator[, lazy, id]) Construct an operator which is the scalar product of the given scalar and operator provided. sample([op, wires]) Sample from the supplied observable, with the number of shots determined from the dev.shots attribute of the corresponding device, returning raw samples. set_shots(qnode[, shots]) Transform used to set or update a circuit's shots. shadow_expval(H[, k, seed]) Compute expectation values using classical shadows in a differentiable manner. simplify(input) Simplifies an operator, tape, qnode or quantum function by reducing its arithmetic depth or number of rotation parameters. snapshots(tape) This transform processes Snapshot instances contained in a circuit, depending on the compatibility of the execution device. specs(qnode[, level]) Resource information about a quantum circuit. state() Quantum state in the computational basis. structure_constants(g[, pauli, matrix, ...]) Compute the structure constants that make up the adjoint representation of a Lie algebra. sum(*summands[, grouping_type, method, id, lazy]) Construct an operator which is the sum of the given operators. symmetry_generators(h) Compute the generators \\(\\{\\tau_1, \\ldots, \\tau_k\\}\\) for a Hamiltonian over the binary field \\(\\mathbb{Z}_2\\). taper(h, generators, paulixops, paulix_sector) Transform a Hamiltonian with a Clifford operator and then taper qubits. taper_operation(operation, generators, ...) Transform a gate operation with a Clifford operator and then taper qubits. to_bloq(circuit[, map_ops, custom_mapping]) Converts a PennyLane QNode, Qfunc, or Operation to the corresponding Qualtran Bloq. to_openfermion(pennylane_op[, wires, tol]) Convert a PennyLane operator to OpenFermion QubitOperator or FermionOperator. to_openqasm(qnode[, wires, rotations, ...]) Convert a circuit to an OpenQASM 2.0 program. transform(quantum_transform[, ...]) Generalizes a function that transforms tapes to work with additional circuit-like objects such as a QNode. transform_angles(angles, routine1, routine2) Converts angles for quantum signal processing (QSP) and quantum singular value transformation (QSVT) routines. trotterize(qfunc[, n, order, reverse]) Generates higher order Suzuki-Trotter product formulas from a set of operations defined in a function. unary_mapping(bose_operator[, n_states, ps, ...]) Convert a bosonic operator to a qubit operator using the unary mapping. var(op) Variance of the supplied observable. version() Returns the PennyLane version number. vjp(f, params, cotangents[, method, h, argnum]) A qjit() compatible Vector-Jacobian product of PennyLane programs. vn_entropy(wires[, log_base]) Von Neumann entropy of the system prior to measurement. while_loop(cond_fn[, allow_array_resizing]) A qjit() compatible for-loop for PennyLane programs. Classes\u00b6 AQFT(order, wires) Apply an approximate quantum Fourier transform (AQFT). AdagradOptimizer([stepsize, eps]) Gradient-descent optimizer with past-gradient-dependent learning rate in each dimension. AdamOptimizer([stepsize, beta1, beta2, eps]) Gradient-descent optimizer with adaptive learning rate, first and second moment. AdaptiveOptimizer([param_steps, stepsize]) Optimizer for building fully trained quantum circuits by adding gates adaptively. Adder(k, x_wires[, mod, work_wires, id]) Performs the in-place modular addition operation. AllSinglesDoubles(weights, wires, hf_state) Builds a quantum circuit to prepare correlated states of molecules by applying all SingleExcitation and DoubleExcitation operations to the initial Hartree-Fock state. AmplitudeAmplification(U, O[, iters, ...]) Applies amplitude amplification. AmplitudeDamping(gamma, wires[, id]) Single-qubit amplitude damping error channel. AmplitudeEmbedding(features, wires[, ...]) Encodes \\(2^n\\) features into the amplitude vector of \\(n\\) qubits. AngleEmbedding(features, wires[, rotation, id]) Encodes \\(N\\) features into the rotation angles of \\(n\\) qubits, where \\(N \\leq n\\). ApproxTimeEvolution(hamiltonian, time, n[, id]) Applies the Trotterized time-evolution operator for an arbitrary Hamiltonian, expressed in terms of Pauli gates. ArbitraryStatePreparation(weights, wires[, id]) Implements an arbitrary state preparation on the specified wires. ArbitraryUnitary(weights, wires[, id]) Implements an arbitrary unitary on the specified wires. Barrier(wires) The Barrier operator, used to separate the compilation process into blocks or as a visual tool. BasicEntanglerLayers(weights[, wires, ...]) Layers consisting of one-parameter single-qubit rotations on each qubit, followed by a closed chain or ring of CNOT gates. BasisEmbedding(features, wires[, id]) Encodes \\(n\\) binary features into a basis state of \\(n\\) qubits. BasisRotation(wires, unitary_matrix[, check, id]) Implement a circuit that provides a unitary that can be used to do an exact single-body basis rotation. BasisState(state, wires) Prepares a single computational basis state. Beamsplitter(theta, phi, wires[, id]) Beamsplitter interaction. BitFlip(p, wires[, id]) Single-qubit bit flip (Pauli \\(X\\)) error channel. BlockEncode(A, wires) Construct a unitary \\(U(A)\\) such that an arbitrary matrix \\(A\\) is encoded in the top-left block. BooleanFn(fn[, name]) Wrapper for simple callables with Boolean output that can be manipulated and combined with bitwise operators. BoseSentence(operator) Dictionary used to represent a Bose sentence, a linear combination of Bose words, with the keys as BoseWord instances and the values correspond to coefficients. BoseWord(operator) Dictionary used to represent a Bose word, a product of bosonic creation and annihilation operators, that can be constructed from a standard dictionary. CCZ(wires) CCZ (controlled-controlled-Z) gate. CH(wires) The controlled-Hadamard operator CNOT(wires) The controlled-NOT operator CPhase alias of ControlledPhaseShift CPhaseShift00(phi, wires[, id]) A qubit controlled phase shift. CPhaseShift01(phi, wires[, id]) A qubit controlled phase shift. CPhaseShift10(phi, wires[, id]) A qubit controlled phase shift. CRX(phi, wires[, id]) The controlled-RX operator CRY(phi, wires[, id]) The controlled-RY operator CRZ(phi, wires[, id]) The controlled-RZ operator CRot(phi, theta, omega, wires[, id]) The controlled-Rot operator CSWAP(wires) The controlled-swap operator CVNeuralNetLayers(theta_1, phi_1, varphi_1, ...) A sequence of layers of a continuous-variable quantum neural network, as specified in Killoran et al. (2019). CY(wires) The controlled-Y operator CZ(wires) The controlled-Z operator CatState(a, phi, p, wires[, id]) Prepares a cat state. CircuitGraph(ops, obs, wires[, par_info, ...]) Represents a quantum circuit as a directed acyclic graph. ClassicalShadow(bits, recipes[, wire_map]) Class for classical shadow post-processing expectation values, approximate states, and entropies. CoherentState(a, phi, wires[, id]) Prepares a coherent state. CommutingEvolution(hamiltonian, time[, ...]) Applies the time-evolution operator for a Hamiltonian expressed as a linear combination of mutually commuting Pauli words. Configuration(name) Configuration class. ControlledAddition(s, wires[, id]) Controlled addition operation. ControlledPhase(s, wires[, id]) Controlled phase operation. ControlledPhaseShift(phi, wires[, id]) A qubit controlled phase shift. ControlledQubitUnitary(U, wires) Apply an arbitrary fixed unitary matrix U to wires. ControlledQutritUnitary(U, control_wires, ...) Apply an arbitrary fixed unitary to wires with control from the control_wires. ControlledSequence(base, control[, id]) Creates a sequence of controlled gates raised to decreasing powers of 2. CosineWindow(wires) Prepares an initial state with a cosine wave function. CrossKerr(kappa, wires[, id]) Cross-Kerr interaction. CubicPhase(gamma, wires[, id]) Cubic phase shift. DepolarizingChannel(p, wires[, id]) Single-qubit symmetrically depolarizing error channel. DiagonalQubitUnitary(D, wires) Apply an arbitrary diagonal unitary matrix with a dimension that is a power of two. DisplacedSqueezedState(a, phi_a, r, phi_r, wires) Prepares a displaced squeezed vacuum state. Displacement(a, phi, wires[, id]) Phase space displacement. DisplacementEmbedding(features, wires[, ...]) Encodes \\(N\\) features into the displacement amplitudes \\(r\\) or phases \\(\\phi\\) of \\(M\\) modes, where \\(N\\leq M\\). DoubleExcitation(phi, wires[, id]) Double excitation rotation. DoubleExcitationMinus(*params[, wires, id]) Double excitation rotation with negative phase-shift outside the rotation subspace. DoubleExcitationPlus(phi, wires[, id]) Double excitation rotation with positive phase-shift outside the rotation subspace. ECR(wires) An echoed RZX(\\(\\pi/2\\)) gate. Elbow alias of TemporaryAND FABLE(input_matrix, wires[, tol, id]) Construct a unitary with the fast approximate block encoding method. FermiA(orbital) The fermionic annihilation operator \\(a\\) FermiC(orbital) The fermionic creation operator \\(a^{\\dagger}\\) FermiSentence(operator) Immutable dictionary used to represent a Fermi sentence, a linear combination of Fermi words, with the keys as FermiWord instances and the values correspond to coefficients. FermiWord(operator) Immutable dictionary used to represent a Fermi word, a product of fermionic creation and annihilation operators, that can be constructed from a standard dictionary. FermionicDoubleExcitation(weight[, wires1, ...]) Circuit to exponentiate the tensor product of Pauli matrices representing the double-excitation operator entering the Unitary Coupled-Cluster Singles and Doubles (UCCSD) ansatz. FermionicSWAP(phi, wires[, id]) Fermionic SWAP rotation. FermionicSingleExcitation(weight[, wires, id]) Circuit to exponentiate the tensor product of Pauli matrices representing the single-excitation operator entering the Unitary Coupled-Cluster Singles and Doubles (UCCSD) ansatz. FlipSign(n, wires[, id]) Flips the sign of a given basis state. FockDensityMatrix(state, wires[, id]) Prepare subsystems using the given density matrix in the Fock basis. FockState(n, wires[, id]) Prepares a single Fock state. FockStateProjector(n, wires[, id]) The number state observable \\(\\ket{n}\\bra{n}\\). FockStateVector(state, wires[, id]) Prepare subsystems using the given ket vector in the Fock basis. FromBloq(bloq, wires) An adapter for using a Qualtran Bloq as a PennyLane Operation. GQSP(unitary, angles, control[, id]) Implements the generalized quantum signal processing (GQSP) circuit. GateFabric(weights, wires, init_state[, ...]) Implements a local, expressive, and quantum-number-preserving ansatz proposed by Anselmetti et al. (2021). GaussianState(V, r, wires[, id]) Prepare subsystems in a given Gaussian state. GellMann(wires[, index, id]) The Gell-Mann observables for qutrits GeneralizedAmplitudeDamping(gamma, p, wires) Single-qubit generalized amplitude damping error channel. GlobalPhase(phi[, wires, id]) A global phase operation that multiplies all components of the state by \\(e^{-i \\phi}\\). GradientDescentOptimizer([stepsize]) Basic gradient-descent optimizer. GroverOperator(wires[, work_wires, id]) Performs the Grover Diffusion Operator. H alias of Hadamard Hadamard(wires) The Hadamard operator Hamiltonian alias of LinearCombination Hermitian(A, wires[, id]) An arbitrary Hermitian observable. HilbertSchmidt(*params, v_function, v_wires, ...) Create a Hilbert-Schmidt template that can be used to compute the Hilbert-Schmidt Test (HST). I alias of Identity IQPEmbedding(features, wires[, n_repeats, ...]) Encodes \\(n\\) features into \\(n\\) qubits using diagonal gates of an IQP circuit. ISWAP(wires) The i-swap operator Identity([wires, id]) The Identity operator IntegerComparator(value, geq, wires) Apply a controlled Pauli X gate using integer comparison as the condition. Interferometer(theta, phi, varphi, wires[, ...]) General linear interferometer, an array of beamsplitters and phase shifters. InterferometerUnitary(U, wires[, id]) A linear interferometer transforming the bosonic operators according to the unitary matrix \\(U\\). IsingXX(phi, wires[, id]) Ising XX coupling gate IsingXY(phi, wires[, id]) Ising (XX + YY) coupling gate IsingYY(phi, wires[, id]) Ising YY coupling gate IsingZZ(phi, wires[, id]) Ising ZZ coupling gate Kerr(kappa, wires[, id]) Kerr interaction. LocalHilbertSchmidt(*params, v_function, ...) Create a Local Hilbert-Schmidt template that can be used to compute the Local Hilbert-Schmidt Test (LHST). MERA(wires, n_block_wires, block, n_params_block) The MERA template broadcasts an input circuit across many wires following the architecture of a multi-scale entanglement renormalization ansatz tensor network. MPS(wires, n_block_wires, block[, ...]) The MPS template broadcasts an input circuit across many wires following the architecture of a Matrix Product State tensor network. MPSPrep(mps, wires[, work_wires, ...]) Prepares an initial state from a matrix product state (MPS) representation. ModExp(x_wires, output_wires, base[, mod, ...]) Performs the out-place modular exponentiation operation. MomentumOptimizer([stepsize, momentum]) Gradient-descent optimizer with momentum. MomentumQNGOptimizer([stepsize, momentum, ...]) A generalization of the Quantum Natural Gradient (QNG) optimizer by considering a discrete-time Langevin equation with QNG force. MottonenStatePreparation(state_vector, wires) Prepares an arbitrary state on the given wires using a decomposition into gates developed by M\u00f6tt\u00f6nen et al. (2004). MultiControlledX([wires, control_values, ...]) Apply a PauliX gate controlled on an arbitrary computational basis state. MultiRZ(theta, wires[, id]) Arbitrary multi Z rotation. Multiplier(k, x_wires[, mod, work_wires, id]) Performs the in-place modular multiplication operation. NesterovMomentumOptimizer([stepsize, momentum]) Gradient-descent optimizer with Nesterov momentum. NoiseModel(model_map[, meas_map]) Builds a noise model based on the mappings of conditionals to callables that define noise operations using some optional metadata. NumberOperator(wires) The photon number observable \\(\\langle \\hat{n}\\rangle\\). OrbitalRotation(phi, wires[, id]) Spin-adapted spatial orbital rotation. OutAdder(x_wires, y_wires, output_wires[, ...]) Performs the out-place modular addition operation. OutMultiplier(x_wires, y_wires, output_wires) Performs the out-place modular multiplication operation. OutPoly(polynomial_function, ...[, mod, ...]) Performs the out-of-place polynomial operation. PCPhase(phi, dim, wires) A projector-controlled phase gate. PSWAP(phi, wires[, id]) Phase SWAP gate ParticleConservingU1(weights, wires[, ...]) Implements the heuristic VQE ansatz for quantum chemistry simulations using the particle-conserving gate \\(U_{1,\\mathrm{ex}}\\) proposed by Barkoutsos et al. in arXiv:1805.04340. ParticleConservingU2(weights, wires[, ...]) Implements the heuristic VQE ansatz for Quantum Chemistry simulations using the particle-conserving entangler \\(U_\\mathrm{ent}(\\vec{\\theta}, \\vec{\\phi})\\) proposed in arXiv:1805.04340. PauliError(operators, p, wires[, id]) Pauli operator error channel for an arbitrary number of qubits. PauliRot(theta, pauli_word, wires[, id]) Arbitrary Pauli word rotation. PauliX(wires[, id]) The Pauli X operator PauliY(wires[, id]) The Pauli Y operator PauliZ(wires[, id]) The Pauli Z operator Permute(permutation, wires[, id]) Applies a permutation to a set of wires. PhaseAdder(k, x_wires[, mod, work_wire, id]) Performs the in-place modular phase addition operation. PhaseDamping(gamma, wires[, id]) Single-qubit phase damping error channel. PhaseFlip(p, wires[, id]) Single-qubit bit flip (Pauli \\(Z\\)) error channel. PhaseShift(phi, wires[, id]) Arbitrary single qubit local phase shift PolyXP(q, wires[, id]) An arbitrary second-order polynomial observable. PrepSelPrep(lcu[, control, id]) Implements a block-encoding of a linear combination of unitaries. Projector(state, wires[, id]) Observable corresponding to the state projector \\(P=\\ket{\\phi}\\bra{\\phi}\\). QAOAEmbedding(features, weights, wires[, ...]) Encodes \\(N\\) features into \\(n>N\\) qubits, using a layered, trainable quantum circuit that is inspired by the QAOA ansatz proposed by Killoran et al. (2020). QDrift(hamiltonian, time[, n, seed, id]) An operation representing the QDrift approximation for the complex matrix exponential of a given Hamiltonian. QFT(wires) Apply a quantum Fourier transform (QFT). QNGOptimizer([stepsize, approx, lam]) Optimizer with adaptive learning rate, via calculation of the diagonal or block-diagonal approximation to the Fubini-Study metric tensor. QNGOptimizerQJIT([stepsize, approx, lam]) Optax-like and jax.jit/qml.qjit-compatible implementation of the QNGOptimizer, a step- and parameter-dependent learning rate optimizer, leveraging a reparameterization of the optimization space based on the Fubini-Study metric tensor. QNSPSAOptimizer([stepsize, regularization, ...]) Quantum natural SPSA (QNSPSA) optimizer. QNode(func, device[, interface, ...]) Represents a quantum node in the hybrid computational graph. QROM(bitstrings, control_wires, ...[, clean, id]) Applies the QROM operator. QROMStatePreparation(state_vector, wires, ...) Prepares a quantum state using Quantum Read-Only Memory (QROM). QSVT(UA, projectors) Implements the quantum singular value transformation (QSVT) circuit. QuadOperator(phi, wires[, id]) The generalized quadrature observable \\(\\x_\\phi = \\x cos\\phi+\\p\\sin\\phi\\). QuadP(wires) The momentum quadrature observable \\(\\hat{p}\\). QuadX(wires) The position quadrature observable \\(\\hat{x}\\). QuadraticPhase(s, wires[, id]) Quadratic phase shift. QuantumMonteCarlo(probs, func, target_wires, ...) Performs the quantum Monte Carlo estimation algorithm. QuantumPhaseEstimation(unitary[, ...]) Performs the quantum phase estimation circuit. QubitCarry(wires) Apply the QubitCarry operation to four input wires. QubitChannel(K_list, wires[, id]) Apply an arbitrary fixed quantum channel. QubitDensityMatrix(state, wires) Prepare subsystems using the given density matrix. QubitSum(wires) Apply a QubitSum operation on three input wires. QubitUnitary(U, wires) Apply an arbitrary unitary matrix with a dimension that is a power of two. Qubitization(hamiltonian, control[, id]) Applies the Qubitization operator. QueuingManager() Singleton global entry point for managing active recording contexts. QutritAmplitudeDamping(gamma_10, gamma_20, ...) Single-qutrit amplitude damping error channel. QutritBasisState(n, wires) Prepares a single computational basis state for a qutrit system. QutritBasisStatePreparation(basis_state, wires) Prepares a basis state on the given wires using a sequence of TShift gates. QutritChannel(K_list[, wires, id]) Apply an arbitrary fixed qutrit channel. QutritDepolarizingChannel(p, wires[, id]) Single-qutrit symmetrically depolarizing error channel. QutritUnitary(*params, wires) Apply an arbitrary, fixed unitary matrix. RMSPropOptimizer([stepsize, decay, eps]) Root mean squared propagation optimizer. RX(phi, wires[, id]) The single qubit X rotation RY(phi, wires[, id]) The single qubit Y rotation RZ(phi, wires[, id]) The single qubit Z rotation RandomLayers(weights, wires[, ratio_imprim, ...]) Layers of randomly chosen single qubit rotations and 2-qubit entangling gates, acting on randomly chosen qubits. Reflection(U[, alpha, reflection_wires, id]) Apply a reflection about a state \\(|\\Psi\\rangle\\). ResetError(p0, p1, wires[, id]) Single-qubit Reset error channel. RiemannianGradientOptimizer(circuit[, ...]) Riemannian gradient optimizer. Rot(phi, theta, omega, wires[, id]) Arbitrary single qubit rotation Rotation(phi, wires[, id]) Phase space rotation. RotoselectOptimizer([possible_generators]) Rotoselect gradient-free optimizer. RotosolveOptimizer([substep_optimizer, ...]) Rotosolve gradient-free optimizer. S(wires) The single-qubit phase gate SISWAP(wires) The square root of i-swap operator. SPSAOptimizer([maxiter, alpha, gamma, c, A, a]) The Simultaneous Perturbation Stochastic Approximation method (SPSA) is a stochastic approximation algorithm for optimizing cost functions whose evaluation may involve noise. SQISW alias of SISWAP SWAP(wires) The swap operator SX(wires) The single-qubit Square-Root X operator. Select(ops, control[, work_wires, id]) The Select operator, also known as multiplexer or multiplexed operation, applies different operations depending on the state of designated control wires. SelectPauliRot(angles, control_wires, ...[, ...]) Applies individual single-qubit Pauli rotations depending on the state of designated control qubits. SemiAdder(x_wires, y_wires, work_wires[, id]) This operator performs the plain addition of two integers \\(x\\) and \\(y\\) in the computational basis: ShotAdaptiveOptimizer(min_shots[, ...]) Optimizer where the shot rate is adaptively calculated using the variances of the parameter-shift gradient. SimplifiedTwoDesign(initial_layer_weights, ...) Layers consisting of a simplified 2-design architecture of Pauli-Y rotations and controlled-Z entanglers proposed in Cerezo et al. (2021). SingleExcitation(phi, wires[, id]) Single excitation rotation. SingleExcitationMinus(phi, wires[, id]) Single excitation rotation with negative phase-shift outside the rotation subspace. SingleExcitationPlus(phi, wires[, id]) Single excitation rotation with positive phase-shift outside the rotation subspace. Snapshot([tag, measurement, shots]) The Snapshot operation saves the internal execution state of the quantum function at a specific point in the execution pipeline. SparseHamiltonian(H, wires[, id]) A Hamiltonian represented directly as a sparse matrix in Compressed Sparse Row (CSR) format. SpecialUnitary(theta, wires[, id]) Gate from the group \\(SU(N)\\) with \\(N=2^n\\) for \\(n\\) qubits. SqueezedState(r, phi, wires[, id]) Prepares a squeezed vacuum state. Squeezing(r, phi, wires[, id]) Phase space squeezing. SqueezingEmbedding(features, wires[, ...]) Encodes \\(N\\) features into the squeezing amplitudes \\(r \\geq 0\\) or phases \\(\\phi \\in [0, 2\\pi)\\) of \\(M\\) modes, where \\(N\\leq M\\). StatePrep(state, wires[, pad_with, ...]) Prepare subsystems using a state vector in the computational basis. StronglyEntanglingLayers(weights, wires[, ...]) Layers consisting of single qubit rotations and entanglers, inspired by the circuit-centric classifier design arXiv:1804.00633. Superposition(coeffs, bases, wires, work_wire) Prepare a superposition of computational basis states. T(wires) The single-qubit T gate TAdd(wires) The 2-qutrit controlled add gate TClock(wires) Ternary Clock gate THadamard(wires, subspace) The ternary Hadamard operator THermitian(A, wires[, id]) An arbitrary Hermitian observable for qutrits. TRX(phi, wires[, subspace, id]) The single qutrit X rotation TRY(phi, wires[, subspace, id]) The single qutrit Y rotation TRZ(phi, wires[, subspace, id]) The single qutrit Z rotation TSWAP(wires) The ternary swap operator. TShift(wires) The qutrit shift operator TTN(wires, n_block_wires, block, n_params_block) The TTN template broadcasts an input circuit across many wires following the architecture of a tree tensor network. TemporaryAND(wires, control_values) The TemporaryAND operation is a three-qubit gate equivalent to an AND, or reversible Toffoli, gate that leverages extra information about the target wire to enable more efficient circuit decompositions. TensorN(wires) The tensor product of the NumberOperator acting on different wires. ThermalRelaxationError(pe, t1, t2, tg, wires) Thermal relaxation error channel. ThermalState(nbar, wires[, id]) Prepares a thermal state. Toffoli(wires) Toffoli (controlled-controlled-X) gate. Tracker([dev, callback, persistent]) This class stores information about device executions and allows users to interact with that data upon individual executions and batches, even within parameter-shift gradients and optimization steps. TritFlip(p_01, p_02, p_12, wires[, id]) Single-qutrit trit flip error channel, used for applying \"bit flips\" on each qutrit subspace. TrotterProduct(hamiltonian, time[, n, ...]) An operation representing the Suzuki-Trotter product approximation for the complex matrix exponential of a given Hamiltonian. TrotterizedQfunc(time, *trainable_args[, ...]) An operation representing the Suzuki-Trotter product approximation applied to a set of operations defined in a function. TwoLocalSwapNetwork(wires[, acquaintances, ...]) Apply two-local gate operations using a canonical 2-complete linear (2-CCL) swap network. TwoModeSqueezing(r, phi, wires[, id]) Phase space two-mode squeezing. U1(phi, wires[, id]) U1 gate. U2(phi, delta, wires[, id]) U2 gate. U3(theta, phi, delta, wires[, id]) Arbitrary single qubit unitary. UCCSD(weights, wires[, s_wires, d_wires, ...]) Implements the Unitary Coupled-Cluster Singles and Doubles (UCCSD) ansatz. WireCut(wires) The wire cut operation, used to manually mark locations for wire cuts. X alias of PauliX Y alias of PauliY Z alias of PauliZ grad(func[, argnum, method, h]) Returns the gradient as a callable function of hybrid quantum-classical functions. kUpCCGSD(weights, wires[, k, delta_sz, ...]) Implements the k-Unitary Pair Coupled-Cluster Generalized Singles and Doubles (k-UpCCGSD) ansatz. Variables\u00b6 default_config Configuration class. code/qml Download Python script Download Notebook View on GitHub Previous Next Using PennyLane What is PennyLane? Quantum circuits Gradients and training Quantum operators Measurements Dynamic quantum circuits Templates Inspecting circuits Compiling circuits Compiling workflows Importing workflows Quantum Chemistry Quantum Datasets Logging Release news Release notes Deprecations Updated Operators Program capture sharp bits Development Development guide Building a plugin Adding new operators API qml Functions qml.about qml.add_decomps qml.add_noise qml.adjoint qml.adjoint_metric_tensor qml.apply qml.apply_controlled_Q qml.assert_equal qml.batch_input qml.batch_params qml.batch_partial qml.binary_mapping qml.bloq_registers qml.bravyi_kitaev qml.breakpoint qml.center qml.christiansen_mapping qml.classical_shadow qml.clifford_t_decomposition qml.comm qml.commutation_dag qml.commutator qml.compile qml.cond qml.counts qml.ctrl qml.cut_circuit qml.cut_circuit_mc qml.debug_expval qml.debug_probs qml.debug_state qml.debug_tape qml.defer_measurements qml.density_matrix qml.device qml.dot qml.draw qml.draw_mpl qml.dynamic_one_shot qml.eigvals qml.equal qml.evolve qml.execute qml.exp qml.expval qml.for_loop qml.from_openfermion qml.from_pyquil qml.from_qasm qml.from_qasm3 qml.from_qiskit qml.from_qiskit_noise qml.from_qiskit_op qml.from_quil qml.from_quil_file qml.generator qml.import_operator qml.is_commuting qml.is_hermitian qml.is_unitary qml.iterative_qpe qml.jacobian qml.jordan_wigner qml.jvp qml.layer qml.lie_closure qml.list_decomps qml.map_wires qml.matrix qml.measure qml.metric_tensor qml.mutual_info qml.parity_transform qml.pattern_matching qml.pattern_matching_optimization qml.pauli_decompose qml.paulix_ops qml.poly_to_angles qml.pow qml.probs qml.prod qml.purity qml.qjit qml.qnode qml.qsvt qml.quantum_monte_carlo qml.refresh_devices qml.register_condition qml.register_resources qml.registers qml.resource_rep qml.right_canonicalize_mps qml.s_prod qml.sample qml.set_shots qml.shadow_expval qml.simplify qml.snapshots qml.specs qml.state qml.structure_constants qml.sum qml.symmetry_generators qml.taper qml.taper_operation qml.to_bloq qml.to_openfermion qml.to_openqasm qml.transform qml.transform_angles qml.trotterize qml.unary_mapping qml.var qml.version qml.vjp qml.vn_entropy qml.while_loop Classes qml.AQFT qml.AdagradOptimizer qml.AdamOptimizer qml.AdaptiveOptimizer qml.Adder qml.AllSinglesDoubles qml.AmplitudeAmplification qml.AmplitudeDamping qml.AmplitudeEmbedding qml.AngleEmbedding qml.ApproxTimeEvolution qml.ArbitraryStatePreparation qml.ArbitraryUnitary qml.Barrier qml.BasicEntanglerLayers qml.BasisEmbedding qml.BasisRotation qml.BasisState qml.Beamsplitter qml.BitFlip qml.BlockEncode qml.BooleanFn qml.BoseSentence qml.BoseWord qml.CCZ qml.CH qml.CNOT qml.CPhase qml.CPhaseShift00 qml.CPhaseShift01 qml.CPhaseShift10 qml.CRX qml.CRY qml.CRZ qml.CRot qml.CSWAP qml.CVNeuralNetLayers qml.CY qml.CZ qml.CatState qml.CircuitGraph qml.ClassicalShadow qml.CoherentState qml.CommutingEvolution qml.Configuration qml.ControlledAddition qml.ControlledPhase qml.ControlledPhaseShift qml.ControlledQubitUnitary qml.ControlledQutritUnitary qml.ControlledSequence qml.CosineWindow qml.CrossKerr qml.CubicPhase qml.DepolarizingChannel qml.DiagonalQubitUnitary qml.DisplacedSqueezedState qml.Displacement qml.DisplacementEmbedding qml.DoubleExcitation qml.DoubleExcitationMinus qml.DoubleExcitationPlus qml.ECR qml.Elbow qml.FABLE qml.FermiA qml.FermiC qml.FermiSentence qml.FermiWord qml.FermionicDoubleExcitation qml.FermionicSWAP qml.FermionicSingleExcitation qml.FlipSign qml.FockDensityMatrix qml.FockState qml.FockStateProjector qml.FockStateVector qml.FromBloq qml.GQSP qml.GateFabric qml.GaussianState qml.GellMann qml.GeneralizedAmplitudeDamping qml.GlobalPhase qml.GradientDescentOptimizer qml.GroverOperator qml.H qml.Hadamard qml.Hamiltonian qml.Hermitian qml.HilbertSchmidt qml.I qml.IQPEmbedding qml.ISWAP qml.Identity qml.IntegerComparator qml.Interferometer qml.InterferometerUnitary qml.IsingXX qml.IsingXY qml.IsingYY qml.IsingZZ qml.Kerr qml.LocalHilbertSchmidt qml.MERA qml.MPS qml.MPSPrep qml.ModExp qml.MomentumOptimizer qml.MomentumQNGOptimizer qml.MottonenStatePreparation qml.MultiControlledX qml.MultiRZ qml.Multiplier qml.NesterovMomentumOptimizer qml.NoiseModel qml.NumberOperator qml.OrbitalRotation qml.OutAdder qml.OutMultiplier qml.OutPoly qml.PCPhase qml.PSWAP qml.ParticleConservingU1 qml.ParticleConservingU2 qml.PauliError qml.PauliRot qml.PauliX qml.PauliY qml.PauliZ qml.Permute qml.PhaseAdder qml.PhaseDamping qml.PhaseFlip qml.PhaseShift qml.PolyXP qml.PrepSelPrep qml.Projector qml.QAOAEmbedding qml.QDrift qml.QFT qml.QNGOptimizer qml.QNGOptimizerQJIT qml.QNSPSAOptimizer qml.QNode qml.QROM qml.QROMStatePreparation qml.QSVT qml.QuadOperator qml.QuadP qml.QuadX qml.QuadraticPhase qml.QuantumMonteCarlo qml.QuantumPhaseEstimation qml.QubitCarry qml.QubitChannel qml.QubitDensityMatrix qml.QubitSum qml.QubitUnitary qml.Qubitization qml.QueuingManager qml.QutritAmplitudeDamping qml.QutritBasisState qml.QutritBasisStatePreparation qml.QutritChannel qml.QutritDepolarizingChannel qml.QutritUnitary qml.RMSPropOptimizer qml.RX qml.RY qml.RZ qml.RandomLayers qml.Reflection qml.ResetError qml.RiemannianGradientOptimizer qml.Rot qml.Rotation qml.RotoselectOptimizer qml.RotosolveOptimizer qml.S qml.SISWAP qml.SPSAOptimizer qml.SQISW qml.SWAP qml.SX qml.Select qml.SelectPauliRot qml.SemiAdder qml.ShotAdaptiveOptimizer qml.SimplifiedTwoDesign qml.SingleExcitation qml.SingleExcitationMinus qml.SingleExcitationPlus qml.Snapshot qml.SparseHamiltonian qml.SpecialUnitary qml.SqueezedState qml.Squeezing qml.SqueezingEmbedding qml.StatePrep qml.StronglyEntanglingLayers qml.Superposition qml.T qml.TAdd qml.TClock qml.THadamard qml.THermitian qml.TRX qml.TRY qml.TRZ qml.TSWAP qml.TShift qml.TTN qml.TemporaryAND qml.TensorN qml.ThermalRelaxationError qml.ThermalState qml.Toffoli qml.Tracker qml.TritFlip qml.TrotterProduct qml.TrotterizedQfunc qml.TwoLocalSwapNetwork qml.TwoModeSqueezing qml.U1 qml.U2 qml.U3 qml.UCCSD qml.WireCut qml.X qml.Y qml.Z qml.grad qml.kUpCCGSD Variables qml.default_config qml.bose qml.compiler qml.data qml.decomposition qml.debugging qml.drawer qml.fermi qml.fourier qml.gradients qml.io qml.kernels qml.labs qml.liealg qml.logging qml.math qml.noise qml.numpy qml.ops.op_math qml.pauli qml.pulse qml.qaoa qml.qchem qml.qcut qml.qnn qml.resource qml.shadows qml.spin qml.transforms Internals qml.capture qml.concurrency qml.devices qml.ftqc qml.measurements qml.pytrees qml.operation qml.queuing qml.tape qml.wires qml.workflow Navigation index modules | next | previous | PennyLane 0.42.0 documentation \u00bb qml",
    "url": "https://docs.pennylane.ai/en/stable/code/qml.html",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 4939,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:25.064544"
  },
  {
    "id": "pennylane_1634964610243990997_0",
    "title": "PennyLane Documentation \u2014 PennyLane 0.42.0 documentation",
    "content": "Why PennyLane Why PennyLane Features Demos Compilation Datasets Performance Devices Teach Getting Started Getting Started Install Demos Codebook Challenges Support Documentation Documentation How-to demos Development guide Catalyst API GitHub Ecosystem Ecosystem Blog Glossary Videos FAQs GitHub Support Install Navigation index modules | next | PennyLane 0.42.0 documentation \u00bb PennyLane Documentation Table of contents Search Using PennyLane What is PennyLane? Quantum circuits Gradients and training Quantum operators Measurements Dynamic quantum circuits Templates Inspecting circuits Compiling circuits Compiling workflows Importing workflows Quantum Chemistry Quantum Datasets Logging Release news Release notes Deprecations Updated Operators Program capture sharp bits Development Development guide Building a plugin Adding new operators API qml qml.bose qml.compiler qml.data qml.decomposition qml.debugging qml.drawer qml.fermi qml.fourier qml.gradients qml.io qml.kernels qml.labs qml.liealg qml.logging qml.math qml.noise qml.numpy qml.ops.op_math qml.pauli qml.pulse qml.qaoa qml.qchem qml.qcut qml.qnn qml.resource qml.shadows qml.spin qml.transforms Internals qml.capture qml.concurrency qml.devices qml.ftqc qml.measurements qml.pytrees qml.operation qml.queuing qml.tape qml.wires qml.workflow Docs PennyLane Documentation PennyLane Documentation\u00b6 Release: 0.42.0 PennyLane is a cross-platform Python library for quantum computing, quantum machine learning, and quantum chemistry. Train a quantum computer the same way as a neural network. Using PennyLane A guided tour of the core features of PennyLane Developing How you can contribute to the development of PennyLane API Explore the PennyLane API Features\u00b6 Follow the gradient. Built-in automatic differentiation of quantum circuits. Best of both worlds. Support for hybrid quantum and classical models; connect quantum hardware with PyTorch, TensorFlow, and NumPy. Just in time compilation. Compile your entire hybrid workflow, with support for adaptive circuits, real-time measurement feedback, unbounded loops, and more. See Catalyst for more details. Batteries included. Provides optimization and machine learning tools. Device-independent. The same quantum circuit model can be run on different backends. Install plugins to access even more devices, including Strawberry Fields, Amazon Braket, IBM Q, Google Cirq, Rigetti Forest, Microsoft QDK, and ProjectQ. Getting started\u00b6 For an introduction to quantum machine learning, we have several guides and resources available on our QML website, including What is QML?, frequently asked questions, a glossary of key concepts, and a curated selection of QML videos. Then, take a deeper dive into quantum machine learning by exploring cutting-edge algorithms using PennyLane and near-term quantum hardware, with our collection of QML demonstrations. You can also check out the Using PennyLane section for more details on the quantum operations, and to explore the available optimization tools provided by PennyLane. We also have a detailed guide on how to write your own PennyLane-compatible quantum device. Finally, play around with the numerous devices and plugins available for running your hybrid optimizations\u2014these include IBM Q, provided by the PennyLane-Qiskit plugin, as well as the Rigetti Aspen QPU provided by PennyLane-Rigetti. How to cite\u00b6 If you are doing research using PennyLane, please cite Ville Bergholm et al. PennyLane: Automatic differentiation of hybrid quantum-classical computations. 2018. arXiv:1811.04968 Support and contribution\u00b6 Source Code: https://github.com/PennyLaneAI/pennylane Issue Tracker: https://github.com/PennyLaneAI/pennylane/issues If you are having issues, please let us know by posting the issue on our GitHub issue tracker. We encourage contributions \u2014 simply fork the PennyLane repository, and then make a pull request containing your contribution. All contributors to PennyLane will be listed as authors on the releases. To chat directly with the team designing and building PennyLane, as well as members of our community \u2014 ranging from quantum machine learning researchers, to students, to those just interested in being a part of a rapidly growing industry \u2014 you can join our discussion forum. License\u00b6 PennyLane is free and open source, released under the Apache License, Version 2.0. index Download Python script Download Notebook View on GitHub Next Using PennyLane What is PennyLane? Quantum circuits Gradients and training Quantum operators Measurements Dynamic quantum circuits Templates Inspecting circuits Compiling circuits Compiling workflows Importing workflows Quantum Chemistry Quantum Datasets Logging Release news Release notes Deprecations Updated Operators Program capture sharp bits Development Development guide Building a plugin Adding new operators API qml qml.bose qml.compiler qml.data qml.decomposition qml.debugging qml.drawer qml.fermi qml.fourier qml.gradients qml.io qml.kernels qml.labs qml.liealg qml.logging qml.math qml.noise qml.numpy qml.ops.op_math qml.pauli qml.pulse qml.qaoa qml.qchem qml.qcut qml.qnn qml.resource qml.shadows qml.spin qml.transforms Internals qml.capture qml.concurrency qml.devices qml.ftqc qml.measurements qml.pytrees qml.operation qml.queuing qml.tape qml.wires qml.workflow Navigation index modules | next | PennyLane 0.42.0 documentation \u00bb PennyLane Documentation",
    "url": "https://docs.pennylane.ai/en/stable/",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 696,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:26.322095"
  },
  {
    "id": "pennylane_2859280430617496166_0",
    "title": "Quantum Compilation \u2014 PennyLane",
    "content": "Quantum CompilationDrastically reduce the size of your circuits to allow them to run on next-generation quantum computing hardware. On this page, you will find explanations and implementations of important compilation passes and techniques.What is Quantum Compilation? (Clifford + T) Gate SetThis target gate set contains S, H, CNOT, and T gates for FTQC.Pauli Product MeasurementMaps a (Clifford + T) circuit to Pauli product rotations and measurements.Parity TableThe parity table is a representation for the phase polynomial.One-qubit SynthesisCreates a circuit with three rotations gates from a unitary 2x2 matrix.Two-qubit SynthesisCreates a circuit with optimal CNOT gate count from a 4x4 unitary matrix U.Loop Boundary OptimizationOptimizes redundant operations across loop iterations without unrolling.PermRowCol AlgorithmMaps CNOT circuits to new optimized ones under constrained connectivity and dynamic qubit allocation.RowCol AlgorithmMaps CNOT circuits to new optimized ones under constrained connectivity.Phase Polynomial Intermediate RepresentationSee a modern overview of phase polynomials and how they are utilized in various contexts in quantum compilation.Parity Matrix Intermediate RepresentationThe parity matrix describes a circuit containing only CNOT gates.Lazy SelectRemove complementary control nodes of Select operators.Partial SelectRemove redundant control nodes from a partial Select operator.Diagonal unitary decompositionRecursively decompose a diagonal unitary operator.Pauliopt: Holistic circuit resynthesis using phase polynomialsA holistic approach to phase polynomial based circuit resynthesisControl logic decompositionsDiscover a collection of decompositions for control logic.Select-U(2) DecompositionSee how to decompose a Select-applied/multiplexed U(2) operator or Pauli rotation.ZX-Calculus Intermediate RepresentationZX-calculus is a graphical language that can represent quantum circuits.Start compiling with PennyLaneInstall PennyLaneExplore Catalyst",
    "url": "https://pennylane.ai/compilation",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 240,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:34.257972"
  },
  {
    "id": "pennylane_-901047202642838040_0",
    "title": "PennyLane Documentation \u2014 PennyLane 0.42.0 documentation",
    "content": "Why PennyLane Why PennyLane Features Demos Compilation Datasets Performance Devices Teach Getting Started Getting Started Install Demos Codebook Challenges Support Documentation Documentation How-to demos Development guide Catalyst API GitHub Ecosystem Ecosystem Blog Glossary Videos FAQs GitHub Support Install Navigation index modules | next | PennyLane 0.42.0 documentation \u00bb PennyLane Documentation Table of contents Search Using PennyLane What is PennyLane? Quantum circuits Gradients and training Quantum operators Measurements Dynamic quantum circuits Templates Inspecting circuits Compiling circuits Compiling workflows Importing workflows Quantum Chemistry Quantum Datasets Logging Release news Release notes Deprecations Updated Operators Program capture sharp bits Development Development guide Building a plugin Adding new operators API qml qml.bose qml.compiler qml.data qml.decomposition qml.debugging qml.drawer qml.fermi qml.fourier qml.gradients qml.io qml.kernels qml.labs qml.liealg qml.logging qml.math qml.noise qml.numpy qml.ops.op_math qml.pauli qml.pulse qml.qaoa qml.qchem qml.qcut qml.qnn qml.resource qml.shadows qml.spin qml.transforms Internals qml.capture qml.concurrency qml.devices qml.ftqc qml.measurements qml.pytrees qml.operation qml.queuing qml.tape qml.wires qml.workflow Docs PennyLane Documentation PennyLane Documentation\u00b6 Release: 0.42.0 PennyLane is a cross-platform Python library for quantum computing, quantum machine learning, and quantum chemistry. Train a quantum computer the same way as a neural network. Using PennyLane A guided tour of the core features of PennyLane Developing How you can contribute to the development of PennyLane API Explore the PennyLane API Features\u00b6 Follow the gradient. Built-in automatic differentiation of quantum circuits. Best of both worlds. Support for hybrid quantum and classical models; connect quantum hardware with PyTorch, TensorFlow, and NumPy. Just in time compilation. Compile your entire hybrid workflow, with support for adaptive circuits, real-time measurement feedback, unbounded loops, and more. See Catalyst for more details. Batteries included. Provides optimization and machine learning tools. Device-independent. The same quantum circuit model can be run on different backends. Install plugins to access even more devices, including Strawberry Fields, Amazon Braket, IBM Q, Google Cirq, Rigetti Forest, Microsoft QDK, and ProjectQ. Getting started\u00b6 For an introduction to quantum machine learning, we have several guides and resources available on our QML website, including What is QML?, frequently asked questions, a glossary of key concepts, and a curated selection of QML videos. Then, take a deeper dive into quantum machine learning by exploring cutting-edge algorithms using PennyLane and near-term quantum hardware, with our collection of QML demonstrations. You can also check out the Using PennyLane section for more details on the quantum operations, and to explore the available optimization tools provided by PennyLane. We also have a detailed guide on how to write your own PennyLane-compatible quantum device. Finally, play around with the numerous devices and plugins available for running your hybrid optimizations\u2014these include IBM Q, provided by the PennyLane-Qiskit plugin, as well as the Rigetti Aspen QPU provided by PennyLane-Rigetti. How to cite\u00b6 If you are doing research using PennyLane, please cite Ville Bergholm et al. PennyLane: Automatic differentiation of hybrid quantum-classical computations. 2018. arXiv:1811.04968 Support and contribution\u00b6 Source Code: https://github.com/PennyLaneAI/pennylane Issue Tracker: https://github.com/PennyLaneAI/pennylane/issues If you are having issues, please let us know by posting the issue on our GitHub issue tracker. We encourage contributions \u2014 simply fork the PennyLane repository, and then make a pull request containing your contribution. All contributors to PennyLane will be listed as authors on the releases. To chat directly with the team designing and building PennyLane, as well as members of our community \u2014 ranging from quantum machine learning researchers, to students, to those just interested in being a part of a rapidly growing industry \u2014 you can join our discussion forum. License\u00b6 PennyLane is free and open source, released under the Apache License, Version 2.0. index Download Python script Download Notebook View on GitHub Next Using PennyLane What is PennyLane? Quantum circuits Gradients and training Quantum operators Measurements Dynamic quantum circuits Templates Inspecting circuits Compiling circuits Compiling workflows Importing workflows Quantum Chemistry Quantum Datasets Logging Release news Release notes Deprecations Updated Operators Program capture sharp bits Development Development guide Building a plugin Adding new operators API qml qml.bose qml.compiler qml.data qml.decomposition qml.debugging qml.drawer qml.fermi qml.fourier qml.gradients qml.io qml.kernels qml.labs qml.liealg qml.logging qml.math qml.noise qml.numpy qml.ops.op_math qml.pauli qml.pulse qml.qaoa qml.qchem qml.qcut qml.qnn qml.resource qml.shadows qml.spin qml.transforms Internals qml.capture qml.concurrency qml.devices qml.ftqc qml.measurements qml.pytrees qml.operation qml.queuing qml.tape qml.wires qml.workflow Navigation index modules | next | PennyLane 0.42.0 documentation \u00bb PennyLane Documentation",
    "url": "https://docs.pennylane.ai",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 696,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:35.547224"
  },
  {
    "id": "pennylane_-9153714166126336531_0",
    "title": "Discussion Forum \u2014 PennyLane",
    "content": "Category Topics PennyLane Help For help with PennyLane, including questions and help debugging. 1570 Demos Use this category for questions related to PennyLane Demos! 38 Codebook Use this category for questions about the content of the PennyLane Codebook! 254 Quantum Compilation Use this category for questions about topics, techniques, or software implementations. See the Quantum Compilation wiki for more information. 1 Catalyst For all posts related to Catalyst, the package that enables just-in-time (JIT) compilation of PennyLane programs. This includes usage, help, and development. See the Catalyst GitHub (https://github.com/pennylaneai/catalyst) and Documentation (https://docs.pennylane.ai/projects/catalyst/en/latest) for more details. 17 PennyLane Challenges Use this category for questions about the PennyLane Challenges! You can find them at pennylane.ai/challenges. 47 PennyLane Plugins For posts discussing the PennyLane plugins, including questions about usage, help, and development. See the documentation for all currently available plugins. 37 PennyLane Feedback Discussion about PennyLane, how it works, and how we can improve it. 27 PennyLane Development For topics discussing PennyLane development. For bug reports, please use the GitHub issue tracker. 54 Announcements For announcing things 7 Photonic Software For discussion and questions regarding Xanadu\u2019s photonic software offerings. 15 Borealis Use this category for questions about Borealis \u2013 Xanadu\u2019s quantum computer which achieved quantum computational advantage in 2022. 24 FlamingPy For all posts related to FlamingPy, the Python library for efficient simulations of error correction in fault-tolerant quantum computers developed by Xanadu. This includes usage, help, and development. See the FlamingPy GitHub and Documentation for more details. 0",
    "url": "https://discuss.pennylane.ai/",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 246,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:36.875983"
  },
  {
    "id": "pennylane_-7495311099246358674_0",
    "title": "Quantum Devices \u2014 PennyLane",
    "content": "Quantum DevicesExplore PennyLane's quantum device ecosystem with 40+ integrated options, from high-performance simulators to cutting-edge hardware from partners like IBM Quantum, Amazon Braket and Google Quantum AI.Get startedPrototypingHigh-performanceQuantum hardwareQMLStart your quantum journeyBegin with user-friendly quantum devices designed to help you experiment and achieve impactful results.default.qubitA simple Python state vector simulator of qubit-based quantum circuits. This is PennyLane\u2019s most featureful device, ideal for learning and prototyping.lightning.qubitA performant state vector simulator of quantum circuits. This device is well-suited for 20+ qubit workflows, offering jit/qjit compatibility and more.Start your quantum journeyBegin with user-friendly quantum devices designed to help you experiment and achieve impactful results.default.qubitA simple Python state vector simulator of qubit-based quantum circuits. This is PennyLane\u2019s most featureful device, ideal for learning and prototyping.lightning.qubitA performant state vector simulator of quantum circuits. This device is well-suited for 20+ qubit workflows, offering jit/qjit compatibility and more.Browse all quantum devices or use advanced filtering to find the ideal tool to power your research.49 devicesFilters 0default.qubitA simple Python state vector simulator of qubit-based quantum circuits. This is PennyLane\u2019s most featureful device, ideal for learning and prototyping.lightning.qubitA performant state vector simulator of quantum circuits. This device is well-suited for 20+ qubit workflows, offering jit/qjit compatibility and more.qiskit.remoteAn entry point in PennyLane to access any Qiskit backend. This device lets you access any device available through qiskit_ibm_runtime.default.mixedA simple mixed state simulator of qubit-based quantum circuits. This device supports versatile noise models that are compatible with ML frameworks like JAX and Torch.lightning.gpuA fast GPU state vector qubit simulator utilizing NVIDIA\u2019s cuQuantum SDK. Ideal for 20+ qubit workflows with multi-GPU parallelization and fast gradients.qrack.simulatorA GPU-accelerated device that integrates Qrack with PennyLane and Catalyst. Ideal for noisy, just-in-time compilable workflows that run on GPUs.default.tensorA state vector simulator of qubit quantum circuits based on tensor networks. This device can simulate differentiable circuits with its tensor network backend.braket.aws.qubitRun gate-based quantum computations on Amazon Braket\u2019s remote service. This device is the entry point to Braket\u2019s performant simulators and real hardware offerings.Current page of7PennyLane's quantum device partners",
    "url": "https://pennylane.ai/devices",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 331,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:38.241049"
  },
  {
    "id": "pennylane_7997631695803608186_0",
    "title": "Catalyst \u2014 Catalyst 0.12.0 documentation",
    "content": "Why PennyLane Why PennyLane Features Demos Compilation Datasets Performance Devices Teach Getting Started Getting Started Install Demos Codebook Challenges Support Documentation Documentation How-to demos Development guide Catalyst API GitHub Ecosystem Ecosystem Blog Glossary Videos FAQs GitHub Support Install Navigation index modules | next | Catalyst 0.12.0 documentation \u00bb Catalyst Table of contents Search Catalyst Overview Installation Quick Start Supported devices AutoGraph guide Sharp bits and debugging tips JAX integration Callbacks and GPUs Release notes Development Architecture PennyLane Frontend Compiler Core MLIR Dialects Compiler Passes Compiler Plugins Quantum Runtime Debugging Tips Custom Devices Roadmap Examples Magic State Distillation Variational Quantum Eigensolver Qubit Rotation QML Optimization with Optax API PennyLane Python Frontend Catalyst Command Line Interface Runtime Device Interface Docs Catalyst Catalyst\u00b6 Release: 0.12.0 Catalyst is an experimental package that enables just-in-time (JIT) compilation of PennyLane programs. Compile the entire quantum-classical workflow. Installation Learn how to install Catalyst Quickstart Get started using Catalyst with PennyLane GitHub View the Catalyst source code on GitHub Catalyst is currently under heavy development \u2014 if you have suggestions on the API or use-cases you\u2019d like to be covered, please open an GitHub issue or reach out. We\u2019d love to hear about how you\u2019re using the library, collaborate on development, or integrate additional devices and frontends. Key Features\u00b6 Compile the entire quantum-classical workflow, including any optimization loops. Use Catalyst alongside PennyLane directly from Python. Simply decorate quantum code and hybrid functions with @qjit, leading to significant performance improvements over standard Python execution. Access advanced control flow that supports both quantum and classical instructions. Infrastructure for both quantum and classical compilation, allowing you to compile quantum circuits that contain control flow. Built to be end-to-end differentiable. Support for PennyLane-Lightning high performance simulators, and Amazon Braket devices. Additional hardware support, including QPUs, to come. Overview\u00b6 Catalyst currently consists of the following components: Catalyst Compiler. The core Catalyst compiler is built using MLIR, with the addition of a quantum dialect used to represent quantum instructions. This allows for a high-level intermediate representation of the classical and quantum components of the program, resulting in advantages during optimization. Once optimized, the compiler lowers the representation down to LLVM + QIR, and a machine binary is produced. Catalyst Runtime. The runtime is a C++ runtime with multiple-device support based on QIR that enables the execution of Catalyst-compiled quantum programs. A complete list of all backend devices along with the quantum instruction set supported by these runtime implementations can be found by visiting the runtime documentation. In addition, we also provide a Python frontend for PennyLane and JAX: PennyLane JAX frontend. A Python library that provides a @qjit decorator to just-in-time compile PennyLane hybrid quantum-classical programs. In addition, the frontend package provides Python functions for defining Catalyst-compatible control flow structures, gradient, and mid-circuit measurement. Source Code: https://github.com/PennyLaneAI/catalyst Issue Tracker: https://github.com/PennyLaneAI/catalyst/issues If you are having issues, please let us know by posting the issue on our GitHub issue tracker. We also have a PennyLane discussion forum\u2014come join the community and chat with the PennyLane team. Note that we are committed to providing a friendly, safe, and welcoming environment for all. Please read and respect the Code of Conduct. Authors\u00b6 Catalyst is the work of many contributors. If you are doing research using Catalyst, please cite our paper: @article{ Ittah2024, doi = {10.21105/joss.06720}, url = {https://doi.org/10.21105/joss.06720}, year = {2024}, publisher = {The Open Journal}, volume = {9}, number = {99}, pages = {6720}, author = {David Ittah and Ali Asadi and Erick Ochoa Lopez and Sergei Mironov and Samuel Banning and Romain Moyard and Mai Jacob Peng and Josh Izaac}, title = {Catalyst: a Python JIT compiler for auto-differentiable hybrid quantum programs}, journal = {Journal of Open Source Software} } index Download Python script Download Notebook View on GitHub Next Installation Quick Start Supported devices AutoGraph guide Sharp bits and debugging tips JAX integration Callbacks and GPUs Release notes Development Architecture PennyLane Frontend Compiler Core MLIR Dialects Compiler Passes Compiler Plugins Quantum Runtime Debugging Tips Custom Devices Roadmap Examples Magic State Distillation Variational Quantum Eigensolver Qubit Rotation QML Optimization with Optax API PennyLane Python Frontend Catalyst Command Line Interface Runtime Device Interface Navigation index modules | next | Catalyst 0.12.0 documentation \u00bb Catalyst",
    "url": "https://docs.pennylane.ai/projects/catalyst/en/stable/",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 697,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:42.268419"
  },
  {
    "id": "pennylane_8295516617371105279_0",
    "title": "PennyLane Documentation \u2014 PennyLane 0.42.0 documentation",
    "content": "Why PennyLane Why PennyLane Features Demos Compilation Datasets Performance Devices Teach Getting Started Getting Started Install Demos Codebook Challenges Support Documentation Documentation How-to demos Development guide Catalyst API GitHub Ecosystem Ecosystem Blog Glossary Videos FAQs GitHub Support Install Navigation index modules | next | PennyLane 0.42.0 documentation \u00bb PennyLane Documentation Table of contents Search Using PennyLane What is PennyLane? Quantum circuits Gradients and training Quantum operators Measurements Dynamic quantum circuits Templates Inspecting circuits Compiling circuits Compiling workflows Importing workflows Quantum Chemistry Quantum Datasets Logging Release news Release notes Deprecations Updated Operators Program capture sharp bits Development Development guide Building a plugin Adding new operators API qml qml.bose qml.compiler qml.data qml.decomposition qml.debugging qml.drawer qml.fermi qml.fourier qml.gradients qml.io qml.kernels qml.labs qml.liealg qml.logging qml.math qml.noise qml.numpy qml.ops.op_math qml.pauli qml.pulse qml.qaoa qml.qchem qml.qcut qml.qnn qml.resource qml.shadows qml.spin qml.transforms Internals qml.capture qml.concurrency qml.devices qml.ftqc qml.measurements qml.pytrees qml.operation qml.queuing qml.tape qml.wires qml.workflow Docs PennyLane Documentation PennyLane Documentation\u00b6 Release: 0.42.0 PennyLane is a cross-platform Python library for quantum computing, quantum machine learning, and quantum chemistry. Train a quantum computer the same way as a neural network. Using PennyLane A guided tour of the core features of PennyLane Developing How you can contribute to the development of PennyLane API Explore the PennyLane API Features\u00b6 Follow the gradient. Built-in automatic differentiation of quantum circuits. Best of both worlds. Support for hybrid quantum and classical models; connect quantum hardware with PyTorch, TensorFlow, and NumPy. Just in time compilation. Compile your entire hybrid workflow, with support for adaptive circuits, real-time measurement feedback, unbounded loops, and more. See Catalyst for more details. Batteries included. Provides optimization and machine learning tools. Device-independent. The same quantum circuit model can be run on different backends. Install plugins to access even more devices, including Strawberry Fields, Amazon Braket, IBM Q, Google Cirq, Rigetti Forest, Microsoft QDK, and ProjectQ. Getting started\u00b6 For an introduction to quantum machine learning, we have several guides and resources available on our QML website, including What is QML?, frequently asked questions, a glossary of key concepts, and a curated selection of QML videos. Then, take a deeper dive into quantum machine learning by exploring cutting-edge algorithms using PennyLane and near-term quantum hardware, with our collection of QML demonstrations. You can also check out the Using PennyLane section for more details on the quantum operations, and to explore the available optimization tools provided by PennyLane. We also have a detailed guide on how to write your own PennyLane-compatible quantum device. Finally, play around with the numerous devices and plugins available for running your hybrid optimizations\u2014these include IBM Q, provided by the PennyLane-Qiskit plugin, as well as the Rigetti Aspen QPU provided by PennyLane-Rigetti. How to cite\u00b6 If you are doing research using PennyLane, please cite Ville Bergholm et al. PennyLane: Automatic differentiation of hybrid quantum-classical computations. 2018. arXiv:1811.04968 Support and contribution\u00b6 Source Code: https://github.com/PennyLaneAI/pennylane Issue Tracker: https://github.com/PennyLaneAI/pennylane/issues If you are having issues, please let us know by posting the issue on our GitHub issue tracker. We encourage contributions \u2014 simply fork the PennyLane repository, and then make a pull request containing your contribution. All contributors to PennyLane will be listed as authors on the releases. To chat directly with the team designing and building PennyLane, as well as members of our community \u2014 ranging from quantum machine learning researchers, to students, to those just interested in being a part of a rapidly growing industry \u2014 you can join our discussion forum. License\u00b6 PennyLane is free and open source, released under the Apache License, Version 2.0. index Download Python script Download Notebook View on GitHub Next Using PennyLane What is PennyLane? Quantum circuits Gradients and training Quantum operators Measurements Dynamic quantum circuits Templates Inspecting circuits Compiling circuits Compiling workflows Importing workflows Quantum Chemistry Quantum Datasets Logging Release news Release notes Deprecations Updated Operators Program capture sharp bits Development Development guide Building a plugin Adding new operators API qml qml.bose qml.compiler qml.data qml.decomposition qml.debugging qml.drawer qml.fermi qml.fourier qml.gradients qml.io qml.kernels qml.labs qml.liealg qml.logging qml.math qml.noise qml.numpy qml.ops.op_math qml.pauli qml.pulse qml.qaoa qml.qchem qml.qcut qml.qnn qml.resource qml.shadows qml.spin qml.transforms Internals qml.capture qml.concurrency qml.devices qml.ftqc qml.measurements qml.pytrees qml.operation qml.queuing qml.tape qml.wires qml.workflow Navigation index modules | next | PennyLane 0.42.0 documentation \u00bb PennyLane Documentation",
    "url": "https://docs.pennylane.ai/",
    "source": "pennylane",
    "doc_type": "documentation",
    "metadata": {
      "word_count": 696,
      "chunk_index": 0,
      "total_chunks": 1
    },
    "created_at": "2025-07-17T00:00:43.810180"
  }
]